
DeltaDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000182e  00800200  00002c06  00002c9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028c  00801a2e  00801a2e  000044c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000044c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000044f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00004538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004bb  00000000  00000000  00004658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004035  00000000  00000000  00004b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bad  00000000  00000000  00008b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001fac  00000000  00000000  000096f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007ec  00000000  00000000  0000b6a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00009bfb  00000000  00000000  0000be90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002c04  00000000  00000000  00015a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  0001868f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000038f0  00000000  00000000  0001872f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
       2:	00 00       	nop
       4:	83 c0       	rjmp	.+262    	; 0x10c <__bad_interrupt>
       6:	00 00       	nop
       8:	81 c0       	rjmp	.+258    	; 0x10c <__bad_interrupt>
       a:	00 00       	nop
       c:	7f c0       	rjmp	.+254    	; 0x10c <__bad_interrupt>
       e:	00 00       	nop
      10:	7d c0       	rjmp	.+250    	; 0x10c <__bad_interrupt>
      12:	00 00       	nop
      14:	7b c0       	rjmp	.+246    	; 0x10c <__bad_interrupt>
      16:	00 00       	nop
      18:	79 c0       	rjmp	.+242    	; 0x10c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	77 c0       	rjmp	.+238    	; 0x10c <__bad_interrupt>
      1e:	00 00       	nop
      20:	75 c0       	rjmp	.+234    	; 0x10c <__bad_interrupt>
      22:	00 00       	nop
      24:	73 c0       	rjmp	.+230    	; 0x10c <__bad_interrupt>
      26:	00 00       	nop
      28:	71 c0       	rjmp	.+226    	; 0x10c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6f c0       	rjmp	.+222    	; 0x10c <__bad_interrupt>
      2e:	00 00       	nop
      30:	6d c0       	rjmp	.+218    	; 0x10c <__bad_interrupt>
      32:	00 00       	nop
      34:	6b c0       	rjmp	.+214    	; 0x10c <__bad_interrupt>
      36:	00 00       	nop
      38:	69 c0       	rjmp	.+210    	; 0x10c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	67 c0       	rjmp	.+206    	; 0x10c <__bad_interrupt>
      3e:	00 00       	nop
      40:	65 c0       	rjmp	.+202    	; 0x10c <__bad_interrupt>
      42:	00 00       	nop
      44:	63 c0       	rjmp	.+198    	; 0x10c <__bad_interrupt>
      46:	00 00       	nop
      48:	61 c0       	rjmp	.+194    	; 0x10c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5f c0       	rjmp	.+190    	; 0x10c <__bad_interrupt>
      4e:	00 00       	nop
      50:	5d c0       	rjmp	.+186    	; 0x10c <__bad_interrupt>
      52:	00 00       	nop
      54:	5b c0       	rjmp	.+182    	; 0x10c <__bad_interrupt>
      56:	00 00       	nop
      58:	59 c0       	rjmp	.+178    	; 0x10c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	57 c0       	rjmp	.+174    	; 0x10c <__bad_interrupt>
      5e:	00 00       	nop
      60:	55 c0       	rjmp	.+170    	; 0x10c <__bad_interrupt>
      62:	00 00       	nop
      64:	23 c4       	rjmp	.+2118   	; 0x8ac <__vector_25>
      66:	00 00       	nop
      68:	51 c0       	rjmp	.+162    	; 0x10c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4f c0       	rjmp	.+158    	; 0x10c <__bad_interrupt>
      6e:	00 00       	nop
      70:	4d c0       	rjmp	.+154    	; 0x10c <__bad_interrupt>
      72:	00 00       	nop
      74:	4b c0       	rjmp	.+150    	; 0x10c <__bad_interrupt>
      76:	00 00       	nop
      78:	49 c0       	rjmp	.+146    	; 0x10c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	47 c0       	rjmp	.+142    	; 0x10c <__bad_interrupt>
      7e:	00 00       	nop
      80:	45 c0       	rjmp	.+138    	; 0x10c <__bad_interrupt>
      82:	00 00       	nop
      84:	43 c0       	rjmp	.+134    	; 0x10c <__bad_interrupt>
      86:	00 00       	nop
      88:	41 c0       	rjmp	.+130    	; 0x10c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3f c0       	rjmp	.+126    	; 0x10c <__bad_interrupt>
      8e:	00 00       	nop
      90:	12 c5       	rjmp	.+2596   	; 0xab6 <__vector_36>
      92:	00 00       	nop
      94:	3b c0       	rjmp	.+118    	; 0x10c <__bad_interrupt>
      96:	00 00       	nop
      98:	39 c0       	rjmp	.+114    	; 0x10c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	37 c0       	rjmp	.+110    	; 0x10c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	35 c0       	rjmp	.+106    	; 0x10c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	33 c0       	rjmp	.+102    	; 0x10c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	31 c0       	rjmp	.+98     	; 0x10c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	2f c0       	rjmp	.+94     	; 0x10c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2d c0       	rjmp	.+90     	; 0x10c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2b c0       	rjmp	.+86     	; 0x10c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	29 c0       	rjmp	.+82     	; 0x10c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	27 c0       	rjmp	.+78     	; 0x10c <__bad_interrupt>
      be:	00 00       	nop
      c0:	25 c0       	rjmp	.+74     	; 0x10c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	23 c0       	rjmp	.+70     	; 0x10c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	21 c0       	rjmp	.+66     	; 0x10c <__bad_interrupt>
	...

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d1 e2       	ldi	r29, 0x21	; 33
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61
      d8:	00 e0       	ldi	r16, 0x00	; 0
      da:	0c bf       	out	0x3c, r16	; 60

000000dc <__do_copy_data>:
      dc:	1a e1       	ldi	r17, 0x1A	; 26
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b2 e0       	ldi	r27, 0x02	; 2
      e2:	e6 e0       	ldi	r30, 0x06	; 6
      e4:	fc e2       	ldi	r31, 0x2C	; 44
      e6:	00 e0       	ldi	r16, 0x00	; 0
      e8:	0b bf       	out	0x3b, r16	; 59
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
      ec:	07 90       	elpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	ae 32       	cpi	r26, 0x2E	; 46
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
      f6:	2c e1       	ldi	r18, 0x1C	; 28
      f8:	ae e2       	ldi	r26, 0x2E	; 46
      fa:	ba e1       	ldi	r27, 0x1A	; 26
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	aa 3b       	cpi	r26, 0xBA	; 186
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	6c d7       	rcall	.+3800   	; 0xfe0 <main>
     108:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <_exit>

0000010c <__bad_interrupt>:
     10c:	79 cf       	rjmp	.-270    	; 0x0 <__vectors>

0000010e <dxl_get_result>:
     10e:	80 91 00 02 	lds	r24, 0x0200
     112:	90 91 01 02 	lds	r25, 0x0201
     116:	08 95       	ret

00000118 <dxl_set_txpacket_id>:
     118:	80 93 30 1a 	sts	0x1A30, r24
     11c:	08 95       	ret

0000011e <dxl_set_txpacket_instruction>:
     11e:	80 93 32 1a 	sts	0x1A32, r24
     122:	08 95       	ret

00000124 <dxl_set_txpacket_parameter>:
     124:	fc 01       	movw	r30, r24
     126:	e2 5d       	subi	r30, 0xD2	; 210
     128:	f5 4e       	sbci	r31, 0xE5	; 229
     12a:	65 83       	std	Z+5, r22	; 0x05
     12c:	08 95       	ret

0000012e <dxl_set_txpacket_length>:
     12e:	80 93 31 1a 	sts	0x1A31, r24
     132:	08 95       	ret

00000134 <dxl_get_rxpacket_error>:
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	90 91 d2 1a 	lds	r25, 0x1AD2
     13c:	98 23       	and	r25, r24
     13e:	11 f0       	breq	.+4      	; 0x144 <dxl_get_rxpacket_error+0x10>
     140:	21 e0       	ldi	r18, 0x01	; 1
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	c9 01       	movw	r24, r18
     146:	08 95       	ret

00000148 <dxl_get_rxpacket_length>:
     148:	80 91 d1 1a 	lds	r24, 0x1AD1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	08 95       	ret

00000150 <dxl_get_rxpacket_parameter>:
     150:	fc 01       	movw	r30, r24
     152:	e2 53       	subi	r30, 0x32	; 50
     154:	f5 4e       	sbci	r31, 0xE5	; 229
     156:	85 81       	ldd	r24, Z+5	; 0x05
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	08 95       	ret

0000015c <dxl_makeword>:
     15c:	36 2f       	mov	r19, r22
     15e:	20 e0       	ldi	r18, 0x00	; 0
     160:	28 0f       	add	r18, r24
     162:	39 1f       	adc	r19, r25
     164:	c9 01       	movw	r24, r18
     166:	08 95       	ret

00000168 <dxl_get_lowbyte>:
     168:	28 2f       	mov	r18, r24
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	c9 01       	movw	r24, r18
     16e:	08 95       	ret

00000170 <dxl_get_highbyte>:
     170:	80 70       	andi	r24, 0x00	; 0
     172:	89 2f       	mov	r24, r25
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	08 95       	ret

00000178 <dxl_rx_packet>:
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	80 91 16 1b 	lds	r24, 0x1B16
     184:	90 91 17 1b 	lds	r25, 0x1B17
     188:	89 2b       	or	r24, r25
     18a:	09 f4       	brne	.+2      	; 0x18e <dxl_rx_packet+0x16>
     18c:	b8 c0       	rjmp	.+368    	; 0x2fe <dxl_rx_packet+0x186>
     18e:	80 91 30 1a 	lds	r24, 0x1A30
     192:	8e 3f       	cpi	r24, 0xFE	; 254
     194:	09 f4       	brne	.+2      	; 0x198 <dxl_rx_packet+0x20>
     196:	a9 c0       	rjmp	.+338    	; 0x2ea <dxl_rx_packet+0x172>
     198:	80 91 00 02 	lds	r24, 0x0200
     19c:	90 91 01 02 	lds	r25, 0x0201
     1a0:	89 2b       	or	r24, r25
     1a2:	29 f4       	brne	.+10     	; 0x1ae <dxl_rx_packet+0x36>
     1a4:	10 92 15 1b 	sts	0x1B15, r1
     1a8:	86 e0       	ldi	r24, 0x06	; 6
     1aa:	80 93 14 1b 	sts	0x1B14, r24
     1ae:	80 91 15 1b 	lds	r24, 0x1B15
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	60 91 14 1b 	lds	r22, 0x1B14
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	68 1b       	sub	r22, r24
     1bc:	79 0b       	sbc	r23, r25
     1be:	82 53       	subi	r24, 0x32	; 50
     1c0:	95 4e       	sbci	r25, 0xE5	; 229
     1c2:	49 d3       	rcall	.+1682   	; 0x856 <dxl_hal_rx>
     1c4:	90 91 15 1b 	lds	r25, 0x1B15
     1c8:	98 0f       	add	r25, r24
     1ca:	90 93 15 1b 	sts	0x1B15, r25
     1ce:	80 91 14 1b 	lds	r24, 0x1B14
     1d2:	98 17       	cp	r25, r24
     1d4:	18 f4       	brcc	.+6      	; 0x1dc <dxl_rx_packet+0x64>
     1d6:	4a d2       	rcall	.+1172   	; 0x66c <dxl_hal_timeout>
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	71 f0       	breq	.+28     	; 0x1f8 <dxl_rx_packet+0x80>
     1dc:	70 91 15 1b 	lds	r23, 0x1B15
     1e0:	47 2f       	mov	r20, r23
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	da 01       	movw	r26, r20
     1e6:	11 97       	sbiw	r26, 0x01	; 1
     1e8:	8a 01       	movw	r16, r20
     1ea:	02 50       	subi	r16, 0x02	; 2
     1ec:	10 40       	sbci	r17, 0x00	; 0
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	ed 01       	movw	r28, r26
     1f2:	c2 53       	subi	r28, 0x32	; 50
     1f4:	d5 4e       	sbci	r29, 0xE5	; 229
     1f6:	18 c0       	rjmp	.+48     	; 0x228 <dxl_rx_packet+0xb0>
     1f8:	80 91 15 1b 	lds	r24, 0x1B15
     1fc:	88 23       	and	r24, r24
     1fe:	09 f0       	breq	.+2      	; 0x202 <dxl_rx_packet+0x8a>
     200:	71 c0       	rjmp	.+226    	; 0x2e4 <dxl_rx_packet+0x16c>
     202:	86 e0       	ldi	r24, 0x06	; 6
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	73 c0       	rjmp	.+230    	; 0x2ee <dxl_rx_packet+0x176>
     208:	f9 01       	movw	r30, r18
     20a:	e2 53       	subi	r30, 0x32	; 50
     20c:	f5 4e       	sbci	r31, 0xE5	; 229
     20e:	80 81       	ld	r24, Z
     210:	8f 3f       	cpi	r24, 0xFF	; 255
     212:	19 f4       	brne	.+6      	; 0x21a <dxl_rx_packet+0xa2>
     214:	81 81       	ldd	r24, Z+1	; 0x01
     216:	8f 3f       	cpi	r24, 0xFF	; 255
     218:	61 f0       	breq	.+24     	; 0x232 <dxl_rx_packet+0xba>
     21a:	20 17       	cp	r18, r16
     21c:	31 07       	cpc	r19, r17
     21e:	19 f4       	brne	.+6      	; 0x226 <dxl_rx_packet+0xae>
     220:	88 81       	ld	r24, Y
     222:	8f 3f       	cpi	r24, 0xFF	; 255
     224:	31 f0       	breq	.+12     	; 0x232 <dxl_rx_packet+0xba>
     226:	6f 5f       	subi	r22, 0xFF	; 255
     228:	26 2f       	mov	r18, r22
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	2a 17       	cp	r18, r26
     22e:	3b 07       	cpc	r19, r27
     230:	5c f3       	brlt	.-42     	; 0x208 <dxl_rx_packet+0x90>
     232:	66 23       	and	r22, r22
     234:	a1 f0       	breq	.+40     	; 0x25e <dxl_rx_packet+0xe6>
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	42 1b       	sub	r20, r18
     23a:	53 0b       	sbc	r21, r19
     23c:	08 c0       	rjmp	.+16     	; 0x24e <dxl_rx_packet+0xd6>
     23e:	e2 53       	subi	r30, 0x32	; 50
     240:	f5 4e       	sbci	r31, 0xE5	; 229
     242:	df 01       	movw	r26, r30
     244:	a2 0f       	add	r26, r18
     246:	b3 1f       	adc	r27, r19
     248:	8c 91       	ld	r24, X
     24a:	80 83       	st	Z, r24
     24c:	9f 5f       	subi	r25, 0xFF	; 255
     24e:	e9 2f       	mov	r30, r25
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	e4 17       	cp	r30, r20
     254:	f5 07       	cpc	r31, r21
     256:	9c f3       	brlt	.-26     	; 0x23e <dxl_rx_packet+0xc6>
     258:	76 1b       	sub	r23, r22
     25a:	70 93 15 1b 	sts	0x1B15, r23
     25e:	20 91 15 1b 	lds	r18, 0x1B15
     262:	80 91 14 1b 	lds	r24, 0x1B14
     266:	28 17       	cp	r18, r24
     268:	28 f1       	brcs	.+74     	; 0x2b4 <dxl_rx_packet+0x13c>
     26a:	90 91 30 1a 	lds	r25, 0x1A30
     26e:	80 91 d0 1a 	lds	r24, 0x1AD0
     272:	98 17       	cp	r25, r24
     274:	b9 f5       	brne	.+110    	; 0x2e4 <dxl_rx_packet+0x16c>
     276:	60 91 d1 1a 	lds	r22, 0x1AD1
     27a:	6c 5f       	subi	r22, 0xFC	; 252
     27c:	60 93 14 1b 	sts	0x1B14, r22
     280:	26 17       	cp	r18, r22
     282:	88 f4       	brcc	.+34     	; 0x2a6 <dxl_rx_packet+0x12e>
     284:	82 2f       	mov	r24, r18
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	68 1b       	sub	r22, r24
     28c:	79 0b       	sbc	r23, r25
     28e:	82 53       	subi	r24, 0x32	; 50
     290:	95 4e       	sbci	r25, 0xE5	; 229
     292:	e1 d2       	rcall	.+1474   	; 0x856 <dxl_hal_rx>
     294:	90 91 15 1b 	lds	r25, 0x1B15
     298:	98 0f       	add	r25, r24
     29a:	90 93 15 1b 	sts	0x1B15, r25
     29e:	80 91 14 1b 	lds	r24, 0x1B14
     2a2:	98 17       	cp	r25, r24
     2a4:	38 f0       	brcs	.+14     	; 0x2b4 <dxl_rx_packet+0x13c>
     2a6:	80 91 d1 1a 	lds	r24, 0x1AD1
     2aa:	a8 2f       	mov	r26, r24
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0c c0       	rjmp	.+24     	; 0x2cc <dxl_rx_packet+0x154>
     2b4:	85 e0       	ldi	r24, 0x05	; 5
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	90 93 01 02 	sts	0x0201, r25
     2bc:	80 93 00 02 	sts	0x0200, r24
     2c0:	1e c0       	rjmp	.+60     	; 0x2fe <dxl_rx_packet+0x186>
     2c2:	e2 53       	subi	r30, 0x32	; 50
     2c4:	f5 4e       	sbci	r31, 0xE5	; 229
     2c6:	82 81       	ldd	r24, Z+2	; 0x02
     2c8:	98 0f       	add	r25, r24
     2ca:	2f 5f       	subi	r18, 0xFF	; 255
     2cc:	e2 2f       	mov	r30, r18
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	ae 17       	cp	r26, r30
     2d2:	bf 07       	cpc	r27, r31
     2d4:	b4 f7       	brge	.-20     	; 0x2c2 <dxl_rx_packet+0x14a>
     2d6:	a2 53       	subi	r26, 0x32	; 50
     2d8:	b5 4e       	sbci	r27, 0xE5	; 229
     2da:	90 95       	com	r25
     2dc:	13 96       	adiw	r26, 0x03	; 3
     2de:	8c 91       	ld	r24, X
     2e0:	89 17       	cp	r24, r25
     2e2:	19 f0       	breq	.+6      	; 0x2ea <dxl_rx_packet+0x172>
     2e4:	87 e0       	ldi	r24, 0x07	; 7
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <dxl_rx_packet+0x176>
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	90 93 01 02 	sts	0x0201, r25
     2f2:	80 93 00 02 	sts	0x0200, r24
     2f6:	10 92 17 1b 	sts	0x1B17, r1
     2fa:	10 92 16 1b 	sts	0x1B16, r1
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	08 95       	ret

00000308 <dxl_tx_packet>:
     308:	1f 93       	push	r17
     30a:	80 91 16 1b 	lds	r24, 0x1B16
     30e:	90 91 17 1b 	lds	r25, 0x1B17
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	09 f4       	brne	.+2      	; 0x318 <dxl_tx_packet+0x10>
     316:	5d c0       	rjmp	.+186    	; 0x3d2 <dxl_tx_packet+0xca>
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	90 93 17 1b 	sts	0x1B17, r25
     320:	80 93 16 1b 	sts	0x1B16, r24
     324:	80 91 31 1a 	lds	r24, 0x1A31
     328:	89 39       	cpi	r24, 0x99	; 153
     32a:	40 f4       	brcc	.+16     	; 0x33c <dxl_tx_packet+0x34>
     32c:	90 91 32 1a 	lds	r25, 0x1A32
     330:	89 2f       	mov	r24, r25
     332:	81 50       	subi	r24, 0x01	; 1
     334:	86 30       	cpi	r24, 0x06	; 6
     336:	28 f0       	brcs	.+10     	; 0x342 <dxl_tx_packet+0x3a>
     338:	93 38       	cpi	r25, 0x83	; 131
     33a:	19 f0       	breq	.+6      	; 0x342 <dxl_tx_packet+0x3a>
     33c:	84 e0       	ldi	r24, 0x04	; 4
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	2f c0       	rjmp	.+94     	; 0x3a0 <dxl_tx_packet+0x98>
     342:	8f ef       	ldi	r24, 0xFF	; 255
     344:	80 93 2e 1a 	sts	0x1A2E, r24
     348:	80 93 2f 1a 	sts	0x1A2F, r24
     34c:	80 91 31 1a 	lds	r24, 0x1A31
     350:	a8 2f       	mov	r26, r24
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	05 c0       	rjmp	.+10     	; 0x364 <dxl_tx_packet+0x5c>
     35a:	e2 5d       	subi	r30, 0xD2	; 210
     35c:	f5 4e       	sbci	r31, 0xE5	; 229
     35e:	82 81       	ldd	r24, Z+2	; 0x02
     360:	98 0f       	add	r25, r24
     362:	2f 5f       	subi	r18, 0xFF	; 255
     364:	e2 2f       	mov	r30, r18
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	ae 17       	cp	r26, r30
     36a:	bf 07       	cpc	r27, r31
     36c:	b4 f7       	brge	.-20     	; 0x35a <dxl_tx_packet+0x52>
     36e:	a2 5d       	subi	r26, 0xD2	; 210
     370:	b5 4e       	sbci	r27, 0xE5	; 229
     372:	90 95       	com	r25
     374:	13 96       	adiw	r26, 0x03	; 3
     376:	9c 93       	st	X, r25
     378:	80 91 00 02 	lds	r24, 0x0200
     37c:	90 91 01 02 	lds	r25, 0x0201
     380:	06 97       	sbiw	r24, 0x06	; 6
     382:	02 97       	sbiw	r24, 0x02	; 2
     384:	08 f4       	brcc	.+2      	; 0x388 <dxl_tx_packet+0x80>
     386:	38 d1       	rcall	.+624    	; 0x5f8 <dxl_hal_clear>
     388:	10 91 31 1a 	lds	r17, 0x1A31
     38c:	1c 5f       	subi	r17, 0xFC	; 252
     38e:	8e e2       	ldi	r24, 0x2E	; 46
     390:	9a e1       	ldi	r25, 0x1A	; 26
     392:	61 2f       	mov	r22, r17
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	35 d1       	rcall	.+618    	; 0x602 <dxl_hal_tx>
     398:	18 17       	cp	r17, r24
     39a:	59 f0       	breq	.+22     	; 0x3b2 <dxl_tx_packet+0xaa>
     39c:	82 e0       	ldi	r24, 0x02	; 2
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	90 93 01 02 	sts	0x0201, r25
     3a4:	80 93 00 02 	sts	0x0200, r24
     3a8:	10 92 17 1b 	sts	0x1B17, r1
     3ac:	10 92 16 1b 	sts	0x1B16, r1
     3b0:	10 c0       	rjmp	.+32     	; 0x3d2 <dxl_tx_packet+0xca>
     3b2:	80 91 32 1a 	lds	r24, 0x1A32
     3b6:	82 30       	cpi	r24, 0x02	; 2
     3b8:	29 f4       	brne	.+10     	; 0x3c4 <dxl_tx_packet+0xbc>
     3ba:	80 91 34 1a 	lds	r24, 0x1A34
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	06 96       	adiw	r24, 0x06	; 6
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <dxl_tx_packet+0xc0>
     3c4:	86 e0       	ldi	r24, 0x06	; 6
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	40 d1       	rcall	.+640    	; 0x64a <dxl_hal_set_timeout>
     3ca:	10 92 01 02 	sts	0x0201, r1
     3ce:	10 92 00 02 	sts	0x0200, r1
     3d2:	1f 91       	pop	r17
     3d4:	08 95       	ret

000003d6 <dxl_txrx_packet>:
     3d6:	98 df       	rcall	.-208    	; 0x308 <dxl_tx_packet>
     3d8:	80 91 00 02 	lds	r24, 0x0200
     3dc:	90 91 01 02 	lds	r25, 0x0201
     3e0:	89 2b       	or	r24, r25
     3e2:	39 f4       	brne	.+14     	; 0x3f2 <dxl_txrx_packet+0x1c>
     3e4:	c9 de       	rcall	.-622    	; 0x178 <dxl_rx_packet>
     3e6:	80 91 00 02 	lds	r24, 0x0200
     3ea:	90 91 01 02 	lds	r25, 0x0201
     3ee:	05 97       	sbiw	r24, 0x05	; 5
     3f0:	c9 f3       	breq	.-14     	; 0x3e4 <dxl_txrx_packet+0xe>
     3f2:	08 95       	ret

000003f4 <dxl_write_word>:
     3f4:	28 2f       	mov	r18, r24
     3f6:	80 91 16 1b 	lds	r24, 0x1B16
     3fa:	90 91 17 1b 	lds	r25, 0x1B17
     3fe:	89 2b       	or	r24, r25
     400:	91 f4       	brne	.+36     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
     402:	20 93 30 1a 	sts	0x1A30, r18
     406:	83 e0       	ldi	r24, 0x03	; 3
     408:	80 93 32 1a 	sts	0x1A32, r24
     40c:	60 93 33 1a 	sts	0x1A33, r22
     410:	ca 01       	movw	r24, r20
     412:	40 93 34 1a 	sts	0x1A34, r20
     416:	80 70       	andi	r24, 0x00	; 0
     418:	90 93 35 1a 	sts	0x1A35, r25
     41c:	85 e0       	ldi	r24, 0x05	; 5
     41e:	80 93 31 1a 	sts	0x1A31, r24
     422:	d9 cf       	rjmp	.-78     	; 0x3d6 <dxl_txrx_packet>
     424:	08 95       	ret
     426:	ff cf       	rjmp	.-2      	; 0x426 <__FUSE_REGION_LENGTH__+0x26>

00000428 <dxl_read_word>:
     428:	28 2f       	mov	r18, r24
     42a:	80 91 16 1b 	lds	r24, 0x1B16
     42e:	90 91 17 1b 	lds	r25, 0x1B17
     432:	89 2b       	or	r24, r25
     434:	b1 f4       	brne	.+44     	; 0x462 <dxl_read_word+0x3a>
     436:	20 93 30 1a 	sts	0x1A30, r18
     43a:	82 e0       	ldi	r24, 0x02	; 2
     43c:	80 93 32 1a 	sts	0x1A32, r24
     440:	60 93 33 1a 	sts	0x1A33, r22
     444:	80 93 34 1a 	sts	0x1A34, r24
     448:	84 e0       	ldi	r24, 0x04	; 4
     44a:	80 93 31 1a 	sts	0x1A31, r24
     44e:	c3 df       	rcall	.-122    	; 0x3d6 <dxl_txrx_packet>
     450:	30 91 d4 1a 	lds	r19, 0x1AD4
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	80 91 d3 1a 	lds	r24, 0x1AD3
     45a:	28 0f       	add	r18, r24
     45c:	31 1d       	adc	r19, r1
     45e:	c9 01       	movw	r24, r18
     460:	08 95       	ret
     462:	ff cf       	rjmp	.-2      	; 0x462 <dxl_read_word+0x3a>

00000464 <dxl_write_byte>:
     464:	28 2f       	mov	r18, r24
     466:	80 91 16 1b 	lds	r24, 0x1B16
     46a:	90 91 17 1b 	lds	r25, 0x1B17
     46e:	89 2b       	or	r24, r25
     470:	71 f4       	brne	.+28     	; 0x48e <dxl_write_byte+0x2a>
     472:	20 93 30 1a 	sts	0x1A30, r18
     476:	83 e0       	ldi	r24, 0x03	; 3
     478:	80 93 32 1a 	sts	0x1A32, r24
     47c:	60 93 33 1a 	sts	0x1A33, r22
     480:	40 93 34 1a 	sts	0x1A34, r20
     484:	84 e0       	ldi	r24, 0x04	; 4
     486:	80 93 31 1a 	sts	0x1A31, r24
     48a:	a5 cf       	rjmp	.-182    	; 0x3d6 <dxl_txrx_packet>
     48c:	08 95       	ret
     48e:	ff cf       	rjmp	.-2      	; 0x48e <dxl_write_byte+0x2a>

00000490 <dxl_read_byte>:
     490:	28 2f       	mov	r18, r24
     492:	80 91 16 1b 	lds	r24, 0x1B16
     496:	90 91 17 1b 	lds	r25, 0x1B17
     49a:	89 2b       	or	r24, r25
     49c:	91 f4       	brne	.+36     	; 0x4c2 <dxl_read_byte+0x32>
     49e:	20 93 30 1a 	sts	0x1A30, r18
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	80 93 32 1a 	sts	0x1A32, r24
     4a8:	60 93 33 1a 	sts	0x1A33, r22
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	80 93 34 1a 	sts	0x1A34, r24
     4b2:	84 e0       	ldi	r24, 0x04	; 4
     4b4:	80 93 31 1a 	sts	0x1A31, r24
     4b8:	8e df       	rcall	.-228    	; 0x3d6 <dxl_txrx_packet>
     4ba:	80 91 d3 1a 	lds	r24, 0x1AD3
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	08 95       	ret
     4c2:	ff cf       	rjmp	.-2      	; 0x4c2 <dxl_read_byte+0x32>

000004c4 <dxl_ping>:
     4c4:	28 2f       	mov	r18, r24
     4c6:	80 91 16 1b 	lds	r24, 0x1B16
     4ca:	90 91 17 1b 	lds	r25, 0x1B17
     4ce:	89 2b       	or	r24, r25
     4d0:	51 f4       	brne	.+20     	; 0x4e6 <dxl_ping+0x22>
     4d2:	20 93 30 1a 	sts	0x1A30, r18
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	80 93 32 1a 	sts	0x1A32, r24
     4dc:	82 e0       	ldi	r24, 0x02	; 2
     4de:	80 93 31 1a 	sts	0x1A31, r24
     4e2:	79 cf       	rjmp	.-270    	; 0x3d6 <dxl_txrx_packet>
     4e4:	08 95       	ret
     4e6:	ff cf       	rjmp	.-2      	; 0x4e6 <dxl_ping+0x22>

000004e8 <dxl_terminate>:
     4e8:	86 c0       	rjmp	.+268    	; 0x5f6 <dxl_hal_close>
     4ea:	08 95       	ret

000004ec <dxl_initialize>:
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	8c 01       	movw	r16, r24
     4f2:	6f 5f       	subi	r22, 0xFF	; 255
     4f4:	7f 4f       	sbci	r23, 0xFF	; 255
     4f6:	88 27       	eor	r24, r24
     4f8:	77 fd       	sbrc	r23, 7
     4fa:	80 95       	com	r24
     4fc:	98 2f       	mov	r25, r24
     4fe:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__floatsisf>
     502:	9b 01       	movw	r18, r22
     504:	ac 01       	movw	r20, r24
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	74 e2       	ldi	r23, 0x24	; 36
     50a:	84 ef       	ldi	r24, 0xF4	; 244
     50c:	99 e4       	ldi	r25, 0x49	; 73
     50e:	0e 94 45 12 	call	0x248a	; 0x248a <__divsf3>
     512:	ab 01       	movw	r20, r22
     514:	bc 01       	movw	r22, r24
     516:	c8 01       	movw	r24, r16
     518:	15 d0       	rcall	.+42     	; 0x544 <dxl_hal_open>
     51a:	89 2b       	or	r24, r25
     51c:	19 f4       	brne	.+6      	; 0x524 <dxl_initialize+0x38>
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	0c c0       	rjmp	.+24     	; 0x53c <dxl_initialize+0x50>
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	90 93 01 02 	sts	0x0201, r25
     52c:	80 93 00 02 	sts	0x0200, r24
     530:	10 92 17 1b 	sts	0x1B17, r1
     534:	10 92 16 1b 	sts	0x1B16, r1
     538:	21 e0       	ldi	r18, 0x01	; 1
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	c9 01       	movw	r24, r18
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	08 95       	ret

00000544 <dxl_hal_open>:
     544:	ef 92       	push	r14
     546:	ff 92       	push	r15
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	7a 01       	movw	r14, r20
     54e:	8b 01       	movw	r16, r22
     550:	82 e4       	ldi	r24, 0x42	; 66
     552:	80 93 c0 00 	sts	0x00C0, r24
     556:	88 e9       	ldi	r24, 0x98	; 152
     558:	80 93 c1 00 	sts	0x00C1, r24
     55c:	86 e0       	ldi	r24, 0x06	; 6
     55e:	80 93 c2 00 	sts	0x00C2, r24
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	74 e2       	ldi	r23, 0x24	; 36
     566:	84 ef       	ldi	r24, 0xF4	; 244
     568:	99 e4       	ldi	r25, 0x49	; 73
     56a:	a8 01       	movw	r20, r16
     56c:	97 01       	movw	r18, r14
     56e:	0e 94 45 12 	call	0x248a	; 0x248a <__divsf3>
     572:	0e 94 b2 12 	call	0x2564	; 0x2564 <__fixunssfsi>
     576:	61 50       	subi	r22, 0x01	; 1
     578:	70 40       	sbci	r23, 0x00	; 0
     57a:	70 93 c5 00 	sts	0x00C5, r23
     57e:	60 93 c4 00 	sts	0x00C4, r22
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	74 e2       	ldi	r23, 0x24	; 36
     586:	84 e7       	ldi	r24, 0x74	; 116
     588:	99 e4       	ldi	r25, 0x49	; 73
     58a:	a8 01       	movw	r20, r16
     58c:	97 01       	movw	r18, r14
     58e:	0e 94 45 12 	call	0x248a	; 0x248a <__divsf3>
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	40 e4       	ldi	r20, 0x40	; 64
     598:	51 e4       	ldi	r21, 0x41	; 65
     59a:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
     59e:	60 93 a8 1c 	sts	0x1CA8, r22
     5a2:	70 93 a9 1c 	sts	0x1CA9, r23
     5a6:	80 93 aa 1c 	sts	0x1CAA, r24
     5aa:	90 93 ab 1c 	sts	0x1CAB, r25
     5ae:	20 91 a8 1c 	lds	r18, 0x1CA8
     5b2:	30 91 a9 1c 	lds	r19, 0x1CA9
     5b6:	40 91 aa 1c 	lds	r20, 0x1CAA
     5ba:	50 91 ab 1c 	lds	r21, 0x1CAB
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	8a e7       	ldi	r24, 0x7A	; 122
     5c4:	93 e4       	ldi	r25, 0x43	; 67
     5c6:	0e 94 45 12 	call	0x248a	; 0x248a <__divsf3>
     5ca:	0e 94 b2 12 	call	0x2564	; 0x2564 <__fixunssfsi>
     5ce:	70 93 a7 1c 	sts	0x1CA7, r23
     5d2:	60 93 a6 1c 	sts	0x1CA6, r22
     5d6:	72 98       	cbi	0x0e, 2	; 14
     5d8:	73 9a       	sbi	0x0e, 3	; 14
     5da:	8f ef       	ldi	r24, 0xFF	; 255
     5dc:	80 93 c6 00 	sts	0x00C6, r24
     5e0:	10 92 18 1c 	sts	0x1C18, r1
     5e4:	10 92 19 1c 	sts	0x1C19, r1
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	ff 90       	pop	r15
     5f2:	ef 90       	pop	r14
     5f4:	08 95       	ret

000005f6 <dxl_hal_close>:
     5f6:	08 95       	ret

000005f8 <dxl_hal_clear>:
     5f8:	80 91 19 1c 	lds	r24, 0x1C19
     5fc:	80 93 18 1c 	sts	0x1C18, r24
     600:	08 95       	ret

00000602 <dxl_hal_tx>:
     602:	ac 01       	movw	r20, r24
     604:	f8 94       	cli
     606:	73 98       	cbi	0x0e, 3	; 14
     608:	72 9a       	sbi	0x0e, 2	; 14
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	11 c0       	rjmp	.+34     	; 0x632 <dxl_hal_tx+0x30>
     610:	80 91 c0 00 	lds	r24, 0x00C0
     614:	85 ff       	sbrs	r24, 5
     616:	fc cf       	rjmp	.-8      	; 0x610 <dxl_hal_tx+0xe>
     618:	80 91 c0 00 	lds	r24, 0x00C0
     61c:	80 64       	ori	r24, 0x40	; 64
     61e:	80 93 c0 00 	sts	0x00C0, r24
     622:	fa 01       	movw	r30, r20
     624:	e2 0f       	add	r30, r18
     626:	f3 1f       	adc	r31, r19
     628:	80 81       	ld	r24, Z
     62a:	80 93 c6 00 	sts	0x00C6, r24
     62e:	2f 5f       	subi	r18, 0xFF	; 255
     630:	3f 4f       	sbci	r19, 0xFF	; 255
     632:	26 17       	cp	r18, r22
     634:	37 07       	cpc	r19, r23
     636:	64 f3       	brlt	.-40     	; 0x610 <dxl_hal_tx+0xe>
     638:	80 91 c0 00 	lds	r24, 0x00C0
     63c:	86 ff       	sbrs	r24, 6
     63e:	fc cf       	rjmp	.-8      	; 0x638 <dxl_hal_tx+0x36>
     640:	72 98       	cbi	0x0e, 2	; 14
     642:	73 9a       	sbi	0x0e, 3	; 14
     644:	78 94       	sei
     646:	c9 01       	movw	r24, r18
     648:	08 95       	ret

0000064a <dxl_hal_set_timeout>:
     64a:	10 92 af 1c 	sts	0x1CAF, r1
     64e:	10 92 ae 1c 	sts	0x1CAE, r1
     652:	20 91 a6 1c 	lds	r18, 0x1CA6
     656:	30 91 a7 1c 	lds	r19, 0x1CA7
     65a:	26 5f       	subi	r18, 0xF6	; 246
     65c:	3f 4f       	sbci	r19, 0xFF	; 255
     65e:	28 0f       	add	r18, r24
     660:	39 1f       	adc	r19, r25
     662:	30 93 ad 1c 	sts	0x1CAD, r19
     666:	20 93 ac 1c 	sts	0x1CAC, r18
     66a:	08 95       	ret

0000066c <dxl_hal_timeout>:
     66c:	af 92       	push	r10
     66e:	bf 92       	push	r11
     670:	cf 92       	push	r12
     672:	df 92       	push	r13
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	80 91 ae 1c 	lds	r24, 0x1CAE
     680:	90 91 af 1c 	lds	r25, 0x1CAF
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	90 93 af 1c 	sts	0x1CAF, r25
     68a:	80 93 ae 1c 	sts	0x1CAE, r24
     68e:	20 91 ae 1c 	lds	r18, 0x1CAE
     692:	30 91 af 1c 	lds	r19, 0x1CAF
     696:	80 91 ac 1c 	lds	r24, 0x1CAC
     69a:	90 91 ad 1c 	lds	r25, 0x1CAD
     69e:	82 17       	cp	r24, r18
     6a0:	93 07       	cpc	r25, r19
     6a2:	18 f4       	brcc	.+6      	; 0x6aa <dxl_hal_timeout+0x3e>
     6a4:	21 e0       	ldi	r18, 0x01	; 1
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	74 c0       	rjmp	.+232    	; 0x792 <dxl_hal_timeout+0x126>
     6aa:	a0 90 a8 1c 	lds	r10, 0x1CA8
     6ae:	b0 90 a9 1c 	lds	r11, 0x1CA9
     6b2:	c0 90 aa 1c 	lds	r12, 0x1CAA
     6b6:	d0 90 ab 1c 	lds	r13, 0x1CAB
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     6ba:	c6 01       	movw	r24, r12
     6bc:	b5 01       	movw	r22, r10
     6be:	2b ea       	ldi	r18, 0xAB	; 171
     6c0:	3a ea       	ldi	r19, 0xAA	; 170
     6c2:	4a ea       	ldi	r20, 0xAA	; 170
     6c4:	50 e4       	ldi	r21, 0x40	; 64
     6c6:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
     6ca:	7b 01       	movw	r14, r22
     6cc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	40 e8       	ldi	r20, 0x80	; 128
     6d4:	5f e3       	ldi	r21, 0x3F	; 63
     6d6:	0e 94 41 12 	call	0x2482	; 0x2482 <__cmpsf2>
     6da:	88 23       	and	r24, r24
     6dc:	14 f4       	brge	.+4      	; 0x6e2 <dxl_hal_timeout+0x76>
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	54 c0       	rjmp	.+168    	; 0x78a <dxl_hal_timeout+0x11e>
		__ticks = 1;
	else if (__tmp > 255)
     6e2:	c8 01       	movw	r24, r16
     6e4:	b7 01       	movw	r22, r14
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	4f e7       	ldi	r20, 0x7F	; 127
     6ec:	53 e4       	ldi	r21, 0x43	; 67
     6ee:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
     6f2:	18 16       	cp	r1, r24
     6f4:	0c f0       	brlt	.+2      	; 0x6f8 <dxl_hal_timeout+0x8c>
     6f6:	45 c0       	rjmp	.+138    	; 0x782 <dxl_hal_timeout+0x116>
	{
		_delay_ms(__us / 1000.0);
     6f8:	c6 01       	movw	r24, r12
     6fa:	b5 01       	movw	r22, r10
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	4a e7       	ldi	r20, 0x7A	; 122
     702:	54 e4       	ldi	r21, 0x44	; 68
     704:	0e 94 45 12 	call	0x248a	; 0x248a <__divsf3>
     708:	5b 01       	movw	r10, r22
     70a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	4a e7       	ldi	r20, 0x7A	; 122
     712:	55 e4       	ldi	r21, 0x45	; 69
     714:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
     718:	7b 01       	movw	r14, r22
     71a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	40 e8       	ldi	r20, 0x80	; 128
     722:	5f e3       	ldi	r21, 0x3F	; 63
     724:	0e 94 41 12 	call	0x2482	; 0x2482 <__cmpsf2>
     728:	88 23       	and	r24, r24
     72a:	1c f4       	brge	.+6      	; 0x732 <dxl_hal_timeout+0xc6>
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	24 c0       	rjmp	.+72     	; 0x77a <dxl_hal_timeout+0x10e>
		__ticks = 1;
	else if (__tmp > 65535)
     732:	c8 01       	movw	r24, r16
     734:	b7 01       	movw	r22, r14
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	3f ef       	ldi	r19, 0xFF	; 255
     73a:	4f e7       	ldi	r20, 0x7F	; 127
     73c:	57 e4       	ldi	r21, 0x47	; 71
     73e:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
     742:	18 16       	cp	r1, r24
     744:	b4 f4       	brge	.+44     	; 0x772 <dxl_hal_timeout+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     746:	c6 01       	movw	r24, r12
     748:	b5 01       	movw	r22, r10
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	40 e2       	ldi	r20, 0x20	; 32
     750:	51 e4       	ldi	r21, 0x41	; 65
     752:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
     756:	0e 94 b2 12 	call	0x2564	; 0x2564 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     75a:	80 e9       	ldi	r24, 0x90	; 144
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	05 c0       	rjmp	.+10     	; 0x76a <dxl_hal_timeout+0xfe>
     760:	fc 01       	movw	r30, r24
     762:	31 97       	sbiw	r30, 0x01	; 1
     764:	f1 f7       	brne	.-4      	; 0x762 <dxl_hal_timeout+0xf6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     766:	61 50       	subi	r22, 0x01	; 1
     768:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     76a:	61 15       	cp	r22, r1
     76c:	71 05       	cpc	r23, r1
     76e:	c1 f7       	brne	.-16     	; 0x760 <dxl_hal_timeout+0xf4>
     770:	0e c0       	rjmp	.+28     	; 0x78e <dxl_hal_timeout+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     772:	c8 01       	movw	r24, r16
     774:	b7 01       	movw	r22, r14
     776:	0e 94 b2 12 	call	0x2564	; 0x2564 <__fixunssfsi>
     77a:	cb 01       	movw	r24, r22
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <dxl_hal_timeout+0x110>
     780:	06 c0       	rjmp	.+12     	; 0x78e <dxl_hal_timeout+0x122>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     782:	c8 01       	movw	r24, r16
     784:	b7 01       	movw	r22, r14
     786:	0e 94 b2 12 	call	0x2564	; 0x2564 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     78a:	6a 95       	dec	r22
     78c:	f1 f7       	brne	.-4      	; 0x78a <dxl_hal_timeout+0x11e>
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	c9 01       	movw	r24, r18
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	ff 90       	pop	r15
     79a:	ef 90       	pop	r14
     79c:	df 90       	pop	r13
     79e:	cf 90       	pop	r12
     7a0:	bf 90       	pop	r11
     7a2:	af 90       	pop	r10
     7a4:	08 95       	ret

000007a6 <dxl_hal_get_qstate>:
     7a6:	90 91 18 1c 	lds	r25, 0x1C18
     7aa:	80 91 19 1c 	lds	r24, 0x1C19
     7ae:	98 17       	cp	r25, r24
     7b0:	19 f4       	brne	.+6      	; 0x7b8 <dxl_hal_get_qstate+0x12>
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	17 c0       	rjmp	.+46     	; 0x7e6 <dxl_hal_get_qstate+0x40>
     7b8:	90 91 18 1c 	lds	r25, 0x1C18
     7bc:	80 91 19 1c 	lds	r24, 0x1C19
     7c0:	98 17       	cp	r25, r24
     7c2:	38 f4       	brcc	.+14     	; 0x7d2 <dxl_hal_get_qstate+0x2c>
     7c4:	80 91 19 1c 	lds	r24, 0x1C19
     7c8:	90 91 18 1c 	lds	r25, 0x1C18
     7cc:	28 2f       	mov	r18, r24
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	08 c0       	rjmp	.+16     	; 0x7e2 <dxl_hal_get_qstate+0x3c>
     7d2:	80 91 19 1c 	lds	r24, 0x1C19
     7d6:	90 91 18 1c 	lds	r25, 0x1C18
     7da:	28 2f       	mov	r18, r24
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	20 50       	subi	r18, 0x00	; 0
     7e0:	3f 4f       	sbci	r19, 0xFF	; 255
     7e2:	29 1b       	sub	r18, r25
     7e4:	31 09       	sbc	r19, r1
     7e6:	c9 01       	movw	r24, r18
     7e8:	08 95       	ret

000007ea <dxl_hal_put_queue>:
     7ea:	1f 93       	push	r17
     7ec:	18 2f       	mov	r17, r24
     7ee:	db df       	rcall	.-74     	; 0x7a6 <dxl_hal_get_qstate>
     7f0:	8f 3f       	cpi	r24, 0xFF	; 255
     7f2:	91 05       	cpc	r25, r1
     7f4:	91 f0       	breq	.+36     	; 0x81a <dxl_hal_put_queue+0x30>
     7f6:	e0 91 19 1c 	lds	r30, 0x1C19
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	e8 5e       	subi	r30, 0xE8	; 232
     7fe:	f4 4e       	sbci	r31, 0xE4	; 228
     800:	10 83       	st	Z, r17
     802:	80 91 19 1c 	lds	r24, 0x1C19
     806:	8f 3f       	cpi	r24, 0xFF	; 255
     808:	19 f4       	brne	.+6      	; 0x810 <dxl_hal_put_queue+0x26>
     80a:	10 92 19 1c 	sts	0x1C19, r1
     80e:	05 c0       	rjmp	.+10     	; 0x81a <dxl_hal_put_queue+0x30>
     810:	80 91 19 1c 	lds	r24, 0x1C19
     814:	8f 5f       	subi	r24, 0xFF	; 255
     816:	80 93 19 1c 	sts	0x1C19, r24
     81a:	1f 91       	pop	r17
     81c:	08 95       	ret

0000081e <dxl_hal_get_queue>:
     81e:	90 91 18 1c 	lds	r25, 0x1C18
     822:	80 91 19 1c 	lds	r24, 0x1C19
     826:	98 17       	cp	r25, r24
     828:	11 f4       	brne	.+4      	; 0x82e <dxl_hal_get_queue+0x10>
     82a:	ef ef       	ldi	r30, 0xFF	; 255
     82c:	12 c0       	rjmp	.+36     	; 0x852 <dxl_hal_get_queue+0x34>
     82e:	e0 91 18 1c 	lds	r30, 0x1C18
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	e8 5e       	subi	r30, 0xE8	; 232
     836:	f4 4e       	sbci	r31, 0xE4	; 228
     838:	e0 81       	ld	r30, Z
     83a:	80 91 18 1c 	lds	r24, 0x1C18
     83e:	8f 3f       	cpi	r24, 0xFF	; 255
     840:	19 f4       	brne	.+6      	; 0x848 <dxl_hal_get_queue+0x2a>
     842:	10 92 18 1c 	sts	0x1C18, r1
     846:	05 c0       	rjmp	.+10     	; 0x852 <dxl_hal_get_queue+0x34>
     848:	80 91 18 1c 	lds	r24, 0x1C18
     84c:	8f 5f       	subi	r24, 0xFF	; 255
     84e:	80 93 18 1c 	sts	0x1C18, r24
     852:	8e 2f       	mov	r24, r30
     854:	08 95       	ret

00000856 <dxl_hal_rx>:
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	7c 01       	movw	r14, r24
     864:	eb 01       	movw	r28, r22
     866:	90 91 18 1c 	lds	r25, 0x1C18
     86a:	80 91 19 1c 	lds	r24, 0x1C19
     86e:	98 17       	cp	r25, r24
     870:	19 f4       	brne	.+6      	; 0x878 <dxl_hal_rx+0x22>
     872:	00 e0       	ldi	r16, 0x00	; 0
     874:	10 e0       	ldi	r17, 0x00	; 0
     876:	12 c0       	rjmp	.+36     	; 0x89c <dxl_hal_rx+0x46>
     878:	96 df       	rcall	.-212    	; 0x7a6 <dxl_hal_get_qstate>
     87a:	8c 01       	movw	r16, r24
     87c:	c8 17       	cp	r28, r24
     87e:	d9 07       	cpc	r29, r25
     880:	0c f4       	brge	.+2      	; 0x884 <dxl_hal_rx+0x2e>
     882:	8e 01       	movw	r16, r28
     884:	c0 e0       	ldi	r28, 0x00	; 0
     886:	d0 e0       	ldi	r29, 0x00	; 0
     888:	06 c0       	rjmp	.+12     	; 0x896 <dxl_hal_rx+0x40>
     88a:	c9 df       	rcall	.-110    	; 0x81e <dxl_hal_get_queue>
     88c:	f7 01       	movw	r30, r14
     88e:	ec 0f       	add	r30, r28
     890:	fd 1f       	adc	r31, r29
     892:	80 83       	st	Z, r24
     894:	21 96       	adiw	r28, 0x01	; 1
     896:	c0 17       	cp	r28, r16
     898:	d1 07       	cpc	r29, r17
     89a:	bc f3       	brlt	.-18     	; 0x88a <dxl_hal_rx+0x34>
     89c:	c8 01       	movw	r24, r16
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	08 95       	ret

000008ac <__vector_25>:
     8ac:	1f 92       	push	r1
     8ae:	0f 92       	push	r0
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	0f 92       	push	r0
     8b4:	0b b6       	in	r0, 0x3b	; 59
     8b6:	0f 92       	push	r0
     8b8:	11 24       	eor	r1, r1
     8ba:	2f 93       	push	r18
     8bc:	3f 93       	push	r19
     8be:	4f 93       	push	r20
     8c0:	5f 93       	push	r21
     8c2:	6f 93       	push	r22
     8c4:	7f 93       	push	r23
     8c6:	8f 93       	push	r24
     8c8:	9f 93       	push	r25
     8ca:	af 93       	push	r26
     8cc:	bf 93       	push	r27
     8ce:	ef 93       	push	r30
     8d0:	ff 93       	push	r31
     8d2:	80 91 c6 00 	lds	r24, 0x00C6
     8d6:	89 df       	rcall	.-238    	; 0x7ea <dxl_hal_put_queue>
     8d8:	ff 91       	pop	r31
     8da:	ef 91       	pop	r30
     8dc:	bf 91       	pop	r27
     8de:	af 91       	pop	r26
     8e0:	9f 91       	pop	r25
     8e2:	8f 91       	pop	r24
     8e4:	7f 91       	pop	r23
     8e6:	6f 91       	pop	r22
     8e8:	5f 91       	pop	r21
     8ea:	4f 91       	pop	r20
     8ec:	3f 91       	pop	r19
     8ee:	2f 91       	pop	r18
     8f0:	0f 90       	pop	r0
     8f2:	0b be       	out	0x3b, r0	; 59
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <serial_write>:
     8fe:	ac 01       	movw	r20, r24
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	0c c0       	rjmp	.+24     	; 0x91e <serial_write+0x20>
     906:	80 91 c8 00 	lds	r24, 0x00C8
     90a:	85 ff       	sbrs	r24, 5
     90c:	fc cf       	rjmp	.-8      	; 0x906 <serial_write+0x8>
     90e:	fa 01       	movw	r30, r20
     910:	e2 0f       	add	r30, r18
     912:	f3 1f       	adc	r31, r19
     914:	80 81       	ld	r24, Z
     916:	80 93 ce 00 	sts	0x00CE, r24
     91a:	2f 5f       	subi	r18, 0xFF	; 255
     91c:	3f 4f       	sbci	r19, 0xFF	; 255
     91e:	26 17       	cp	r18, r22
     920:	37 07       	cpc	r19, r23
     922:	8c f3       	brlt	.-30     	; 0x906 <serial_write+0x8>
     924:	08 95       	ret

00000926 <serial_read>:
     926:	dc 01       	movw	r26, r24
     928:	90 91 9a 1c 	lds	r25, 0x1C9A
     92c:	80 91 9b 1c 	lds	r24, 0x1C9B
     930:	98 17       	cp	r25, r24
     932:	11 f4       	brne	.+4      	; 0x938 <serial_read+0x12>
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 95       	ret
     938:	90 91 9a 1c 	lds	r25, 0x1C9A
     93c:	80 91 9b 1c 	lds	r24, 0x1C9B
     940:	98 17       	cp	r25, r24
     942:	19 f4       	brne	.+6      	; 0x94a <serial_read+0x24>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	17 c0       	rjmp	.+46     	; 0x978 <serial_read+0x52>
     94a:	90 91 9a 1c 	lds	r25, 0x1C9A
     94e:	80 91 9b 1c 	lds	r24, 0x1C9B
     952:	98 17       	cp	r25, r24
     954:	38 f4       	brcc	.+14     	; 0x964 <serial_read+0x3e>
     956:	80 91 9b 1c 	lds	r24, 0x1C9B
     95a:	90 91 9a 1c 	lds	r25, 0x1C9A
     95e:	28 2f       	mov	r18, r24
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	08 c0       	rjmp	.+16     	; 0x974 <serial_read+0x4e>
     964:	80 91 9b 1c 	lds	r24, 0x1C9B
     968:	90 91 9a 1c 	lds	r25, 0x1C9A
     96c:	28 2f       	mov	r18, r24
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	20 58       	subi	r18, 0x80	; 128
     972:	3f 4f       	sbci	r19, 0xFF	; 255
     974:	29 1b       	sub	r18, r25
     976:	31 09       	sbc	r19, r1
     978:	a9 01       	movw	r20, r18
     97a:	62 17       	cp	r22, r18
     97c:	73 07       	cpc	r23, r19
     97e:	0c f4       	brge	.+2      	; 0x982 <serial_read+0x5c>
     980:	ab 01       	movw	r20, r22
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	20 c0       	rjmp	.+64     	; 0x9c8 <serial_read+0xa2>
     988:	90 91 9a 1c 	lds	r25, 0x1C9A
     98c:	80 91 9b 1c 	lds	r24, 0x1C9B
     990:	98 17       	cp	r25, r24
     992:	11 f4       	brne	.+4      	; 0x998 <serial_read+0x72>
     994:	9f ef       	ldi	r25, 0xFF	; 255
     996:	12 c0       	rjmp	.+36     	; 0x9bc <serial_read+0x96>
     998:	e0 91 9a 1c 	lds	r30, 0x1C9A
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	e6 5e       	subi	r30, 0xE6	; 230
     9a0:	f3 4e       	sbci	r31, 0xE3	; 227
     9a2:	90 81       	ld	r25, Z
     9a4:	80 91 9a 1c 	lds	r24, 0x1C9A
     9a8:	8f 37       	cpi	r24, 0x7F	; 127
     9aa:	19 f4       	brne	.+6      	; 0x9b2 <serial_read+0x8c>
     9ac:	10 92 9a 1c 	sts	0x1C9A, r1
     9b0:	05 c0       	rjmp	.+10     	; 0x9bc <serial_read+0x96>
     9b2:	80 91 9a 1c 	lds	r24, 0x1C9A
     9b6:	8f 5f       	subi	r24, 0xFF	; 255
     9b8:	80 93 9a 1c 	sts	0x1C9A, r24
     9bc:	fd 01       	movw	r30, r26
     9be:	e2 0f       	add	r30, r18
     9c0:	f3 1f       	adc	r31, r19
     9c2:	90 83       	st	Z, r25
     9c4:	2f 5f       	subi	r18, 0xFF	; 255
     9c6:	3f 4f       	sbci	r19, 0xFF	; 255
     9c8:	24 17       	cp	r18, r20
     9ca:	35 07       	cpc	r19, r21
     9cc:	ec f2       	brlt	.-70     	; 0x988 <serial_read+0x62>
     9ce:	84 2f       	mov	r24, r20
     9d0:	08 95       	ret

000009d2 <serial_get_qstate>:
     9d2:	90 91 9a 1c 	lds	r25, 0x1C9A
     9d6:	80 91 9b 1c 	lds	r24, 0x1C9B
     9da:	98 17       	cp	r25, r24
     9dc:	19 f4       	brne	.+6      	; 0x9e4 <serial_get_qstate+0x12>
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	17 c0       	rjmp	.+46     	; 0xa12 <serial_get_qstate+0x40>
     9e4:	90 91 9a 1c 	lds	r25, 0x1C9A
     9e8:	80 91 9b 1c 	lds	r24, 0x1C9B
     9ec:	98 17       	cp	r25, r24
     9ee:	38 f4       	brcc	.+14     	; 0x9fe <serial_get_qstate+0x2c>
     9f0:	80 91 9b 1c 	lds	r24, 0x1C9B
     9f4:	90 91 9a 1c 	lds	r25, 0x1C9A
     9f8:	28 2f       	mov	r18, r24
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	08 c0       	rjmp	.+16     	; 0xa0e <serial_get_qstate+0x3c>
     9fe:	80 91 9b 1c 	lds	r24, 0x1C9B
     a02:	90 91 9a 1c 	lds	r25, 0x1C9A
     a06:	28 2f       	mov	r18, r24
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	20 58       	subi	r18, 0x80	; 128
     a0c:	3f 4f       	sbci	r19, 0xFF	; 255
     a0e:	29 1b       	sub	r18, r25
     a10:	31 09       	sbc	r19, r1
     a12:	c9 01       	movw	r24, r18
     a14:	08 95       	ret

00000a16 <serial_put_queue>:
     a16:	48 2f       	mov	r20, r24
     a18:	90 91 9a 1c 	lds	r25, 0x1C9A
     a1c:	80 91 9b 1c 	lds	r24, 0x1C9B
     a20:	98 17       	cp	r25, r24
     a22:	d1 f0       	breq	.+52     	; 0xa58 <serial_put_queue+0x42>
     a24:	90 91 9a 1c 	lds	r25, 0x1C9A
     a28:	80 91 9b 1c 	lds	r24, 0x1C9B
     a2c:	98 17       	cp	r25, r24
     a2e:	38 f4       	brcc	.+14     	; 0xa3e <serial_put_queue+0x28>
     a30:	80 91 9b 1c 	lds	r24, 0x1C9B
     a34:	90 91 9a 1c 	lds	r25, 0x1C9A
     a38:	28 2f       	mov	r18, r24
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	08 c0       	rjmp	.+16     	; 0xa4e <serial_put_queue+0x38>
     a3e:	80 91 9b 1c 	lds	r24, 0x1C9B
     a42:	90 91 9a 1c 	lds	r25, 0x1C9A
     a46:	28 2f       	mov	r18, r24
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	20 58       	subi	r18, 0x80	; 128
     a4c:	3f 4f       	sbci	r19, 0xFF	; 255
     a4e:	29 1b       	sub	r18, r25
     a50:	31 09       	sbc	r19, r1
     a52:	2f 37       	cpi	r18, 0x7F	; 127
     a54:	31 05       	cpc	r19, r1
     a56:	91 f0       	breq	.+36     	; 0xa7c <serial_put_queue+0x66>
     a58:	e0 91 9b 1c 	lds	r30, 0x1C9B
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	e6 5e       	subi	r30, 0xE6	; 230
     a60:	f3 4e       	sbci	r31, 0xE3	; 227
     a62:	40 83       	st	Z, r20
     a64:	80 91 9b 1c 	lds	r24, 0x1C9B
     a68:	8f 37       	cpi	r24, 0x7F	; 127
     a6a:	19 f4       	brne	.+6      	; 0xa72 <serial_put_queue+0x5c>
     a6c:	10 92 9b 1c 	sts	0x1C9B, r1
     a70:	08 95       	ret
     a72:	80 91 9b 1c 	lds	r24, 0x1C9B
     a76:	8f 5f       	subi	r24, 0xFF	; 255
     a78:	80 93 9b 1c 	sts	0x1C9B, r24
     a7c:	08 95       	ret

00000a7e <serial_get_queue>:
     a7e:	90 91 9a 1c 	lds	r25, 0x1C9A
     a82:	80 91 9b 1c 	lds	r24, 0x1C9B
     a86:	98 17       	cp	r25, r24
     a88:	11 f4       	brne	.+4      	; 0xa8e <serial_get_queue+0x10>
     a8a:	ef ef       	ldi	r30, 0xFF	; 255
     a8c:	12 c0       	rjmp	.+36     	; 0xab2 <serial_get_queue+0x34>
     a8e:	e0 91 9a 1c 	lds	r30, 0x1C9A
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	e6 5e       	subi	r30, 0xE6	; 230
     a96:	f3 4e       	sbci	r31, 0xE3	; 227
     a98:	e0 81       	ld	r30, Z
     a9a:	80 91 9a 1c 	lds	r24, 0x1C9A
     a9e:	8f 37       	cpi	r24, 0x7F	; 127
     aa0:	19 f4       	brne	.+6      	; 0xaa8 <serial_get_queue+0x2a>
     aa2:	10 92 9a 1c 	sts	0x1C9A, r1
     aa6:	05 c0       	rjmp	.+10     	; 0xab2 <serial_get_queue+0x34>
     aa8:	80 91 9a 1c 	lds	r24, 0x1C9A
     aac:	8f 5f       	subi	r24, 0xFF	; 255
     aae:	80 93 9a 1c 	sts	0x1C9A, r24
     ab2:	8e 2f       	mov	r24, r30
     ab4:	08 95       	ret

00000ab6 <__vector_36>:
     ab6:	1f 92       	push	r1
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	0f 92       	push	r0
     abe:	0b b6       	in	r0, 0x3b	; 59
     ac0:	0f 92       	push	r0
     ac2:	11 24       	eor	r1, r1
     ac4:	2f 93       	push	r18
     ac6:	3f 93       	push	r19
     ac8:	4f 93       	push	r20
     aca:	5f 93       	push	r21
     acc:	6f 93       	push	r22
     ace:	7f 93       	push	r23
     ad0:	8f 93       	push	r24
     ad2:	9f 93       	push	r25
     ad4:	af 93       	push	r26
     ad6:	bf 93       	push	r27
     ad8:	ef 93       	push	r30
     ada:	ff 93       	push	r31
     adc:	80 91 ce 00 	lds	r24, 0x00CE
     ae0:	9a df       	rcall	.-204    	; 0xa16 <serial_put_queue>
     ae2:	ff 91       	pop	r31
     ae4:	ef 91       	pop	r30
     ae6:	bf 91       	pop	r27
     ae8:	af 91       	pop	r26
     aea:	9f 91       	pop	r25
     aec:	8f 91       	pop	r24
     aee:	7f 91       	pop	r23
     af0:	6f 91       	pop	r22
     af2:	5f 91       	pop	r21
     af4:	4f 91       	pop	r20
     af6:	3f 91       	pop	r19
     af8:	2f 91       	pop	r18
     afa:	0f 90       	pop	r0
     afc:	0b be       	out	0x3b, r0	; 59
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	0f 90       	pop	r0
     b04:	1f 90       	pop	r1
     b06:	18 95       	reti

00000b08 <std_putchar>:
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	0f 92       	push	r0
     b0e:	0f 92       	push	r0
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	98 2f       	mov	r25, r24
     b16:	8a 30       	cpi	r24, 0x0A	; 10
     b18:	99 f4       	brne	.+38     	; 0xb40 <std_putchar+0x38>
     b1a:	8d e0       	ldi	r24, 0x0D	; 13
     b1c:	89 83       	std	Y+1, r24	; 0x01
     b1e:	9a 83       	std	Y+2, r25	; 0x02
     b20:	fe 01       	movw	r30, r28
     b22:	31 96       	adiw	r30, 0x01	; 1
     b24:	9e 01       	movw	r18, r28
     b26:	2d 5f       	subi	r18, 0xFD	; 253
     b28:	3f 4f       	sbci	r19, 0xFF	; 255
     b2a:	80 91 c8 00 	lds	r24, 0x00C8
     b2e:	85 ff       	sbrs	r24, 5
     b30:	fc cf       	rjmp	.-8      	; 0xb2a <std_putchar+0x22>
     b32:	81 91       	ld	r24, Z+
     b34:	80 93 ce 00 	sts	0x00CE, r24
     b38:	e2 17       	cp	r30, r18
     b3a:	f3 07       	cpc	r31, r19
     b3c:	b1 f7       	brne	.-20     	; 0xb2a <std_putchar+0x22>
     b3e:	06 c0       	rjmp	.+12     	; 0xb4c <std_putchar+0x44>
     b40:	80 91 c8 00 	lds	r24, 0x00C8
     b44:	85 ff       	sbrs	r24, 5
     b46:	fc cf       	rjmp	.-8      	; 0xb40 <std_putchar+0x38>
     b48:	90 93 ce 00 	sts	0x00CE, r25
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	cf 91       	pop	r28
     b56:	df 91       	pop	r29
     b58:	08 95       	ret

00000b5a <std_getchar>:
     b5a:	90 91 9a 1c 	lds	r25, 0x1C9A
     b5e:	80 91 9b 1c 	lds	r24, 0x1C9B
     b62:	98 17       	cp	r25, r24
     b64:	d1 f3       	breq	.-12     	; 0xb5a <std_getchar>
     b66:	90 91 9a 1c 	lds	r25, 0x1C9A
     b6a:	80 91 9b 1c 	lds	r24, 0x1C9B
     b6e:	98 17       	cp	r25, r24
     b70:	38 f4       	brcc	.+14     	; 0xb80 <std_getchar+0x26>
     b72:	80 91 9b 1c 	lds	r24, 0x1C9B
     b76:	90 91 9a 1c 	lds	r25, 0x1C9A
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	08 c0       	rjmp	.+16     	; 0xb90 <std_getchar+0x36>
     b80:	80 91 9b 1c 	lds	r24, 0x1C9B
     b84:	90 91 9a 1c 	lds	r25, 0x1C9A
     b88:	28 2f       	mov	r18, r24
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	20 58       	subi	r18, 0x80	; 128
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	29 1b       	sub	r18, r25
     b92:	31 09       	sbc	r19, r1
     b94:	23 2b       	or	r18, r19
     b96:	09 f3       	breq	.-62     	; 0xb5a <std_getchar>
     b98:	90 91 9a 1c 	lds	r25, 0x1C9A
     b9c:	80 91 9b 1c 	lds	r24, 0x1C9B
     ba0:	98 17       	cp	r25, r24
     ba2:	11 f4       	brne	.+4      	; 0xba8 <std_getchar+0x4e>
     ba4:	ef ef       	ldi	r30, 0xFF	; 255
     ba6:	15 c0       	rjmp	.+42     	; 0xbd2 <std_getchar+0x78>
     ba8:	e0 91 9a 1c 	lds	r30, 0x1C9A
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	e6 5e       	subi	r30, 0xE6	; 230
     bb0:	f3 4e       	sbci	r31, 0xE3	; 227
     bb2:	e0 81       	ld	r30, Z
     bb4:	80 91 9a 1c 	lds	r24, 0x1C9A
     bb8:	8f 37       	cpi	r24, 0x7F	; 127
     bba:	19 f4       	brne	.+6      	; 0xbc2 <std_getchar+0x68>
     bbc:	10 92 9a 1c 	sts	0x1C9A, r1
     bc0:	05 c0       	rjmp	.+10     	; 0xbcc <std_getchar+0x72>
     bc2:	80 91 9a 1c 	lds	r24, 0x1C9A
     bc6:	8f 5f       	subi	r24, 0xFF	; 255
     bc8:	80 93 9a 1c 	sts	0x1C9A, r24
     bcc:	ed 30       	cpi	r30, 0x0D	; 13
     bce:	09 f4       	brne	.+2      	; 0xbd2 <std_getchar+0x78>
     bd0:	ea e0       	ldi	r30, 0x0A	; 10
     bd2:	8e 2f       	mov	r24, r30
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	08 95       	ret

00000bd8 <serial_initialize>:
     bd8:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__floatsisf>
     bdc:	9b 01       	movw	r18, r22
     bde:	ac 01       	movw	r20, r24
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	74 e2       	ldi	r23, 0x24	; 36
     be4:	84 ef       	ldi	r24, 0xF4	; 244
     be6:	99 e4       	ldi	r25, 0x49	; 73
     be8:	0e 94 45 12 	call	0x248a	; 0x248a <__divsf3>
     bec:	0e 94 b2 12 	call	0x2564	; 0x2564 <__fixunssfsi>
     bf0:	61 50       	subi	r22, 0x01	; 1
     bf2:	70 40       	sbci	r23, 0x00	; 0
     bf4:	22 e4       	ldi	r18, 0x42	; 66
     bf6:	20 93 c8 00 	sts	0x00C8, r18
     bfa:	28 e9       	ldi	r18, 0x98	; 152
     bfc:	20 93 c9 00 	sts	0x00C9, r18
     c00:	26 e0       	ldi	r18, 0x06	; 6
     c02:	20 93 ca 00 	sts	0x00CA, r18
     c06:	2f ef       	ldi	r18, 0xFF	; 255
     c08:	20 93 ce 00 	sts	0x00CE, r18
     c0c:	10 92 9a 1c 	sts	0x1C9A, r1
     c10:	10 92 9b 1c 	sts	0x1C9B, r1
     c14:	27 2f       	mov	r18, r23
     c16:	33 27       	eor	r19, r19
     c18:	27 fd       	sbrc	r18, 7
     c1a:	3a 95       	dec	r19
     c1c:	20 93 cd 00 	sts	0x00CD, r18
     c20:	60 93 cc 00 	sts	0x00CC, r22
     c24:	72 98       	cbi	0x0e, 2	; 14
     c26:	73 9a       	sbi	0x0e, 3	; 14
     c28:	84 e8       	ldi	r24, 0x84	; 132
     c2a:	95 e0       	ldi	r25, 0x05	; 5
     c2c:	6d ea       	ldi	r22, 0xAD	; 173
     c2e:	75 e0       	ldi	r23, 0x05	; 5
     c30:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <fdevopen>
     c34:	90 93 9d 1c 	sts	0x1C9D, r25
     c38:	80 93 9c 1c 	sts	0x1C9C, r24
     c3c:	08 95       	ret

00000c3e <parseAll>:
	return 1;
}

//Begin general function declarations

int parseAll(char dataIn){
     c3e:	cf 92       	push	r12
     c40:	df 92       	push	r13
     c42:	ef 92       	push	r14
     c44:	ff 92       	push	r15
	int parseError = 0;
	
	switch (parseState){
     c46:	20 91 12 02 	lds	r18, 0x0212
     c4a:	30 91 13 02 	lds	r19, 0x0213
     c4e:	22 30       	cpi	r18, 0x02	; 2
     c50:	31 05       	cpc	r19, r1
     c52:	09 f4       	brne	.+2      	; 0xc56 <parseAll+0x18>
     c54:	8d c0       	rjmp	.+282    	; 0xd70 <parseAll+0x132>
     c56:	24 f4       	brge	.+8      	; 0xc60 <parseAll+0x22>
     c58:	21 30       	cpi	r18, 0x01	; 1
     c5a:	31 05       	cpc	r19, r1
     c5c:	51 f0       	breq	.+20     	; 0xc72 <parseAll+0x34>
     c5e:	b9 c1       	rjmp	.+882    	; 0xfd2 <parseAll+0x394>
     c60:	23 30       	cpi	r18, 0x03	; 3
     c62:	31 05       	cpc	r19, r1
     c64:	09 f4       	brne	.+2      	; 0xc68 <parseAll+0x2a>
     c66:	e8 c0       	rjmp	.+464    	; 0xe38 <parseAll+0x1fa>
     c68:	24 30       	cpi	r18, 0x04	; 4
     c6a:	31 05       	cpc	r19, r1
     c6c:	09 f4       	brne	.+2      	; 0xc70 <parseAll+0x32>
     c6e:	48 c1       	rjmp	.+656    	; 0xf00 <parseAll+0x2c2>
     c70:	b0 c1       	rjmp	.+864    	; 0xfd2 <parseAll+0x394>
		
		case WATCH_BEGIN:
			if(dataIn == '$'){//Position Command
     c72:	84 32       	cpi	r24, 0x24	; 36
     c74:	59 f5       	brne	.+86     	; 0xccc <parseAll+0x8e>
				parseState = WATCH_X;
     c76:	82 e0       	ldi	r24, 0x02	; 2
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	90 93 13 02 	sts	0x0213, r25
     c7e:	80 93 12 02 	sts	0x0212, r24
				xBuffer = 0;
     c82:	10 92 a2 1c 	sts	0x1CA2, r1
     c86:	10 92 a3 1c 	sts	0x1CA3, r1
     c8a:	10 92 a4 1c 	sts	0x1CA4, r1
     c8e:	10 92 a5 1c 	sts	0x1CA5, r1
				yBuffer = 0;
     c92:	10 92 9e 1c 	sts	0x1C9E, r1
     c96:	10 92 9f 1c 	sts	0x1C9F, r1
     c9a:	10 92 a0 1c 	sts	0x1CA0, r1
     c9e:	10 92 a1 1c 	sts	0x1CA1, r1
				zBuffer = 0;
     ca2:	10 92 0a 02 	sts	0x020A, r1
     ca6:	10 92 0b 02 	sts	0x020B, r1
     caa:	10 92 0c 02 	sts	0x020C, r1
     cae:	10 92 0d 02 	sts	0x020D, r1
				signState = POSITIVE;	
     cb2:	87 e0       	ldi	r24, 0x07	; 7
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	90 93 09 02 	sts	0x0209, r25
     cba:	80 93 08 02 	sts	0x0208, r24
				positionDataType = POSITION;
     cbe:	8b e0       	ldi	r24, 0x0B	; 11
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	90 93 0f 02 	sts	0x020F, r25
     cc6:	80 93 0e 02 	sts	0x020E, r24
     cca:	83 c1       	rjmp	.+774    	; 0xfd2 <parseAll+0x394>
				;//printf("\nReading Packet...\n");
			}
			else if(dataIn == '%'){//Angle Command
     ccc:	85 32       	cpi	r24, 0x25	; 37
     cce:	59 f5       	brne	.+86     	; 0xd26 <parseAll+0xe8>
				parseState = WATCH_X;
     cd0:	82 e0       	ldi	r24, 0x02	; 2
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	90 93 13 02 	sts	0x0213, r25
     cd8:	80 93 12 02 	sts	0x0212, r24
				xBuffer = 0;
     cdc:	10 92 a2 1c 	sts	0x1CA2, r1
     ce0:	10 92 a3 1c 	sts	0x1CA3, r1
     ce4:	10 92 a4 1c 	sts	0x1CA4, r1
     ce8:	10 92 a5 1c 	sts	0x1CA5, r1
				yBuffer = 0;
     cec:	10 92 9e 1c 	sts	0x1C9E, r1
     cf0:	10 92 9f 1c 	sts	0x1C9F, r1
     cf4:	10 92 a0 1c 	sts	0x1CA0, r1
     cf8:	10 92 a1 1c 	sts	0x1CA1, r1
				zBuffer = 0;
     cfc:	10 92 0a 02 	sts	0x020A, r1
     d00:	10 92 0b 02 	sts	0x020B, r1
     d04:	10 92 0c 02 	sts	0x020C, r1
     d08:	10 92 0d 02 	sts	0x020D, r1
				signState = POSITIVE;
     d0c:	87 e0       	ldi	r24, 0x07	; 7
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	90 93 09 02 	sts	0x0209, r25
     d14:	80 93 08 02 	sts	0x0208, r24
				positionDataType = ANGLE;
     d18:	8c e0       	ldi	r24, 0x0C	; 12
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	90 93 0f 02 	sts	0x020F, r25
     d20:	80 93 0e 02 	sts	0x020E, r24
     d24:	56 c1       	rjmp	.+684    	; 0xfd2 <parseAll+0x394>
				;//printf("\nReading Packet...\n");
			}
			else if((dataIn == 'y') && (dataState == CONFIRM_DATA)){
     d26:	89 37       	cpi	r24, 0x79	; 121
     d28:	69 f4       	brne	.+26     	; 0xd44 <parseAll+0x106>
     d2a:	80 91 10 02 	lds	r24, 0x0210
     d2e:	90 91 11 02 	lds	r25, 0x0211
     d32:	09 97       	sbiw	r24, 0x09	; 9
     d34:	b1 f4       	brne	.+44     	; 0xd62 <parseAll+0x124>
				dataState = SEND_DATA;
     d36:	8a e0       	ldi	r24, 0x0A	; 10
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	90 93 11 02 	sts	0x0211, r25
     d3e:	80 93 10 02 	sts	0x0210, r24
     d42:	47 c1       	rjmp	.+654    	; 0xfd2 <parseAll+0x394>
			}
			else if((dataIn == 'n') && (dataState == NEW_DATA)){
     d44:	8e 36       	cpi	r24, 0x6E	; 110
     d46:	69 f4       	brne	.+26     	; 0xd62 <parseAll+0x124>
     d48:	80 91 10 02 	lds	r24, 0x0210
     d4c:	90 91 11 02 	lds	r25, 0x0211
     d50:	06 97       	sbiw	r24, 0x06	; 6
     d52:	39 f4       	brne	.+14     	; 0xd62 <parseAll+0x124>
				;//printf("\nAbort Send!!\n\n");
				dataState = OLD_DATA;
     d54:	85 e0       	ldi	r24, 0x05	; 5
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	90 93 11 02 	sts	0x0211, r25
     d5c:	80 93 10 02 	sts	0x0210, r24
     d60:	38 c1       	rjmp	.+624    	; 0xfd2 <parseAll+0x394>
			}
			else{
				dataState = OLD_DATA;
     d62:	85 e0       	ldi	r24, 0x05	; 5
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	90 93 11 02 	sts	0x0211, r25
     d6a:	80 93 10 02 	sts	0x0210, r24
     d6e:	31 c1       	rjmp	.+610    	; 0xfd2 <parseAll+0x394>
				//printf("waiting on input\n");
			}
			break;
			
		case WATCH_X:
			if((dataIn == '0') | (dataIn == '1') | (dataIn == '2') | (dataIn == '3') | (dataIn == '4') | (dataIn == '5') | (dataIn == '6') | (dataIn == '7') | (dataIn == '8') | (dataIn == '9')){
     d70:	90 ed       	ldi	r25, 0xD0	; 208
     d72:	98 0f       	add	r25, r24
     d74:	9a 30       	cpi	r25, 0x0A	; 10
     d76:	50 f5       	brcc	.+84     	; 0xdcc <parseAll+0x18e>
				xBuffer = (dataIn - '0') + xBuffer*10;
     d78:	68 2f       	mov	r22, r24
     d7a:	88 0f       	add	r24, r24
     d7c:	77 0b       	sbc	r23, r23
     d7e:	60 53       	subi	r22, 0x30	; 48
     d80:	71 09       	sbc	r23, r1
     d82:	07 2e       	mov	r0, r23
     d84:	00 0c       	add	r0, r0
     d86:	88 0b       	sbc	r24, r24
     d88:	99 0b       	sbc	r25, r25
     d8a:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__floatsisf>
     d8e:	6b 01       	movw	r12, r22
     d90:	7c 01       	movw	r14, r24
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e2       	ldi	r20, 0x20	; 32
     d98:	51 e4       	ldi	r21, 0x41	; 65
     d9a:	60 91 a2 1c 	lds	r22, 0x1CA2
     d9e:	70 91 a3 1c 	lds	r23, 0x1CA3
     da2:	80 91 a4 1c 	lds	r24, 0x1CA4
     da6:	90 91 a5 1c 	lds	r25, 0x1CA5
     daa:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
     db2:	c7 01       	movw	r24, r14
     db4:	b6 01       	movw	r22, r12
     db6:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__addsf3>
     dba:	60 93 a2 1c 	sts	0x1CA2, r22
     dbe:	70 93 a3 1c 	sts	0x1CA3, r23
     dc2:	80 93 a4 1c 	sts	0x1CA4, r24
     dc6:	90 93 a5 1c 	sts	0x1CA5, r25
     dca:	03 c1       	rjmp	.+518    	; 0xfd2 <parseAll+0x394>
			}
			else if(dataIn == ','){
     dcc:	8c 32       	cpi	r24, 0x2C	; 44
     dce:	21 f5       	brne	.+72     	; 0xe18 <parseAll+0x1da>
				parseState = WATCH_Y;
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	90 93 13 02 	sts	0x0213, r25
     dd8:	80 93 12 02 	sts	0x0212, r24
				if(signState == NEGATIVE)
     ddc:	80 91 08 02 	lds	r24, 0x0208
     de0:	90 91 09 02 	lds	r25, 0x0209
     de4:	08 97       	sbiw	r24, 0x08	; 8
     de6:	89 f4       	brne	.+34     	; 0xe0a <parseAll+0x1cc>
					xBuffer = -(xBuffer);
     de8:	80 91 a2 1c 	lds	r24, 0x1CA2
     dec:	90 91 a3 1c 	lds	r25, 0x1CA3
     df0:	a0 91 a4 1c 	lds	r26, 0x1CA4
     df4:	b0 91 a5 1c 	lds	r27, 0x1CA5
     df8:	b0 58       	subi	r27, 0x80	; 128
     dfa:	80 93 a2 1c 	sts	0x1CA2, r24
     dfe:	90 93 a3 1c 	sts	0x1CA3, r25
     e02:	a0 93 a4 1c 	sts	0x1CA4, r26
     e06:	b0 93 a5 1c 	sts	0x1CA5, r27
				signState = POSITIVE;
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	90 93 09 02 	sts	0x0209, r25
     e12:	80 93 08 02 	sts	0x0208, r24
     e16:	dd c0       	rjmp	.+442    	; 0xfd2 <parseAll+0x394>
				;//printf("Read X: %f thou\n", xBuffer);
			}
			else if(dataIn == '-'){
     e18:	8d 32       	cpi	r24, 0x2D	; 45
     e1a:	39 f4       	brne	.+14     	; 0xe2a <parseAll+0x1ec>
				signState = NEGATIVE;
     e1c:	88 e0       	ldi	r24, 0x08	; 8
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	90 93 09 02 	sts	0x0209, r25
     e24:	80 93 08 02 	sts	0x0208, r24
     e28:	d4 c0       	rjmp	.+424    	; 0xfd2 <parseAll+0x394>
			}
			else{
				;//printf("\nBad Data!\n");
				parseState = WATCH_BEGIN;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	90 93 13 02 	sts	0x0213, r25
     e32:	80 93 12 02 	sts	0x0212, r24
     e36:	cd c0       	rjmp	.+410    	; 0xfd2 <parseAll+0x394>
			}
			break;
			
		case WATCH_Y:
			if((dataIn == '0') | (dataIn == '1') | (dataIn == '2') | (dataIn == '3') | (dataIn == '4') | (dataIn == '5') | (dataIn == '6') | (dataIn == '7') | (dataIn == '8') | (dataIn == '9')){
     e38:	90 ed       	ldi	r25, 0xD0	; 208
     e3a:	98 0f       	add	r25, r24
     e3c:	9a 30       	cpi	r25, 0x0A	; 10
     e3e:	50 f5       	brcc	.+84     	; 0xe94 <parseAll+0x256>
				yBuffer = (dataIn - '0') + yBuffer*10;
     e40:	68 2f       	mov	r22, r24
     e42:	88 0f       	add	r24, r24
     e44:	77 0b       	sbc	r23, r23
     e46:	60 53       	subi	r22, 0x30	; 48
     e48:	71 09       	sbc	r23, r1
     e4a:	07 2e       	mov	r0, r23
     e4c:	00 0c       	add	r0, r0
     e4e:	88 0b       	sbc	r24, r24
     e50:	99 0b       	sbc	r25, r25
     e52:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__floatsisf>
     e56:	6b 01       	movw	r12, r22
     e58:	7c 01       	movw	r14, r24
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e2       	ldi	r20, 0x20	; 32
     e60:	51 e4       	ldi	r21, 0x41	; 65
     e62:	60 91 9e 1c 	lds	r22, 0x1C9E
     e66:	70 91 9f 1c 	lds	r23, 0x1C9F
     e6a:	80 91 a0 1c 	lds	r24, 0x1CA0
     e6e:	90 91 a1 1c 	lds	r25, 0x1CA1
     e72:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
     e76:	9b 01       	movw	r18, r22
     e78:	ac 01       	movw	r20, r24
     e7a:	c7 01       	movw	r24, r14
     e7c:	b6 01       	movw	r22, r12
     e7e:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__addsf3>
     e82:	60 93 9e 1c 	sts	0x1C9E, r22
     e86:	70 93 9f 1c 	sts	0x1C9F, r23
     e8a:	80 93 a0 1c 	sts	0x1CA0, r24
     e8e:	90 93 a1 1c 	sts	0x1CA1, r25
     e92:	9f c0       	rjmp	.+318    	; 0xfd2 <parseAll+0x394>
			}
			else if(dataIn == ','){
     e94:	8c 32       	cpi	r24, 0x2C	; 44
     e96:	21 f5       	brne	.+72     	; 0xee0 <parseAll+0x2a2>
				parseState = WATCH_Z;
     e98:	84 e0       	ldi	r24, 0x04	; 4
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	90 93 13 02 	sts	0x0213, r25
     ea0:	80 93 12 02 	sts	0x0212, r24
				if(signState == NEGATIVE)
     ea4:	80 91 08 02 	lds	r24, 0x0208
     ea8:	90 91 09 02 	lds	r25, 0x0209
     eac:	08 97       	sbiw	r24, 0x08	; 8
     eae:	89 f4       	brne	.+34     	; 0xed2 <parseAll+0x294>
				yBuffer = -(yBuffer);
     eb0:	80 91 9e 1c 	lds	r24, 0x1C9E
     eb4:	90 91 9f 1c 	lds	r25, 0x1C9F
     eb8:	a0 91 a0 1c 	lds	r26, 0x1CA0
     ebc:	b0 91 a1 1c 	lds	r27, 0x1CA1
     ec0:	b0 58       	subi	r27, 0x80	; 128
     ec2:	80 93 9e 1c 	sts	0x1C9E, r24
     ec6:	90 93 9f 1c 	sts	0x1C9F, r25
     eca:	a0 93 a0 1c 	sts	0x1CA0, r26
     ece:	b0 93 a1 1c 	sts	0x1CA1, r27
				signState = POSITIVE;
     ed2:	87 e0       	ldi	r24, 0x07	; 7
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	90 93 09 02 	sts	0x0209, r25
     eda:	80 93 08 02 	sts	0x0208, r24
     ede:	79 c0       	rjmp	.+242    	; 0xfd2 <parseAll+0x394>
				;//printf("Read Y: %f thou\n", yBuffer);
			}
			else if(dataIn == '-'){
     ee0:	8d 32       	cpi	r24, 0x2D	; 45
     ee2:	39 f4       	brne	.+14     	; 0xef2 <parseAll+0x2b4>
				signState = NEGATIVE;
     ee4:	88 e0       	ldi	r24, 0x08	; 8
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	90 93 09 02 	sts	0x0209, r25
     eec:	80 93 08 02 	sts	0x0208, r24
     ef0:	70 c0       	rjmp	.+224    	; 0xfd2 <parseAll+0x394>
			}
			else{
				;//printf("\nBad Data!\n");
				parseState = WATCH_BEGIN;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	90 93 13 02 	sts	0x0213, r25
     efa:	80 93 12 02 	sts	0x0212, r24
     efe:	69 c0       	rjmp	.+210    	; 0xfd2 <parseAll+0x394>
			}
			break;
			
		case WATCH_Z:
			if((dataIn == '0') | (dataIn == '1') | (dataIn == '2') | (dataIn == '3') | (dataIn == '4') | (dataIn == '5') | (dataIn == '6') | (dataIn == '7') | (dataIn == '8') | (dataIn == '9')){
     f00:	90 ed       	ldi	r25, 0xD0	; 208
     f02:	98 0f       	add	r25, r24
     f04:	9a 30       	cpi	r25, 0x0A	; 10
     f06:	50 f5       	brcc	.+84     	; 0xf5c <parseAll+0x31e>
				zBuffer = (dataIn - '0') + zBuffer*10;
     f08:	68 2f       	mov	r22, r24
     f0a:	88 0f       	add	r24, r24
     f0c:	77 0b       	sbc	r23, r23
     f0e:	60 53       	subi	r22, 0x30	; 48
     f10:	71 09       	sbc	r23, r1
     f12:	07 2e       	mov	r0, r23
     f14:	00 0c       	add	r0, r0
     f16:	88 0b       	sbc	r24, r24
     f18:	99 0b       	sbc	r25, r25
     f1a:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__floatsisf>
     f1e:	6b 01       	movw	r12, r22
     f20:	7c 01       	movw	r14, r24
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e2       	ldi	r20, 0x20	; 32
     f28:	51 e4       	ldi	r21, 0x41	; 65
     f2a:	60 91 0a 02 	lds	r22, 0x020A
     f2e:	70 91 0b 02 	lds	r23, 0x020B
     f32:	80 91 0c 02 	lds	r24, 0x020C
     f36:	90 91 0d 02 	lds	r25, 0x020D
     f3a:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
     f3e:	9b 01       	movw	r18, r22
     f40:	ac 01       	movw	r20, r24
     f42:	c7 01       	movw	r24, r14
     f44:	b6 01       	movw	r22, r12
     f46:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__addsf3>
     f4a:	60 93 0a 02 	sts	0x020A, r22
     f4e:	70 93 0b 02 	sts	0x020B, r23
     f52:	80 93 0c 02 	sts	0x020C, r24
     f56:	90 93 0d 02 	sts	0x020D, r25
     f5a:	3b c0       	rjmp	.+118    	; 0xfd2 <parseAll+0x394>
			}
			else if(dataIn == '*'){ //Packet complete!
     f5c:	8a 32       	cpi	r24, 0x2A	; 42
     f5e:	51 f5       	brne	.+84     	; 0xfb4 <parseAll+0x376>
				if(signState == NEGATIVE)
     f60:	80 91 08 02 	lds	r24, 0x0208
     f64:	90 91 09 02 	lds	r25, 0x0209
     f68:	08 97       	sbiw	r24, 0x08	; 8
     f6a:	89 f4       	brne	.+34     	; 0xf8e <parseAll+0x350>
				zBuffer = -(zBuffer);
     f6c:	80 91 0a 02 	lds	r24, 0x020A
     f70:	90 91 0b 02 	lds	r25, 0x020B
     f74:	a0 91 0c 02 	lds	r26, 0x020C
     f78:	b0 91 0d 02 	lds	r27, 0x020D
     f7c:	b0 58       	subi	r27, 0x80	; 128
     f7e:	80 93 0a 02 	sts	0x020A, r24
     f82:	90 93 0b 02 	sts	0x020B, r25
     f86:	a0 93 0c 02 	sts	0x020C, r26
     f8a:	b0 93 0d 02 	sts	0x020D, r27
				signState = POSITIVE; //reset
     f8e:	87 e0       	ldi	r24, 0x07	; 7
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	90 93 09 02 	sts	0x0209, r25
     f96:	80 93 08 02 	sts	0x0208, r24
				;//printf("Read Z: %f thou\n", zBuffer);
				dataState = NEW_DATA; 
     f9a:	86 e0       	ldi	r24, 0x06	; 6
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	90 93 11 02 	sts	0x0211, r25
     fa2:	80 93 10 02 	sts	0x0210, r24
				parseState = WATCH_BEGIN;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	90 93 13 02 	sts	0x0213, r25
     fae:	80 93 12 02 	sts	0x0212, r24
     fb2:	0f c0       	rjmp	.+30     	; 0xfd2 <parseAll+0x394>
				
				
				
			}
			else if(dataIn == '-'){
     fb4:	8d 32       	cpi	r24, 0x2D	; 45
     fb6:	39 f4       	brne	.+14     	; 0xfc6 <parseAll+0x388>
				signState = NEGATIVE;
     fb8:	88 e0       	ldi	r24, 0x08	; 8
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	90 93 09 02 	sts	0x0209, r25
     fc0:	80 93 08 02 	sts	0x0208, r24
     fc4:	06 c0       	rjmp	.+12     	; 0xfd2 <parseAll+0x394>
			}
			else{
				;//printf("\nbad Data\n");
				parseState = WATCH_BEGIN;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	90 93 13 02 	sts	0x0213, r25
     fce:	80 93 12 02 	sts	0x0212, r24
			}
		
	}
	
	return parseError;
}
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	ff 90       	pop	r15
     fd8:	ef 90       	pop	r14
     fda:	df 90       	pop	r13
     fdc:	cf 90       	pop	r12
     fde:	08 95       	ret

00000fe0 <main>:
void PrintCommStatus(int CommStatus);
void PrintErrorCode(void);


int main(void)
{
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	68 97       	sbiw	r28, 0x18	; 24
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
	serial_initialize(57600); // USART Initialize
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	71 ee       	ldi	r23, 0xE1	; 225
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	ed dd       	rcall	.-1062   	; 0xbd8 <serial_initialize>
	dxl_initialize( 0, DEFAULT_BAUDNUM ); // Not using device index. i.e., 0 indexing on device number
     ffe:	61 e0       	ldi	r22, 0x01	; 1
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	72 da       	rcall	.-2844   	; 0x4ec <dxl_initialize>
	dxl_initialize( 1, DEFAULT_BAUDNUM ); // Init #2
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	6d da       	rcall	.-2854   	; 0x4ec <dxl_initialize>
	dxl_initialize( 2, DEFAULT_BAUDNUM ); // Init #3
    1012:	61 e0       	ldi	r22, 0x01	; 1
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	82 e0       	ldi	r24, 0x02	; 2
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	68 da       	rcall	.-2864   	; 0x4ec <dxl_initialize>
	sei(); // set enable interrupt
    101c:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    101e:	2f ef       	ldi	r18, 0xFF	; 255
    1020:	83 ed       	ldi	r24, 0xD3	; 211
    1022:	90 e3       	ldi	r25, 0x30	; 48
    1024:	21 50       	subi	r18, 0x01	; 1
    1026:	80 40       	sbci	r24, 0x00	; 0
    1028:	90 40       	sbci	r25, 0x00	; 0
    102a:	e1 f7       	brne	.-8      	; 0x1024 <main+0x44>
    102c:	00 c0       	rjmp	.+0      	; 0x102e <main+0x4e>
    102e:	00 00       	nop
	int bMoving, wPresentPos;
	int CommStatus;
	
	struct point p;
	double angles[3];
	angles[0] = 180;
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a4 e3       	ldi	r26, 0x34	; 52
    1036:	b3 e4       	ldi	r27, 0x43	; 67
    1038:	8d 87       	std	Y+13, r24	; 0x0d
    103a:	9e 87       	std	Y+14, r25	; 0x0e
    103c:	af 87       	std	Y+15, r26	; 0x0f
    103e:	b8 8b       	std	Y+16, r27	; 0x10
	angles[1] = 180;
    1040:	89 8b       	std	Y+17, r24	; 0x11
    1042:	9a 8b       	std	Y+18, r25	; 0x12
    1044:	ab 8b       	std	Y+19, r26	; 0x13
    1046:	bc 8b       	std	Y+20, r27	; 0x14
	angles[2] = 180;
    1048:	8d 8b       	std	Y+21, r24	; 0x15
    104a:	9e 8b       	std	Y+22, r25	; 0x16
    104c:	af 8b       	std	Y+23, r26	; 0x17
    104e:	b8 8f       	std	Y+24, r27	; 0x18
	
	dxl_write_word( 1, P_GOAL_POSITION_L, (int) angles[0]*11.3778 ); //4096./360=11.3778  <--- Ticks per degree
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	58 e0       	ldi	r21, 0x08	; 8
    1054:	6e e1       	ldi	r22, 0x1E	; 30
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	cb d9       	rcall	.-3178   	; 0x3f4 <dxl_write_word>
	dxl_write_word( 2, P_GOAL_POSITION_L, (int) angles[1]*11.3778 ); //Command #2
    105e:	69 89       	ldd	r22, Y+17	; 0x11
    1060:	7a 89       	ldd	r23, Y+18	; 0x12
    1062:	8b 89       	ldd	r24, Y+19	; 0x13
    1064:	9c 89       	ldd	r25, Y+20	; 0x14
    1066:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
    106a:	07 2e       	mov	r0, r23
    106c:	00 0c       	add	r0, r0
    106e:	88 0b       	sbc	r24, r24
    1070:	99 0b       	sbc	r25, r25
    1072:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__floatsisf>
    1076:	28 e7       	ldi	r18, 0x78	; 120
    1078:	3b e0       	ldi	r19, 0x0B	; 11
    107a:	46 e3       	ldi	r20, 0x36	; 54
    107c:	51 e4       	ldi	r21, 0x41	; 65
    107e:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
    1082:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
    1086:	ab 01       	movw	r20, r22
    1088:	6e e1       	ldi	r22, 0x1E	; 30
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	b1 d9       	rcall	.-3230   	; 0x3f4 <dxl_write_word>
	dxl_write_word( 3, P_GOAL_POSITION_L, (int) angles[2]*11.3778 ); //Command #3
    1092:	6d 89       	ldd	r22, Y+21	; 0x15
    1094:	7e 89       	ldd	r23, Y+22	; 0x16
    1096:	8f 89       	ldd	r24, Y+23	; 0x17
    1098:	98 8d       	ldd	r25, Y+24	; 0x18
    109a:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
    109e:	07 2e       	mov	r0, r23
    10a0:	00 0c       	add	r0, r0
    10a2:	88 0b       	sbc	r24, r24
    10a4:	99 0b       	sbc	r25, r25
    10a6:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__floatsisf>
    10aa:	28 e7       	ldi	r18, 0x78	; 120
    10ac:	3b e0       	ldi	r19, 0x0B	; 11
    10ae:	46 e3       	ldi	r20, 0x36	; 54
    10b0:	51 e4       	ldi	r21, 0x41	; 65
    10b2:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
    10b6:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
    10ba:	ab 01       	movw	r20, r22
    10bc:	6e e1       	ldi	r22, 0x1E	; 30
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	83 e0       	ldi	r24, 0x03	; 3
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	97 d9       	rcall	.-3282   	; 0x3f4 <dxl_write_word>
	
	printf("Initialization complete.\n");
    10c6:	84 e1       	ldi	r24, 0x14	; 20
    10c8:	9a e1       	ldi	r25, 0x1A	; 26
    10ca:	0e 94 83 14 	call	0x2906	; 0x2906 <puts>
		PrintCommStatus(CommStatus);
		
		//END DYNAMIXEL DEMO CODE
		*/
		
		if(parseAll(getchar()) != 0){
    10ce:	0f 2e       	mov	r0, r31
    10d0:	f0 eb       	ldi	r31, 0xB0	; 176
    10d2:	8f 2e       	mov	r8, r31
    10d4:	fc e1       	ldi	r31, 0x1C	; 28
    10d6:	9f 2e       	mov	r9, r31
    10d8:	f0 2d       	mov	r31, r0
		else if((dataState == SEND_DATA)){
			dxl_write_word( 1, P_GOAL_POSITION_L, (int) angles[0]*11.3778 ); //4096./360=11.3778  <--- Ticks per degree
			dxl_write_word( 2, P_GOAL_POSITION_L, (int) angles[1]*11.3778 ); //Command #2
			dxl_write_word( 3, P_GOAL_POSITION_L, (int) angles[2]*11.3778 ); //Command #3
			;//printf("Command sent!\n\n");
			dataState = OLD_DATA;
    10da:	0f 2e       	mov	r0, r31
    10dc:	f5 e0       	ldi	r31, 0x05	; 5
    10de:	6f 2e       	mov	r6, r31
    10e0:	71 2c       	mov	r7, r1
    10e2:	f0 2d       	mov	r31, r0
					;//printf("Motor 1: %f;  Motor 2: %f;  Motor 3: %f\n", (int) angles[0]*11.3778, (int) angles[1]*11.3778, (int) angles[2]*11.3778);
					;//printf("Confirm?? (y/n)\n");
					dataState = SEND_DATA;
				}
			
				dataState = CONFIRM_DATA;
    10e4:	0f 2e       	mov	r0, r31
    10e6:	f9 e0       	ldi	r31, 0x09	; 9
    10e8:	4f 2e       	mov	r4, r31
    10ea:	51 2c       	mov	r5, r1
    10ec:	f0 2d       	mov	r31, r0
		PrintCommStatus(CommStatus);
		
		//END DYNAMIXEL DEMO CODE
		*/
		
		if(parseAll(getchar()) != 0){
    10ee:	f4 01       	movw	r30, r8
    10f0:	80 81       	ld	r24, Z
    10f2:	91 81       	ldd	r25, Z+1	; 0x01
    10f4:	0e 94 45 14 	call	0x288a	; 0x288a <fgetc>
    10f8:	a2 dd       	rcall	.-1212   	; 0xc3e <parseAll>
			;//printf("\nError!\n");
			};
		
	if(dataState == NEW_DATA && positionDataType == POSITION){
    10fa:	80 91 10 02 	lds	r24, 0x0210
    10fe:	90 91 11 02 	lds	r25, 0x0211
    1102:	86 30       	cpi	r24, 0x06	; 6
    1104:	91 05       	cpc	r25, r1
    1106:	09 f0       	breq	.+2      	; 0x110a <main+0x12a>
    1108:	ab c0       	rjmp	.+342    	; 0x1260 <main+0x280>
    110a:	80 91 0e 02 	lds	r24, 0x020E
    110e:	90 91 0f 02 	lds	r25, 0x020F
    1112:	0b 97       	sbiw	r24, 0x0b	; 11
    1114:	09 f0       	breq	.+2      	; 0x1118 <main+0x138>
    1116:	6f c0       	rjmp	.+222    	; 0x11f6 <main+0x216>
			p.x = (xBuffer)/1000.;
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	4a e7       	ldi	r20, 0x7A	; 122
    111e:	54 e4       	ldi	r21, 0x44	; 68
    1120:	60 91 a2 1c 	lds	r22, 0x1CA2
    1124:	70 91 a3 1c 	lds	r23, 0x1CA3
    1128:	80 91 a4 1c 	lds	r24, 0x1CA4
    112c:	90 91 a5 1c 	lds	r25, 0x1CA5
    1130:	0e 94 45 12 	call	0x248a	; 0x248a <__divsf3>
    1134:	e6 2e       	mov	r14, r22
    1136:	46 2f       	mov	r20, r22
    1138:	57 2f       	mov	r21, r23
    113a:	68 2f       	mov	r22, r24
    113c:	79 2f       	mov	r23, r25
    113e:	49 83       	std	Y+1, r20	; 0x01
    1140:	5a 83       	std	Y+2, r21	; 0x02
    1142:	6b 83       	std	Y+3, r22	; 0x03
    1144:	7c 83       	std	Y+4, r23	; 0x04
			p.y = (yBuffer)/1000.;
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	4a e7       	ldi	r20, 0x7A	; 122
    114c:	54 e4       	ldi	r21, 0x44	; 68
    114e:	60 91 9e 1c 	lds	r22, 0x1C9E
    1152:	70 91 9f 1c 	lds	r23, 0x1C9F
    1156:	80 91 a0 1c 	lds	r24, 0x1CA0
    115a:	90 91 a1 1c 	lds	r25, 0x1CA1
    115e:	0e 94 45 12 	call	0x248a	; 0x248a <__divsf3>
    1162:	d6 2e       	mov	r13, r22
    1164:	46 2f       	mov	r20, r22
    1166:	57 2f       	mov	r21, r23
    1168:	68 2f       	mov	r22, r24
    116a:	79 2f       	mov	r23, r25
    116c:	4d 83       	std	Y+5, r20	; 0x05
    116e:	5e 83       	std	Y+6, r21	; 0x06
    1170:	6f 83       	std	Y+7, r22	; 0x07
    1172:	78 87       	std	Y+8, r23	; 0x08
			p.z = (zBuffer)/1000.;
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	4a e7       	ldi	r20, 0x7A	; 122
    117a:	54 e4       	ldi	r21, 0x44	; 68
    117c:	60 91 0a 02 	lds	r22, 0x020A
    1180:	70 91 0b 02 	lds	r23, 0x020B
    1184:	80 91 0c 02 	lds	r24, 0x020C
    1188:	90 91 0d 02 	lds	r25, 0x020D
    118c:	0e 94 45 12 	call	0x248a	; 0x248a <__divsf3>
    1190:	e6 2f       	mov	r30, r22
    1192:	46 2f       	mov	r20, r22
    1194:	57 2f       	mov	r21, r23
    1196:	68 2f       	mov	r22, r24
    1198:	79 2f       	mov	r23, r25
    119a:	49 87       	std	Y+9, r20	; 0x09
    119c:	5a 87       	std	Y+10, r21	; 0x0a
    119e:	6b 87       	std	Y+11, r22	; 0x0b
    11a0:	7c 87       	std	Y+12, r23	; 0x0c
			
			;//printf("\n\nNew input received\n");
			
			;//printf("\nIn inches:\nX: %f\nY: %f\nZ: %f\n", p.x, p.y, p.z);
			
			if (pointValid(p)){
    11a2:	fa 80       	ldd	r15, Y+2	; 0x02
    11a4:	0b 81       	ldd	r16, Y+3	; 0x03
    11a6:	1c 81       	ldd	r17, Y+4	; 0x04
    11a8:	2d 2d       	mov	r18, r13
    11aa:	3e 81       	ldd	r19, Y+6	; 0x06
    11ac:	4f 81       	ldd	r20, Y+7	; 0x07
    11ae:	58 85       	ldd	r21, Y+8	; 0x08
    11b0:	6e 2f       	mov	r22, r30
    11b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    11b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    11b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    11b8:	a9 d0       	rcall	.+338    	; 0x130c <pointValid>
    11ba:	89 2b       	or	r24, r25
    11bc:	b9 f0       	breq	.+46     	; 0x11ec <main+0x20c>
				;//printf("\nPoint is Valid.\n");
				lookupAngles(INVERSE_TABLE, angles, p);
    11be:	a9 80       	ldd	r10, Y+1	; 0x01
    11c0:	ba 80       	ldd	r11, Y+2	; 0x02
    11c2:	cb 80       	ldd	r12, Y+3	; 0x03
    11c4:	dc 80       	ldd	r13, Y+4	; 0x04
    11c6:	ed 80       	ldd	r14, Y+5	; 0x05
    11c8:	fe 80       	ldd	r15, Y+6	; 0x06
    11ca:	0f 81       	ldd	r16, Y+7	; 0x07
    11cc:	18 85       	ldd	r17, Y+8	; 0x08
    11ce:	29 85       	ldd	r18, Y+9	; 0x09
    11d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    11d2:	4b 85       	ldd	r20, Y+11	; 0x0b
    11d4:	5c 85       	ldd	r21, Y+12	; 0x0c
    11d6:	be 01       	movw	r22, r28
    11d8:	63 5f       	subi	r22, 0xF3	; 243
    11da:	7f 4f       	sbci	r23, 0xFF	; 255
    11dc:	84 e1       	ldi	r24, 0x14	; 20
    11de:	92 e0       	ldi	r25, 0x02	; 2
    11e0:	15 d1       	rcall	.+554    	; 0x140c <lookupAngles>
					;//printf("Motor 1: %f;  Motor 2: %f;  Motor 3: %f\n", (int) angles[0]*11.3778, (int) angles[1]*11.3778, (int) angles[2]*11.3778);
					;//printf("Confirm?? (y/n)\n");
					dataState = SEND_DATA;
				}
			
				dataState = CONFIRM_DATA;
    11e2:	50 92 11 02 	sts	0x0211, r5
    11e6:	40 92 10 02 	sts	0x0210, r4
    11ea:	81 cf       	rjmp	.-254    	; 0x10ee <main+0x10e>
			}
			else{
				;//printf("Point is not Valid.\n");
				;//printf("Abort.\n\n");
				dataState = OLD_DATA;
    11ec:	70 92 11 02 	sts	0x0211, r7
    11f0:	60 92 10 02 	sts	0x0210, r6
    11f4:	7c cf       	rjmp	.-264    	; 0x10ee <main+0x10e>
			
			
			
		}
		else if(dataState == NEW_DATA){//receiving angle command
			dxl_write_word( 1, P_GOAL_POSITION_L, (int) xBuffer ); //4096./360=11.3778  <--- Ticks per degree
    11f6:	60 91 a2 1c 	lds	r22, 0x1CA2
    11fa:	70 91 a3 1c 	lds	r23, 0x1CA3
    11fe:	80 91 a4 1c 	lds	r24, 0x1CA4
    1202:	90 91 a5 1c 	lds	r25, 0x1CA5
    1206:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
    120a:	ab 01       	movw	r20, r22
    120c:	6e e1       	ldi	r22, 0x1E	; 30
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	ef d8       	rcall	.-3618   	; 0x3f4 <dxl_write_word>
			dxl_write_word( 2, P_GOAL_POSITION_L, (int) yBuffer ); //Command #2
    1216:	60 91 9e 1c 	lds	r22, 0x1C9E
    121a:	70 91 9f 1c 	lds	r23, 0x1C9F
    121e:	80 91 a0 1c 	lds	r24, 0x1CA0
    1222:	90 91 a1 1c 	lds	r25, 0x1CA1
    1226:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
    122a:	ab 01       	movw	r20, r22
    122c:	6e e1       	ldi	r22, 0x1E	; 30
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	82 e0       	ldi	r24, 0x02	; 2
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	df d8       	rcall	.-3650   	; 0x3f4 <dxl_write_word>
			dxl_write_word( 3, P_GOAL_POSITION_L, (int) zBuffer ); //Command #3
    1236:	60 91 0a 02 	lds	r22, 0x020A
    123a:	70 91 0b 02 	lds	r23, 0x020B
    123e:	80 91 0c 02 	lds	r24, 0x020C
    1242:	90 91 0d 02 	lds	r25, 0x020D
    1246:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
    124a:	ab 01       	movw	r20, r22
    124c:	6e e1       	ldi	r22, 0x1E	; 30
    124e:	70 e0       	ldi	r23, 0x00	; 0
    1250:	83 e0       	ldi	r24, 0x03	; 3
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	cf d8       	rcall	.-3682   	; 0x3f4 <dxl_write_word>
			dataState = OLD_DATA;
    1256:	70 92 11 02 	sts	0x0211, r7
    125a:	60 92 10 02 	sts	0x0210, r6
    125e:	47 cf       	rjmp	.-370    	; 0x10ee <main+0x10e>
		}
		else if((dataState == SEND_DATA)){
    1260:	0a 97       	sbiw	r24, 0x0a	; 10
    1262:	09 f0       	breq	.+2      	; 0x1266 <main+0x286>
    1264:	44 cf       	rjmp	.-376    	; 0x10ee <main+0x10e>
			dxl_write_word( 1, P_GOAL_POSITION_L, (int) angles[0]*11.3778 ); //4096./360=11.3778  <--- Ticks per degree
    1266:	6d 85       	ldd	r22, Y+13	; 0x0d
    1268:	7e 85       	ldd	r23, Y+14	; 0x0e
    126a:	8f 85       	ldd	r24, Y+15	; 0x0f
    126c:	98 89       	ldd	r25, Y+16	; 0x10
    126e:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
    1272:	07 2e       	mov	r0, r23
    1274:	00 0c       	add	r0, r0
    1276:	88 0b       	sbc	r24, r24
    1278:	99 0b       	sbc	r25, r25
    127a:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__floatsisf>
    127e:	28 e7       	ldi	r18, 0x78	; 120
    1280:	3b e0       	ldi	r19, 0x0B	; 11
    1282:	46 e3       	ldi	r20, 0x36	; 54
    1284:	51 e4       	ldi	r21, 0x41	; 65
    1286:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
    128a:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
    128e:	ab 01       	movw	r20, r22
    1290:	6e e1       	ldi	r22, 0x1E	; 30
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	ad d8       	rcall	.-3750   	; 0x3f4 <dxl_write_word>
			dxl_write_word( 2, P_GOAL_POSITION_L, (int) angles[1]*11.3778 ); //Command #2
    129a:	69 89       	ldd	r22, Y+17	; 0x11
    129c:	7a 89       	ldd	r23, Y+18	; 0x12
    129e:	8b 89       	ldd	r24, Y+19	; 0x13
    12a0:	9c 89       	ldd	r25, Y+20	; 0x14
    12a2:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
    12a6:	07 2e       	mov	r0, r23
    12a8:	00 0c       	add	r0, r0
    12aa:	88 0b       	sbc	r24, r24
    12ac:	99 0b       	sbc	r25, r25
    12ae:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__floatsisf>
    12b2:	28 e7       	ldi	r18, 0x78	; 120
    12b4:	3b e0       	ldi	r19, 0x0B	; 11
    12b6:	46 e3       	ldi	r20, 0x36	; 54
    12b8:	51 e4       	ldi	r21, 0x41	; 65
    12ba:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
    12be:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
    12c2:	ab 01       	movw	r20, r22
    12c4:	6e e1       	ldi	r22, 0x1E	; 30
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	93 d8       	rcall	.-3802   	; 0x3f4 <dxl_write_word>
			dxl_write_word( 3, P_GOAL_POSITION_L, (int) angles[2]*11.3778 ); //Command #3
    12ce:	6d 89       	ldd	r22, Y+21	; 0x15
    12d0:	7e 89       	ldd	r23, Y+22	; 0x16
    12d2:	8f 89       	ldd	r24, Y+23	; 0x17
    12d4:	98 8d       	ldd	r25, Y+24	; 0x18
    12d6:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
    12da:	07 2e       	mov	r0, r23
    12dc:	00 0c       	add	r0, r0
    12de:	88 0b       	sbc	r24, r24
    12e0:	99 0b       	sbc	r25, r25
    12e2:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__floatsisf>
    12e6:	28 e7       	ldi	r18, 0x78	; 120
    12e8:	3b e0       	ldi	r19, 0x0B	; 11
    12ea:	46 e3       	ldi	r20, 0x36	; 54
    12ec:	51 e4       	ldi	r21, 0x41	; 65
    12ee:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
    12f2:	0e 94 ad 12 	call	0x255a	; 0x255a <__fixsfsi>
    12f6:	ab 01       	movw	r20, r22
    12f8:	6e e1       	ldi	r22, 0x1E	; 30
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	83 e0       	ldi	r24, 0x03	; 3
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	79 d8       	rcall	.-3854   	; 0x3f4 <dxl_write_word>
			;//printf("Command sent!\n\n");
			dataState = OLD_DATA;
    1302:	70 92 11 02 	sts	0x0211, r7
    1306:	60 92 10 02 	sts	0x0210, r6
    130a:	f1 ce       	rjmp	.-542    	; 0x10ee <main+0x10e>

0000130c <pointValid>:
                    inverseTable[xIndex][yIndex][zIndex][2] = 0.0;
                }
            }
        }
    }
}
    130c:	4f 92       	push	r4
    130e:	5f 92       	push	r5
    1310:	6f 92       	push	r6
    1312:	7f 92       	push	r7
    1314:	8f 92       	push	r8
    1316:	9f 92       	push	r9
    1318:	af 92       	push	r10
    131a:	bf 92       	push	r11
    131c:	cf 92       	push	r12
    131e:	df 92       	push	r13
    1320:	ef 92       	push	r14
    1322:	ff 92       	push	r15
    1324:	0f 93       	push	r16
    1326:	1f 93       	push	r17
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	2c 97       	sbiw	r28, 0x0c	; 12
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	e9 82       	std	Y+1, r14	; 0x01
    133e:	fa 82       	std	Y+2, r15	; 0x02
    1340:	0b 83       	std	Y+3, r16	; 0x03
    1342:	1c 83       	std	Y+4, r17	; 0x04
    1344:	2d 83       	std	Y+5, r18	; 0x05
    1346:	3e 83       	std	Y+6, r19	; 0x06
    1348:	4f 83       	std	Y+7, r20	; 0x07
    134a:	58 87       	std	Y+8, r21	; 0x08
    134c:	69 87       	std	Y+9, r22	; 0x09
    134e:	7a 87       	std	Y+10, r23	; 0x0a
    1350:	8b 87       	std	Y+11, r24	; 0x0b
    1352:	9c 87       	std	Y+12, r25	; 0x0c
    1354:	89 84       	ldd	r8, Y+9	; 0x09
    1356:	9a 84       	ldd	r9, Y+10	; 0x0a
    1358:	ab 84       	ldd	r10, Y+11	; 0x0b
    135a:	bc 84       	ldd	r11, Y+12	; 0x0c
    135c:	69 81       	ldd	r22, Y+1	; 0x01
    135e:	7a 81       	ldd	r23, Y+2	; 0x02
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	cd 80       	ldd	r12, Y+5	; 0x05
    1366:	de 80       	ldd	r13, Y+6	; 0x06
    1368:	ef 80       	ldd	r14, Y+7	; 0x07
    136a:	f8 84       	ldd	r15, Y+8	; 0x08
    136c:	9b 01       	movw	r18, r22
    136e:	ac 01       	movw	r20, r24
    1370:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
    1374:	2b 01       	movw	r4, r22
    1376:	3c 01       	movw	r6, r24
    1378:	a7 01       	movw	r20, r14
    137a:	96 01       	movw	r18, r12
    137c:	c7 01       	movw	r24, r14
    137e:	b6 01       	movw	r22, r12
    1380:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
    1384:	9b 01       	movw	r18, r22
    1386:	ac 01       	movw	r20, r24
    1388:	c3 01       	movw	r24, r6
    138a:	b2 01       	movw	r22, r4
    138c:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__addsf3>
    1390:	2c ef       	ldi	r18, 0xFC	; 252
    1392:	3a e7       	ldi	r19, 0x7A	; 122
    1394:	40 e1       	ldi	r20, 0x10	; 16
    1396:	52 e4       	ldi	r21, 0x42	; 66
    1398:	0e 94 41 12 	call	0x2482	; 0x2482 <__cmpsf2>
    139c:	18 16       	cp	r1, r24
    139e:	d4 f0       	brlt	.+52     	; 0x13d4 <pointValid+0xc8>
    13a0:	26 ef       	ldi	r18, 0xF6	; 246
    13a2:	38 e2       	ldi	r19, 0x28	; 40
    13a4:	40 e5       	ldi	r20, 0x50	; 80
    13a6:	51 ec       	ldi	r21, 0xC1	; 193
    13a8:	c5 01       	movw	r24, r10
    13aa:	b4 01       	movw	r22, r8
    13ac:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
    13b0:	88 23       	and	r24, r24
    13b2:	9c f0       	brlt	.+38     	; 0x13da <pointValid+0xce>
    13b4:	11 e0       	ldi	r17, 0x01	; 1
    13b6:	f1 2c       	mov	r15, r1
    13b8:	24 e1       	ldi	r18, 0x14	; 20
    13ba:	3e ea       	ldi	r19, 0xAE	; 174
    13bc:	4f ef       	ldi	r20, 0xFF	; 255
    13be:	50 ec       	ldi	r21, 0xC0	; 192
    13c0:	c5 01       	movw	r24, r10
    13c2:	b4 01       	movw	r22, r8
    13c4:	0e 94 41 12 	call	0x2482	; 0x2482 <__cmpsf2>
    13c8:	18 16       	cp	r1, r24
    13ca:	0c f4       	brge	.+2      	; 0x13ce <pointValid+0xc2>
    13cc:	10 e0       	ldi	r17, 0x00	; 0
    13ce:	81 2f       	mov	r24, r17
    13d0:	9f 2d       	mov	r25, r15
    13d2:	05 c0       	rjmp	.+10     	; 0x13de <pointValid+0xd2>
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <pointValid+0xd2>
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	2c 96       	adiw	r28, 0x0c	; 12
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	ff 90       	pop	r15
    13f4:	ef 90       	pop	r14
    13f6:	df 90       	pop	r13
    13f8:	cf 90       	pop	r12
    13fa:	bf 90       	pop	r11
    13fc:	af 90       	pop	r10
    13fe:	9f 90       	pop	r9
    1400:	8f 90       	pop	r8
    1402:	7f 90       	pop	r7
    1404:	6f 90       	pop	r6
    1406:	5f 90       	pop	r5
    1408:	4f 90       	pop	r4
    140a:	08 95       	ret

0000140c <lookupAngles>:
 * 'angles'. If no solution exists, sets 'angles[0]', 'angles[1]', and
 * 'angles[2]' equal to NAN.
 */
void lookupAngles(double inverseTable[X_TABLE_DIM][Y_TABLE_DIM][Z_TABLE_DIM][3],
                  double* angles, struct point p)
{
    140c:	2f 92       	push	r2
    140e:	3f 92       	push	r3
    1410:	4f 92       	push	r4
    1412:	5f 92       	push	r5
    1414:	6f 92       	push	r6
    1416:	7f 92       	push	r7
    1418:	8f 92       	push	r8
    141a:	9f 92       	push	r9
    141c:	af 92       	push	r10
    141e:	bf 92       	push	r11
    1420:	cf 92       	push	r12
    1422:	df 92       	push	r13
    1424:	ef 92       	push	r14
    1426:	ff 92       	push	r15
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	c4 5e       	subi	r28, 0xE4	; 228
    1436:	d1 09       	sbc	r29, r1
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	a3 96       	adiw	r28, 0x23	; 35
    1444:	9f af       	std	Y+63, r25	; 0x3f
    1446:	8e af       	std	Y+62, r24	; 0x3e
    1448:	a3 97       	sbiw	r28, 0x23	; 35
    144a:	1b 01       	movw	r2, r22
    144c:	66 96       	adiw	r28, 0x16	; 22
    144e:	af ae       	std	Y+63, r10	; 0x3f
    1450:	66 97       	sbiw	r28, 0x16	; 22
    1452:	67 96       	adiw	r28, 0x17	; 23
    1454:	bf ae       	std	Y+63, r11	; 0x3f
    1456:	67 97       	sbiw	r28, 0x17	; 23
    1458:	68 96       	adiw	r28, 0x18	; 24
    145a:	cf ae       	std	Y+63, r12	; 0x3f
    145c:	68 97       	sbiw	r28, 0x18	; 24
    145e:	69 96       	adiw	r28, 0x19	; 25
    1460:	df ae       	std	Y+63, r13	; 0x3f
    1462:	69 97       	sbiw	r28, 0x19	; 25
    1464:	6a 96       	adiw	r28, 0x1a	; 26
    1466:	ef ae       	std	Y+63, r14	; 0x3f
    1468:	6a 97       	sbiw	r28, 0x1a	; 26
    146a:	6b 96       	adiw	r28, 0x1b	; 27
    146c:	ff ae       	std	Y+63, r15	; 0x3f
    146e:	6b 97       	sbiw	r28, 0x1b	; 27
    1470:	6c 96       	adiw	r28, 0x1c	; 28
    1472:	0f af       	std	Y+63, r16	; 0x3f
    1474:	6c 97       	sbiw	r28, 0x1c	; 28
    1476:	6d 96       	adiw	r28, 0x1d	; 29
    1478:	1f af       	std	Y+63, r17	; 0x3f
    147a:	6d 97       	sbiw	r28, 0x1d	; 29
    147c:	6e 96       	adiw	r28, 0x1e	; 30
    147e:	2f af       	std	Y+63, r18	; 0x3f
    1480:	6e 97       	sbiw	r28, 0x1e	; 30
    1482:	6f 96       	adiw	r28, 0x1f	; 31
    1484:	3f af       	std	Y+63, r19	; 0x3f
    1486:	6f 97       	sbiw	r28, 0x1f	; 31
    1488:	a0 96       	adiw	r28, 0x20	; 32
    148a:	4f af       	std	Y+63, r20	; 0x3f
    148c:	a0 97       	sbiw	r28, 0x20	; 32
    148e:	a1 96       	adiw	r28, 0x21	; 33
    1490:	5f af       	std	Y+63, r21	; 0x3f
    1492:	a1 97       	sbiw	r28, 0x21	; 33
    1494:	69 96       	adiw	r28, 0x19	; 25
    1496:	cc ac       	ldd	r12, Y+60	; 0x3c
    1498:	dd ac       	ldd	r13, Y+61	; 0x3d
    149a:	ee ac       	ldd	r14, Y+62	; 0x3e
    149c:	ff ac       	ldd	r15, Y+63	; 0x3f
    149e:	69 97       	sbiw	r28, 0x19	; 25
    14a0:	6d 96       	adiw	r28, 0x1d	; 29
    14a2:	4c ac       	ldd	r4, Y+60	; 0x3c
    14a4:	5d ac       	ldd	r5, Y+61	; 0x3d
    14a6:	6e ac       	ldd	r6, Y+62	; 0x3e
    14a8:	7f ac       	ldd	r7, Y+63	; 0x3f
    14aa:	6d 97       	sbiw	r28, 0x1d	; 29
    14ac:	a1 96       	adiw	r28, 0x21	; 33
    14ae:	8c ac       	ldd	r8, Y+60	; 0x3c
    14b0:	9d ac       	ldd	r9, Y+61	; 0x3d
    14b2:	ae ac       	ldd	r10, Y+62	; 0x3e
    14b4:	bf ac       	ldd	r11, Y+63	; 0x3f
    14b6:	a1 97       	sbiw	r28, 0x21	; 33
    int DEBUG_PRINT = 0; /* Results in print statements for debugging. */
    /* First, check boundaries of table. */
    if (!(p.x >= X_TABLE_MIN &&
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 ee       	ldi	r20, 0xE0	; 224
    14be:	50 ec       	ldi	r21, 0xC0	; 192
    14c0:	c7 01       	movw	r24, r14
    14c2:	b6 01       	movw	r22, r12
    14c4:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
    14c8:	88 23       	and	r24, r24
    14ca:	7c f1       	brlt	.+94     	; 0x152a <lookupAngles+0x11e>
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 ee       	ldi	r20, 0xE0	; 224
    14d2:	50 e4       	ldi	r21, 0x40	; 64
    14d4:	c7 01       	movw	r24, r14
    14d6:	b6 01       	movw	r22, r12
    14d8:	d4 d7       	rcall	.+4008   	; 0x2482 <__cmpsf2>
    14da:	18 16       	cp	r1, r24
    14dc:	34 f1       	brlt	.+76     	; 0x152a <lookupAngles+0x11e>
          p.x <= X_TABLE_MAX &&
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 ee       	ldi	r20, 0xE0	; 224
    14e4:	50 ec       	ldi	r21, 0xC0	; 192
    14e6:	c3 01       	movw	r24, r6
    14e8:	b2 01       	movw	r22, r4
    14ea:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
    14ee:	88 23       	and	r24, r24
    14f0:	e4 f0       	brlt	.+56     	; 0x152a <lookupAngles+0x11e>
          p.y >= Y_TABLE_MIN &&
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 ee       	ldi	r20, 0xE0	; 224
    14f8:	50 e4       	ldi	r21, 0x40	; 64
    14fa:	c3 01       	movw	r24, r6
    14fc:	b2 01       	movw	r22, r4
    14fe:	c1 d7       	rcall	.+3970   	; 0x2482 <__cmpsf2>
    1500:	18 16       	cp	r1, r24
    1502:	9c f0       	brlt	.+38     	; 0x152a <lookupAngles+0x11e>
          p.y <= Y_TABLE_MAX &&
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e6       	ldi	r20, 0x60	; 96
    150a:	51 ec       	ldi	r21, 0xC1	; 193
    150c:	c5 01       	movw	r24, r10
    150e:	b4 01       	movw	r22, r8
    1510:	0e 94 90 13 	call	0x2720	; 0x2720 <__gesf2>
    1514:	88 23       	and	r24, r24
    1516:	4c f0       	brlt	.+18     	; 0x152a <lookupAngles+0x11e>
void lookupAngles(double inverseTable[X_TABLE_DIM][Y_TABLE_DIM][Z_TABLE_DIM][3],
                  double* angles, struct point p)
{
    int DEBUG_PRINT = 0; /* Results in print statements for debugging. */
    /* First, check boundaries of table. */
    if (!(p.x >= X_TABLE_MIN &&
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 ee       	ldi	r20, 0xE0	; 224
    151e:	50 ec       	ldi	r21, 0xC0	; 192
    1520:	c5 01       	movw	r24, r10
    1522:	b4 01       	movw	r22, r8
    1524:	ae d7       	rcall	.+3932   	; 0x2482 <__cmpsf2>
    1526:	18 16       	cp	r1, r24
    1528:	94 f4       	brge	.+36     	; 0x154e <lookupAngles+0x142>
          p.y >= Y_TABLE_MIN &&
          p.y <= Y_TABLE_MAX &&
          p.z >= Z_TABLE_MIN &&
          p.z <= Z_TABLE_MAX))
    {
        angles[0] = NAN;
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	a0 ec       	ldi	r26, 0xC0	; 192
    1530:	bf e7       	ldi	r27, 0x7F	; 127
    1532:	f1 01       	movw	r30, r2
    1534:	80 83       	st	Z, r24
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	a2 83       	std	Z+2, r26	; 0x02
    153a:	b3 83       	std	Z+3, r27	; 0x03
        angles[1] = NAN;
    153c:	84 83       	std	Z+4, r24	; 0x04
    153e:	95 83       	std	Z+5, r25	; 0x05
    1540:	a6 83       	std	Z+6, r26	; 0x06
    1542:	b7 83       	std	Z+7, r27	; 0x07
        angles[2] = NAN;
    1544:	80 87       	std	Z+8, r24	; 0x08
    1546:	91 87       	std	Z+9, r25	; 0x09
    1548:	a2 87       	std	Z+10, r26	; 0x0a
    154a:	b3 87       	std	Z+11, r27	; 0x0b
        return;
    154c:	1b c7       	rjmp	.+3638   	; 0x2384 <__stack+0x185>
 * the corresponding 'axis' ('x', 'y', or 'z').
 */
int pointToIndex(char axis, double point)
{
    if (axis == 'x')
        return (int) ((point - X_TABLE_MIN ) / X_TABLE_RES);
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 ee       	ldi	r20, 0xE0	; 224
    1554:	50 e4       	ldi	r21, 0x40	; 64
    1556:	c7 01       	movw	r24, r14
    1558:	b6 01       	movw	r22, r12
    155a:	2f d7       	rcall	.+3678   	; 0x23ba <__addsf3>
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	5f e3       	ldi	r21, 0x3F	; 63
    1564:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
    1568:	f8 d7       	rcall	.+4080   	; 0x255a <__fixsfsi>
    156a:	cf 56       	subi	r28, 0x6F	; 111
    156c:	df 4f       	sbci	r29, 0xFF	; 255
    156e:	68 83       	st	Y, r22
    1570:	79 83       	std	Y+1, r23	; 0x01
    1572:	8a 83       	std	Y+2, r24	; 0x02
    1574:	9b 83       	std	Y+3, r25	; 0x03
    1576:	c1 59       	subi	r28, 0x91	; 145
    1578:	d0 40       	sbci	r29, 0x00	; 0
    else if (axis == 'y')
        return (int) ((point - Y_TABLE_MIN ) / Y_TABLE_RES);
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	40 ee       	ldi	r20, 0xE0	; 224
    1580:	50 e4       	ldi	r21, 0x40	; 64
    1582:	c3 01       	movw	r24, r6
    1584:	b2 01       	movw	r22, r4
    1586:	19 d7       	rcall	.+3634   	; 0x23ba <__addsf3>
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	5f e3       	ldi	r21, 0x3F	; 63
    1590:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
    1594:	e2 d7       	rcall	.+4036   	; 0x255a <__fixsfsi>
    1596:	ed 96       	adiw	r28, 0x3d	; 61
    1598:	6c af       	std	Y+60, r22	; 0x3c
    159a:	7d af       	std	Y+61, r23	; 0x3d
    159c:	8e af       	std	Y+62, r24	; 0x3e
    159e:	9f af       	std	Y+63, r25	; 0x3f
    15a0:	ed 97       	sbiw	r28, 0x3d	; 61
    else if (axis == 'z')
        return (int) ((point - Z_TABLE_MIN ) / Z_TABLE_RES);
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e6       	ldi	r20, 0x60	; 96
    15a8:	51 e4       	ldi	r21, 0x41	; 65
    15aa:	c5 01       	movw	r24, r10
    15ac:	b4 01       	movw	r22, r8
    15ae:	05 d7       	rcall	.+3594   	; 0x23ba <__addsf3>
    15b0:	d4 d7       	rcall	.+4008   	; 0x255a <__fixsfsi>
    15b2:	e1 96       	adiw	r28, 0x31	; 49
    15b4:	6c af       	std	Y+60, r22	; 0x3c
    15b6:	7d af       	std	Y+61, r23	; 0x3d
    15b8:	8e af       	std	Y+62, r24	; 0x3e
    15ba:	9f af       	std	Y+63, r25	; 0x3f
    15bc:	e1 97       	sbiw	r28, 0x31	; 49
       p5 = (xInd + 1, yInd, zInd + 1)
       p6 = (xInd + 1, yInd + 1, zInd)
       p7 = (xInd + 1, yInd + 1, zInd + 1)
       Note: 'api' is the set of angles corresponding to point 'i'.
    */
    double ap0[3] = {inverseTable[xInd][yInd][zInd][0],
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	93 e0       	ldi	r25, 0x03	; 3
    15c2:	cf 56       	subi	r28, 0x6F	; 111
    15c4:	df 4f       	sbci	r29, 0xFF	; 255
    15c6:	48 81       	ld	r20, Y
    15c8:	59 81       	ldd	r21, Y+1	; 0x01
    15ca:	c1 59       	subi	r28, 0x91	; 145
    15cc:	d0 40       	sbci	r29, 0x00	; 0
    15ce:	84 9f       	mul	r24, r20
    15d0:	90 01       	movw	r18, r0
    15d2:	85 9f       	mul	r24, r21
    15d4:	30 0d       	add	r19, r0
    15d6:	94 9f       	mul	r25, r20
    15d8:	30 0d       	add	r19, r0
    15da:	11 24       	eor	r1, r1
    15dc:	ab 96       	adiw	r28, 0x2b	; 43
    15de:	3f af       	std	Y+63, r19	; 0x3f
    15e0:	2e af       	std	Y+62, r18	; 0x3e
    15e2:	ab 97       	sbiw	r28, 0x2b	; 43
    15e4:	a3 96       	adiw	r28, 0x23	; 35
    15e6:	2e ad       	ldd	r18, Y+62	; 0x3e
    15e8:	3f ad       	ldd	r19, Y+63	; 0x3f
    15ea:	a3 97       	sbiw	r28, 0x23	; 35
    15ec:	ab 96       	adiw	r28, 0x2b	; 43
    15ee:	6e ad       	ldd	r22, Y+62	; 0x3e
    15f0:	7f ad       	ldd	r23, Y+63	; 0x3f
    15f2:	ab 97       	sbiw	r28, 0x2b	; 43
    15f4:	26 0f       	add	r18, r22
    15f6:	37 1f       	adc	r19, r23
    15f8:	af 96       	adiw	r28, 0x2f	; 47
    15fa:	ae ad       	ldd	r26, Y+62	; 0x3e
    15fc:	bf ad       	ldd	r27, Y+63	; 0x3f
    15fe:	af 97       	sbiw	r28, 0x2f	; 47
    1600:	aa 0f       	add	r26, r26
    1602:	bb 1f       	adc	r27, r27
    1604:	af 96       	adiw	r28, 0x2f	; 47
    1606:	ee ad       	ldd	r30, Y+62	; 0x3e
    1608:	ff ad       	ldd	r31, Y+63	; 0x3f
    160a:	af 97       	sbiw	r28, 0x2f	; 47
    160c:	ea 0f       	add	r30, r26
    160e:	fb 1f       	adc	r31, r27
    1610:	ee 0f       	add	r30, r30
    1612:	ff 1f       	adc	r31, r31
    1614:	ee 0f       	add	r30, r30
    1616:	ff 1f       	adc	r31, r31
    1618:	60 e6       	ldi	r22, 0x60	; 96
    161a:	eb 96       	adiw	r28, 0x3b	; 59
    161c:	4e ad       	ldd	r20, Y+62	; 0x3e
    161e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1620:	eb 97       	sbiw	r28, 0x3b	; 59
    1622:	64 9f       	mul	r22, r20
    1624:	c0 01       	movw	r24, r0
    1626:	65 9f       	mul	r22, r21
    1628:	90 0d       	add	r25, r0
    162a:	11 24       	eor	r1, r1
    162c:	e3 96       	adiw	r28, 0x33	; 51
    162e:	9f af       	std	Y+63, r25	; 0x3f
    1630:	8e af       	std	Y+62, r24	; 0x3e
    1632:	e3 97       	sbiw	r28, 0x33	; 51
    1634:	8c 01       	movw	r16, r24
    1636:	0e 0f       	add	r16, r30
    1638:	1f 1f       	adc	r17, r31
    163a:	f9 01       	movw	r30, r18
    163c:	e0 0f       	add	r30, r16
    163e:	f1 1f       	adc	r31, r17
    1640:	40 81       	ld	r20, Z
    1642:	51 81       	ldd	r21, Z+1	; 0x01
    1644:	62 81       	ldd	r22, Z+2	; 0x02
    1646:	73 81       	ldd	r23, Z+3	; 0x03
    1648:	a9 96       	adiw	r28, 0x29	; 41
    164a:	4c af       	std	Y+60, r20	; 0x3c
    164c:	5d af       	std	Y+61, r21	; 0x3d
    164e:	6e af       	std	Y+62, r22	; 0x3e
    1650:	7f af       	std	Y+63, r23	; 0x3f
    1652:	a9 97       	sbiw	r28, 0x29	; 41
    1654:	49 83       	std	Y+1, r20	; 0x01
    1656:	5a 83       	std	Y+2, r21	; 0x02
    1658:	6b 83       	std	Y+3, r22	; 0x03
    165a:	7c 83       	std	Y+4, r23	; 0x04
                     inverseTable[xInd][yInd][zInd][1],
    165c:	64 81       	ldd	r22, Z+4	; 0x04
    165e:	75 81       	ldd	r23, Z+5	; 0x05
    1660:	86 81       	ldd	r24, Z+6	; 0x06
    1662:	97 81       	ldd	r25, Z+7	; 0x07
    1664:	cb 55       	subi	r28, 0x5B	; 91
    1666:	df 4f       	sbci	r29, 0xFF	; 255
    1668:	68 83       	st	Y, r22
    166a:	79 83       	std	Y+1, r23	; 0x01
    166c:	8a 83       	std	Y+2, r24	; 0x02
    166e:	9b 83       	std	Y+3, r25	; 0x03
    1670:	c5 5a       	subi	r28, 0xA5	; 165
    1672:	d0 40       	sbci	r29, 0x00	; 0
                     inverseTable[xInd][yInd][zInd][2]};
    1674:	40 85       	ldd	r20, Z+8	; 0x08
    1676:	51 85       	ldd	r21, Z+9	; 0x09
    1678:	62 85       	ldd	r22, Z+10	; 0x0a
    167a:	73 85       	ldd	r23, Z+11	; 0x0b
    167c:	c7 55       	subi	r28, 0x57	; 87
    167e:	df 4f       	sbci	r29, 0xFF	; 255
    1680:	48 83       	st	Y, r20
    1682:	59 83       	std	Y+1, r21	; 0x01
    1684:	6a 83       	std	Y+2, r22	; 0x02
    1686:	7b 83       	std	Y+3, r23	; 0x03
    1688:	c9 5a       	subi	r28, 0xA9	; 169
    168a:	d0 40       	sbci	r29, 0x00	; 0
    double ap1[3] = {inverseTable[xInd][yInd][zInd + 1][0],
    168c:	af 96       	adiw	r28, 0x2f	; 47
    168e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1690:	9f ad       	ldd	r25, Y+63	; 0x3f
    1692:	af 97       	sbiw	r28, 0x2f	; 47
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	bc 01       	movw	r22, r24
    1698:	66 0f       	add	r22, r22
    169a:	77 1f       	adc	r23, r23
    169c:	cb 56       	subi	r28, 0x6B	; 107
    169e:	df 4f       	sbci	r29, 0xFF	; 255
    16a0:	79 83       	std	Y+1, r23	; 0x01
    16a2:	68 83       	st	Y, r22
    16a4:	c5 59       	subi	r28, 0x95	; 149
    16a6:	d0 40       	sbci	r29, 0x00	; 0
    16a8:	fb 01       	movw	r30, r22
    16aa:	e8 0f       	add	r30, r24
    16ac:	f9 1f       	adc	r31, r25
    16ae:	ee 0f       	add	r30, r30
    16b0:	ff 1f       	adc	r31, r31
    16b2:	ee 0f       	add	r30, r30
    16b4:	ff 1f       	adc	r31, r31
    16b6:	e3 96       	adiw	r28, 0x33	; 51
    16b8:	4e ad       	ldd	r20, Y+62	; 0x3e
    16ba:	5f ad       	ldd	r21, Y+63	; 0x3f
    16bc:	e3 97       	sbiw	r28, 0x33	; 51
    16be:	4e 0f       	add	r20, r30
    16c0:	5f 1f       	adc	r21, r31
    16c2:	e3 96       	adiw	r28, 0x33	; 51
    16c4:	5f af       	std	Y+63, r21	; 0x3f
    16c6:	4e af       	std	Y+62, r20	; 0x3e
    16c8:	e3 97       	sbiw	r28, 0x33	; 51
    16ca:	fa 01       	movw	r30, r20
    16cc:	e2 0f       	add	r30, r18
    16ce:	f3 1f       	adc	r31, r19
    16d0:	40 81       	ld	r20, Z
    16d2:	51 81       	ldd	r21, Z+1	; 0x01
    16d4:	62 81       	ldd	r22, Z+2	; 0x02
    16d6:	73 81       	ldd	r23, Z+3	; 0x03
    16d8:	c3 58       	subi	r28, 0x83	; 131
    16da:	df 4f       	sbci	r29, 0xFF	; 255
    16dc:	48 83       	st	Y, r20
    16de:	59 83       	std	Y+1, r21	; 0x01
    16e0:	6a 83       	std	Y+2, r22	; 0x02
    16e2:	7b 83       	std	Y+3, r23	; 0x03
    16e4:	cd 57       	subi	r28, 0x7D	; 125
    16e6:	d0 40       	sbci	r29, 0x00	; 0
    16e8:	4d 87       	std	Y+13, r20	; 0x0d
    16ea:	5e 87       	std	Y+14, r21	; 0x0e
    16ec:	6f 87       	std	Y+15, r22	; 0x0f
    16ee:	78 8b       	std	Y+16, r23	; 0x10
                     inverseTable[xInd][yInd][zInd + 1][1],
    16f0:	44 81       	ldd	r20, Z+4	; 0x04
    16f2:	55 81       	ldd	r21, Z+5	; 0x05
    16f4:	66 81       	ldd	r22, Z+6	; 0x06
    16f6:	77 81       	ldd	r23, Z+7	; 0x07
    16f8:	c3 55       	subi	r28, 0x53	; 83
    16fa:	df 4f       	sbci	r29, 0xFF	; 255
    16fc:	48 83       	st	Y, r20
    16fe:	59 83       	std	Y+1, r21	; 0x01
    1700:	6a 83       	std	Y+2, r22	; 0x02
    1702:	7b 83       	std	Y+3, r23	; 0x03
    1704:	cd 5a       	subi	r28, 0xAD	; 173
    1706:	d0 40       	sbci	r29, 0x00	; 0
                     inverseTable[xInd][yInd][zInd + 1][2]};
    1708:	40 85       	ldd	r20, Z+8	; 0x08
    170a:	51 85       	ldd	r21, Z+9	; 0x09
    170c:	62 85       	ldd	r22, Z+10	; 0x0a
    170e:	73 85       	ldd	r23, Z+11	; 0x0b
    1710:	cf 54       	subi	r28, 0x4F	; 79
    1712:	df 4f       	sbci	r29, 0xFF	; 255
    1714:	48 83       	st	Y, r20
    1716:	59 83       	std	Y+1, r21	; 0x01
    1718:	6a 83       	std	Y+2, r22	; 0x02
    171a:	7b 83       	std	Y+3, r23	; 0x03
    171c:	c1 5b       	subi	r28, 0xB1	; 177
    171e:	d0 40       	sbci	r29, 0x00	; 0
    double ap2[3] = {inverseTable[xInd][yInd + 1][zInd][0],
    1720:	eb 96       	adiw	r28, 0x3b	; 59
    1722:	ee ad       	ldd	r30, Y+62	; 0x3e
    1724:	ff ad       	ldd	r31, Y+63	; 0x3f
    1726:	eb 97       	sbiw	r28, 0x3b	; 59
    1728:	31 96       	adiw	r30, 0x01	; 1
    172a:	af 96       	adiw	r28, 0x2f	; 47
    172c:	6e ad       	ldd	r22, Y+62	; 0x3e
    172e:	7f ad       	ldd	r23, Y+63	; 0x3f
    1730:	af 97       	sbiw	r28, 0x2f	; 47
    1732:	a6 0f       	add	r26, r22
    1734:	b7 1f       	adc	r27, r23
    1736:	aa 0f       	add	r26, r26
    1738:	bb 1f       	adc	r27, r27
    173a:	aa 0f       	add	r26, r26
    173c:	bb 1f       	adc	r27, r27
    173e:	60 e6       	ldi	r22, 0x60	; 96
    1740:	6e 9f       	mul	r22, r30
    1742:	a0 01       	movw	r20, r0
    1744:	6f 9f       	mul	r22, r31
    1746:	50 0d       	add	r21, r0
    1748:	11 24       	eor	r1, r1
    174a:	c7 56       	subi	r28, 0x67	; 103
    174c:	df 4f       	sbci	r29, 0xFF	; 255
    174e:	59 83       	std	Y+1, r21	; 0x01
    1750:	48 83       	st	Y, r20
    1752:	c9 59       	subi	r28, 0x99	; 153
    1754:	d0 40       	sbci	r29, 0x00	; 0
    1756:	a4 0f       	add	r26, r20
    1758:	b5 1f       	adc	r27, r21
    175a:	f9 01       	movw	r30, r18
    175c:	ea 0f       	add	r30, r26
    175e:	fb 1f       	adc	r31, r27
    1760:	40 81       	ld	r20, Z
    1762:	51 81       	ldd	r21, Z+1	; 0x01
    1764:	62 81       	ldd	r22, Z+2	; 0x02
    1766:	73 81       	ldd	r23, Z+3	; 0x03
    1768:	cf 57       	subi	r28, 0x7F	; 127
    176a:	df 4f       	sbci	r29, 0xFF	; 255
    176c:	48 83       	st	Y, r20
    176e:	59 83       	std	Y+1, r21	; 0x01
    1770:	6a 83       	std	Y+2, r22	; 0x02
    1772:	7b 83       	std	Y+3, r23	; 0x03
    1774:	c1 58       	subi	r28, 0x81	; 129
    1776:	d0 40       	sbci	r29, 0x00	; 0
    1778:	49 8f       	std	Y+25, r20	; 0x19
    177a:	5a 8f       	std	Y+26, r21	; 0x1a
    177c:	6b 8f       	std	Y+27, r22	; 0x1b
    177e:	7c 8f       	std	Y+28, r23	; 0x1c
                     inverseTable[xInd][yInd + 1][zInd][1],
    1780:	44 81       	ldd	r20, Z+4	; 0x04
    1782:	55 81       	ldd	r21, Z+5	; 0x05
    1784:	66 81       	ldd	r22, Z+6	; 0x06
    1786:	77 81       	ldd	r23, Z+7	; 0x07
    1788:	cb 54       	subi	r28, 0x4B	; 75
    178a:	df 4f       	sbci	r29, 0xFF	; 255
    178c:	48 83       	st	Y, r20
    178e:	59 83       	std	Y+1, r21	; 0x01
    1790:	6a 83       	std	Y+2, r22	; 0x02
    1792:	7b 83       	std	Y+3, r23	; 0x03
    1794:	c5 5b       	subi	r28, 0xB5	; 181
    1796:	d0 40       	sbci	r29, 0x00	; 0
                     inverseTable[xInd][yInd + 1][zInd][2]};
    1798:	40 85       	ldd	r20, Z+8	; 0x08
    179a:	51 85       	ldd	r21, Z+9	; 0x09
    179c:	62 85       	ldd	r22, Z+10	; 0x0a
    179e:	73 85       	ldd	r23, Z+11	; 0x0b
    17a0:	c7 54       	subi	r28, 0x47	; 71
    17a2:	df 4f       	sbci	r29, 0xFF	; 255
    17a4:	48 83       	st	Y, r20
    17a6:	59 83       	std	Y+1, r21	; 0x01
    17a8:	6a 83       	std	Y+2, r22	; 0x02
    17aa:	7b 83       	std	Y+3, r23	; 0x03
    17ac:	c9 5b       	subi	r28, 0xB9	; 185
    17ae:	d0 40       	sbci	r29, 0x00	; 0
    double ap3[3] = {inverseTable[xInd][yInd + 1][zInd + 1][0],
    17b0:	cb 56       	subi	r28, 0x6B	; 107
    17b2:	df 4f       	sbci	r29, 0xFF	; 255
    17b4:	e8 81       	ld	r30, Y
    17b6:	f9 81       	ldd	r31, Y+1	; 0x01
    17b8:	c5 59       	subi	r28, 0x95	; 149
    17ba:	d0 40       	sbci	r29, 0x00	; 0
    17bc:	e8 0f       	add	r30, r24
    17be:	f9 1f       	adc	r31, r25
    17c0:	ee 0f       	add	r30, r30
    17c2:	ff 1f       	adc	r31, r31
    17c4:	ee 0f       	add	r30, r30
    17c6:	ff 1f       	adc	r31, r31
    17c8:	c7 56       	subi	r28, 0x67	; 103
    17ca:	df 4f       	sbci	r29, 0xFF	; 255
    17cc:	68 81       	ld	r22, Y
    17ce:	79 81       	ldd	r23, Y+1	; 0x01
    17d0:	c9 59       	subi	r28, 0x99	; 153
    17d2:	d0 40       	sbci	r29, 0x00	; 0
    17d4:	6e 0f       	add	r22, r30
    17d6:	7f 1f       	adc	r23, r31
    17d8:	e7 96       	adiw	r28, 0x37	; 55
    17da:	7f af       	std	Y+63, r23	; 0x3f
    17dc:	6e af       	std	Y+62, r22	; 0x3e
    17de:	e7 97       	sbiw	r28, 0x37	; 55
    17e0:	fb 01       	movw	r30, r22
    17e2:	e2 0f       	add	r30, r18
    17e4:	f3 1f       	adc	r31, r19
    17e6:	20 81       	ld	r18, Z
    17e8:	31 81       	ldd	r19, Z+1	; 0x01
    17ea:	42 81       	ldd	r20, Z+2	; 0x02
    17ec:	53 81       	ldd	r21, Z+3	; 0x03
    17ee:	cb 57       	subi	r28, 0x7B	; 123
    17f0:	df 4f       	sbci	r29, 0xFF	; 255
    17f2:	28 83       	st	Y, r18
    17f4:	39 83       	std	Y+1, r19	; 0x01
    17f6:	4a 83       	std	Y+2, r20	; 0x02
    17f8:	5b 83       	std	Y+3, r21	; 0x03
    17fa:	c5 58       	subi	r28, 0x85	; 133
    17fc:	d0 40       	sbci	r29, 0x00	; 0
    17fe:	2d a3       	std	Y+37, r18	; 0x25
    1800:	3e a3       	std	Y+38, r19	; 0x26
    1802:	4f a3       	std	Y+39, r20	; 0x27
    1804:	58 a7       	std	Y+40, r21	; 0x28
                     inverseTable[xInd][yInd + 1][zInd + 1][1],
    1806:	44 81       	ldd	r20, Z+4	; 0x04
    1808:	55 81       	ldd	r21, Z+5	; 0x05
    180a:	66 81       	ldd	r22, Z+6	; 0x06
    180c:	77 81       	ldd	r23, Z+7	; 0x07
    180e:	c3 54       	subi	r28, 0x43	; 67
    1810:	df 4f       	sbci	r29, 0xFF	; 255
    1812:	48 83       	st	Y, r20
    1814:	59 83       	std	Y+1, r21	; 0x01
    1816:	6a 83       	std	Y+2, r22	; 0x02
    1818:	7b 83       	std	Y+3, r23	; 0x03
    181a:	cd 5b       	subi	r28, 0xBD	; 189
    181c:	d0 40       	sbci	r29, 0x00	; 0
                     inverseTable[xInd][yInd + 1][zInd + 1][2]};
    181e:	20 85       	ldd	r18, Z+8	; 0x08
    1820:	31 85       	ldd	r19, Z+9	; 0x09
    1822:	42 85       	ldd	r20, Z+10	; 0x0a
    1824:	53 85       	ldd	r21, Z+11	; 0x0b
    1826:	cf 53       	subi	r28, 0x3F	; 63
    1828:	df 4f       	sbci	r29, 0xFF	; 255
    182a:	28 83       	st	Y, r18
    182c:	39 83       	std	Y+1, r19	; 0x01
    182e:	4a 83       	std	Y+2, r20	; 0x02
    1830:	5b 83       	std	Y+3, r21	; 0x03
    1832:	c1 5c       	subi	r28, 0xC1	; 193
    1834:	d0 40       	sbci	r29, 0x00	; 0
    double ap4[3] = {inverseTable[xInd + 1][yInd][zInd][0],
    1836:	ab 96       	adiw	r28, 0x2b	; 43
    1838:	2e ad       	ldd	r18, Y+62	; 0x3e
    183a:	3f ad       	ldd	r19, Y+63	; 0x3f
    183c:	ab 97       	sbiw	r28, 0x2b	; 43
    183e:	3d 5f       	subi	r19, 0xFD	; 253
    1840:	a3 96       	adiw	r28, 0x23	; 35
    1842:	4e ad       	ldd	r20, Y+62	; 0x3e
    1844:	5f ad       	ldd	r21, Y+63	; 0x3f
    1846:	a3 97       	sbiw	r28, 0x23	; 35
    1848:	24 0f       	add	r18, r20
    184a:	35 1f       	adc	r19, r21
    184c:	f9 01       	movw	r30, r18
    184e:	e0 0f       	add	r30, r16
    1850:	f1 1f       	adc	r31, r17
    1852:	40 81       	ld	r20, Z
    1854:	51 81       	ldd	r21, Z+1	; 0x01
    1856:	62 81       	ldd	r22, Z+2	; 0x02
    1858:	73 81       	ldd	r23, Z+3	; 0x03
    185a:	c7 57       	subi	r28, 0x77	; 119
    185c:	df 4f       	sbci	r29, 0xFF	; 255
    185e:	48 83       	st	Y, r20
    1860:	59 83       	std	Y+1, r21	; 0x01
    1862:	6a 83       	std	Y+2, r22	; 0x02
    1864:	7b 83       	std	Y+3, r23	; 0x03
    1866:	c9 58       	subi	r28, 0x89	; 137
    1868:	d0 40       	sbci	r29, 0x00	; 0
    186a:	49 ab       	std	Y+49, r20	; 0x31
    186c:	5a ab       	std	Y+50, r21	; 0x32
    186e:	6b ab       	std	Y+51, r22	; 0x33
    1870:	7c ab       	std	Y+52, r23	; 0x34
                     inverseTable[xInd + 1][yInd][zInd][1],
    1872:	44 81       	ldd	r20, Z+4	; 0x04
    1874:	55 81       	ldd	r21, Z+5	; 0x05
    1876:	66 81       	ldd	r22, Z+6	; 0x06
    1878:	77 81       	ldd	r23, Z+7	; 0x07
    187a:	cb 53       	subi	r28, 0x3B	; 59
    187c:	df 4f       	sbci	r29, 0xFF	; 255
    187e:	48 83       	st	Y, r20
    1880:	59 83       	std	Y+1, r21	; 0x01
    1882:	6a 83       	std	Y+2, r22	; 0x02
    1884:	7b 83       	std	Y+3, r23	; 0x03
    1886:	c5 5c       	subi	r28, 0xC5	; 197
    1888:	d0 40       	sbci	r29, 0x00	; 0
                     inverseTable[xInd + 1][yInd][zInd][2]};
    188a:	40 85       	ldd	r20, Z+8	; 0x08
    188c:	51 85       	ldd	r21, Z+9	; 0x09
    188e:	62 85       	ldd	r22, Z+10	; 0x0a
    1890:	73 85       	ldd	r23, Z+11	; 0x0b
    1892:	c7 53       	subi	r28, 0x37	; 55
    1894:	df 4f       	sbci	r29, 0xFF	; 255
    1896:	48 83       	st	Y, r20
    1898:	59 83       	std	Y+1, r21	; 0x01
    189a:	6a 83       	std	Y+2, r22	; 0x02
    189c:	7b 83       	std	Y+3, r23	; 0x03
    189e:	c9 5c       	subi	r28, 0xC9	; 201
    18a0:	d0 40       	sbci	r29, 0x00	; 0
    double ap5[3] = {inverseTable[xInd + 1][yInd][zInd + 1][0],
    18a2:	e3 96       	adiw	r28, 0x33	; 51
    18a4:	ee ad       	ldd	r30, Y+62	; 0x3e
    18a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    18a8:	e3 97       	sbiw	r28, 0x33	; 51
    18aa:	e2 0f       	add	r30, r18
    18ac:	f3 1f       	adc	r31, r19
    18ae:	40 81       	ld	r20, Z
    18b0:	51 81       	ldd	r21, Z+1	; 0x01
    18b2:	62 81       	ldd	r22, Z+2	; 0x02
    18b4:	73 81       	ldd	r23, Z+3	; 0x03
    18b6:	e5 96       	adiw	r28, 0x35	; 53
    18b8:	4c af       	std	Y+60, r20	; 0x3c
    18ba:	5d af       	std	Y+61, r21	; 0x3d
    18bc:	6e af       	std	Y+62, r22	; 0x3e
    18be:	7f af       	std	Y+63, r23	; 0x3f
    18c0:	e5 97       	sbiw	r28, 0x35	; 53
    18c2:	21 96       	adiw	r28, 0x01	; 1
    18c4:	4c af       	std	Y+60, r20	; 0x3c
    18c6:	5d af       	std	Y+61, r21	; 0x3d
    18c8:	6e af       	std	Y+62, r22	; 0x3e
    18ca:	7f af       	std	Y+63, r23	; 0x3f
    18cc:	21 97       	sbiw	r28, 0x01	; 1
                     inverseTable[xInd + 1][yInd][zInd + 1][1],
    18ce:	44 81       	ldd	r20, Z+4	; 0x04
    18d0:	55 81       	ldd	r21, Z+5	; 0x05
    18d2:	66 81       	ldd	r22, Z+6	; 0x06
    18d4:	77 81       	ldd	r23, Z+7	; 0x07
    18d6:	c3 53       	subi	r28, 0x33	; 51
    18d8:	df 4f       	sbci	r29, 0xFF	; 255
    18da:	48 83       	st	Y, r20
    18dc:	59 83       	std	Y+1, r21	; 0x01
    18de:	6a 83       	std	Y+2, r22	; 0x02
    18e0:	7b 83       	std	Y+3, r23	; 0x03
    18e2:	cd 5c       	subi	r28, 0xCD	; 205
    18e4:	d0 40       	sbci	r29, 0x00	; 0
                     inverseTable[xInd + 1][yInd][zInd + 1][2]};
    18e6:	40 85       	ldd	r20, Z+8	; 0x08
    18e8:	51 85       	ldd	r21, Z+9	; 0x09
    18ea:	62 85       	ldd	r22, Z+10	; 0x0a
    18ec:	73 85       	ldd	r23, Z+11	; 0x0b
    18ee:	cf 52       	subi	r28, 0x2F	; 47
    18f0:	df 4f       	sbci	r29, 0xFF	; 255
    18f2:	48 83       	st	Y, r20
    18f4:	59 83       	std	Y+1, r21	; 0x01
    18f6:	6a 83       	std	Y+2, r22	; 0x02
    18f8:	7b 83       	std	Y+3, r23	; 0x03
    18fa:	c1 5d       	subi	r28, 0xD1	; 209
    18fc:	d0 40       	sbci	r29, 0x00	; 0
    double ap6[3] = {inverseTable[xInd + 1][yInd + 1][zInd][0],
    18fe:	f9 01       	movw	r30, r18
    1900:	ea 0f       	add	r30, r26
    1902:	fb 1f       	adc	r31, r27
    1904:	40 81       	ld	r20, Z
    1906:	51 81       	ldd	r21, Z+1	; 0x01
    1908:	62 81       	ldd	r22, Z+2	; 0x02
    190a:	73 81       	ldd	r23, Z+3	; 0x03
    190c:	c3 57       	subi	r28, 0x73	; 115
    190e:	df 4f       	sbci	r29, 0xFF	; 255
    1910:	48 83       	st	Y, r20
    1912:	59 83       	std	Y+1, r21	; 0x01
    1914:	6a 83       	std	Y+2, r22	; 0x02
    1916:	7b 83       	std	Y+3, r23	; 0x03
    1918:	cd 58       	subi	r28, 0x8D	; 141
    191a:	d0 40       	sbci	r29, 0x00	; 0
    191c:	2d 96       	adiw	r28, 0x0d	; 13
    191e:	4c af       	std	Y+60, r20	; 0x3c
    1920:	5d af       	std	Y+61, r21	; 0x3d
    1922:	6e af       	std	Y+62, r22	; 0x3e
    1924:	7f af       	std	Y+63, r23	; 0x3f
    1926:	2d 97       	sbiw	r28, 0x0d	; 13
                     inverseTable[xInd + 1][yInd + 1][zInd][1],
    1928:	44 81       	ldd	r20, Z+4	; 0x04
    192a:	55 81       	ldd	r21, Z+5	; 0x05
    192c:	66 81       	ldd	r22, Z+6	; 0x06
    192e:	77 81       	ldd	r23, Z+7	; 0x07
    1930:	cb 52       	subi	r28, 0x2B	; 43
    1932:	df 4f       	sbci	r29, 0xFF	; 255
    1934:	48 83       	st	Y, r20
    1936:	59 83       	std	Y+1, r21	; 0x01
    1938:	6a 83       	std	Y+2, r22	; 0x02
    193a:	7b 83       	std	Y+3, r23	; 0x03
    193c:	c5 5d       	subi	r28, 0xD5	; 213
    193e:	d0 40       	sbci	r29, 0x00	; 0
                     inverseTable[xInd + 1][yInd + 1][zInd][2]};
    1940:	40 85       	ldd	r20, Z+8	; 0x08
    1942:	51 85       	ldd	r21, Z+9	; 0x09
    1944:	62 85       	ldd	r22, Z+10	; 0x0a
    1946:	73 85       	ldd	r23, Z+11	; 0x0b
    1948:	c7 52       	subi	r28, 0x27	; 39
    194a:	df 4f       	sbci	r29, 0xFF	; 255
    194c:	48 83       	st	Y, r20
    194e:	59 83       	std	Y+1, r21	; 0x01
    1950:	6a 83       	std	Y+2, r22	; 0x02
    1952:	7b 83       	std	Y+3, r23	; 0x03
    1954:	c9 5d       	subi	r28, 0xD9	; 217
    1956:	d0 40       	sbci	r29, 0x00	; 0
    double ap7[3] = {inverseTable[xInd + 1][yInd + 1][zInd + 1][0],
    1958:	e7 96       	adiw	r28, 0x37	; 55
    195a:	ee ad       	ldd	r30, Y+62	; 0x3e
    195c:	ff ad       	ldd	r31, Y+63	; 0x3f
    195e:	e7 97       	sbiw	r28, 0x37	; 55
    1960:	e2 0f       	add	r30, r18
    1962:	f3 1f       	adc	r31, r19
    1964:	40 81       	ld	r20, Z
    1966:	51 81       	ldd	r21, Z+1	; 0x01
    1968:	62 81       	ldd	r22, Z+2	; 0x02
    196a:	73 81       	ldd	r23, Z+3	; 0x03
    196c:	ad 96       	adiw	r28, 0x2d	; 45
    196e:	4c af       	std	Y+60, r20	; 0x3c
    1970:	5d af       	std	Y+61, r21	; 0x3d
    1972:	6e af       	std	Y+62, r22	; 0x3e
    1974:	7f af       	std	Y+63, r23	; 0x3f
    1976:	ad 97       	sbiw	r28, 0x2d	; 45
                     inverseTable[xInd + 1][yInd + 1][zInd + 1][1],
    1978:	44 81       	ldd	r20, Z+4	; 0x04
    197a:	55 81       	ldd	r21, Z+5	; 0x05
    197c:	66 81       	ldd	r22, Z+6	; 0x06
    197e:	77 81       	ldd	r23, Z+7	; 0x07
    1980:	c3 52       	subi	r28, 0x23	; 35
    1982:	df 4f       	sbci	r29, 0xFF	; 255
    1984:	48 83       	st	Y, r20
    1986:	59 83       	std	Y+1, r21	; 0x01
    1988:	6a 83       	std	Y+2, r22	; 0x02
    198a:	7b 83       	std	Y+3, r23	; 0x03
    198c:	cd 5d       	subi	r28, 0xDD	; 221
    198e:	d0 40       	sbci	r29, 0x00	; 0
                     inverseTable[xInd + 1][yInd + 1][zInd + 1][2]};
    1990:	cb 56       	subi	r28, 0x6B	; 107
    1992:	df 4f       	sbci	r29, 0xFF	; 255
    1994:	68 81       	ld	r22, Y
    1996:	79 81       	ldd	r23, Y+1	; 0x01
    1998:	c5 59       	subi	r28, 0x95	; 149
    199a:	d0 40       	sbci	r29, 0x00	; 0
    199c:	86 0f       	add	r24, r22
    199e:	97 1f       	adc	r25, r23
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	c7 56       	subi	r28, 0x67	; 103
    19aa:	df 4f       	sbci	r29, 0xFF	; 255
    19ac:	a8 81       	ld	r26, Y
    19ae:	b9 81       	ldd	r27, Y+1	; 0x01
    19b0:	c9 59       	subi	r28, 0x99	; 153
    19b2:	d0 40       	sbci	r29, 0x00	; 0
    19b4:	8a 0f       	add	r24, r26
    19b6:	9b 1f       	adc	r25, r27
    19b8:	f9 01       	movw	r30, r18
    19ba:	e8 0f       	add	r30, r24
    19bc:	f9 1f       	adc	r31, r25
    19be:	20 85       	ldd	r18, Z+8	; 0x08
    19c0:	31 85       	ldd	r19, Z+9	; 0x09
    19c2:	42 85       	ldd	r20, Z+10	; 0x0a
    19c4:	53 85       	ldd	r21, Z+11	; 0x0b
    19c6:	cf 51       	subi	r28, 0x1F	; 31
    19c8:	df 4f       	sbci	r29, 0xFF	; 255
    19ca:	28 83       	st	Y, r18
    19cc:	39 83       	std	Y+1, r19	; 0x01
    19ce:	4a 83       	std	Y+2, r20	; 0x02
    19d0:	5b 83       	std	Y+3, r21	; 0x03
    19d2:	c1 5e       	subi	r28, 0xE1	; 225
    19d4:	d0 40       	sbci	r29, 0x00	; 0
    int i;
    /* Ideally should iterate i = 0, 1, 2, but can same time by only checking
       i = 0 case. */
    for (i = 0; i < 1; i++)
    {
        if (isnan(ap0[i]) || isnan(ap1[i]) || isnan(ap2[i]) || isnan(ap3[i]) ||
    19d6:	a9 96       	adiw	r28, 0x29	; 41
    19d8:	2c ad       	ldd	r18, Y+60	; 0x3c
    19da:	3d ad       	ldd	r19, Y+61	; 0x3d
    19dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    19de:	5f ad       	ldd	r21, Y+63	; 0x3f
    19e0:	a9 97       	sbiw	r28, 0x29	; 41
    19e2:	ca 01       	movw	r24, r20
    19e4:	b9 01       	movw	r22, r18
    19e6:	03 d7       	rcall	.+3590   	; 0x27ee <__unordsf2>
    19e8:	81 11       	cpse	r24, r1
    19ea:	54 c1       	rjmp	.+680    	; 0x1c94 <lookupAngles+0x888>
    19ec:	4d 85       	ldd	r20, Y+13	; 0x0d
    19ee:	5e 85       	ldd	r21, Y+14	; 0x0e
    19f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    19f2:	78 89       	ldd	r23, Y+16	; 0x10
    19f4:	c7 56       	subi	r28, 0x67	; 103
    19f6:	df 4f       	sbci	r29, 0xFF	; 255
    19f8:	48 83       	st	Y, r20
    19fa:	59 83       	std	Y+1, r21	; 0x01
    19fc:	6a 83       	std	Y+2, r22	; 0x02
    19fe:	7b 83       	std	Y+3, r23	; 0x03
    1a00:	c9 59       	subi	r28, 0x99	; 153
    1a02:	d0 40       	sbci	r29, 0x00	; 0
    1a04:	9a 01       	movw	r18, r20
    1a06:	ab 01       	movw	r20, r22
    1a08:	ca 01       	movw	r24, r20
    1a0a:	b9 01       	movw	r22, r18
    1a0c:	f0 d6       	rcall	.+3552   	; 0x27ee <__unordsf2>
    1a0e:	81 11       	cpse	r24, r1
    1a10:	41 c1       	rjmp	.+642    	; 0x1c94 <lookupAngles+0x888>
    1a12:	69 8d       	ldd	r22, Y+25	; 0x19
    1a14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a1a:	e9 96       	adiw	r28, 0x39	; 57
    1a1c:	6c af       	std	Y+60, r22	; 0x3c
    1a1e:	7d af       	std	Y+61, r23	; 0x3d
    1a20:	8e af       	std	Y+62, r24	; 0x3e
    1a22:	9f af       	std	Y+63, r25	; 0x3f
    1a24:	e9 97       	sbiw	r28, 0x39	; 57
    1a26:	9b 01       	movw	r18, r22
    1a28:	ac 01       	movw	r20, r24
    1a2a:	e1 d6       	rcall	.+3522   	; 0x27ee <__unordsf2>
    1a2c:	81 11       	cpse	r24, r1
    1a2e:	32 c1       	rjmp	.+612    	; 0x1c94 <lookupAngles+0x888>
    1a30:	8d a1       	ldd	r24, Y+37	; 0x25
    1a32:	9e a1       	ldd	r25, Y+38	; 0x26
    1a34:	af a1       	ldd	r26, Y+39	; 0x27
    1a36:	b8 a5       	ldd	r27, Y+40	; 0x28
    1a38:	c3 56       	subi	r28, 0x63	; 99
    1a3a:	df 4f       	sbci	r29, 0xFF	; 255
    1a3c:	88 83       	st	Y, r24
    1a3e:	99 83       	std	Y+1, r25	; 0x01
    1a40:	aa 83       	std	Y+2, r26	; 0x02
    1a42:	bb 83       	std	Y+3, r27	; 0x03
    1a44:	cd 59       	subi	r28, 0x9D	; 157
    1a46:	d0 40       	sbci	r29, 0x00	; 0
    1a48:	9c 01       	movw	r18, r24
    1a4a:	ad 01       	movw	r20, r26
    1a4c:	bc 01       	movw	r22, r24
    1a4e:	cd 01       	movw	r24, r26
    1a50:	ce d6       	rcall	.+3484   	; 0x27ee <__unordsf2>
    1a52:	81 11       	cpse	r24, r1
    1a54:	1f c1       	rjmp	.+574    	; 0x1c94 <lookupAngles+0x888>
            isnan(ap4[i]) || isnan(ap5[i]) || isnan(ap6[i]) || isnan(ap7[i]))
    1a56:	29 a9       	ldd	r18, Y+49	; 0x31
    1a58:	3a a9       	ldd	r19, Y+50	; 0x32
    1a5a:	4b a9       	ldd	r20, Y+51	; 0x33
    1a5c:	5c a9       	ldd	r21, Y+52	; 0x34
    1a5e:	cb 56       	subi	r28, 0x6B	; 107
    1a60:	df 4f       	sbci	r29, 0xFF	; 255
    1a62:	28 83       	st	Y, r18
    1a64:	39 83       	std	Y+1, r19	; 0x01
    1a66:	4a 83       	std	Y+2, r20	; 0x02
    1a68:	5b 83       	std	Y+3, r21	; 0x03
    1a6a:	c5 59       	subi	r28, 0x95	; 149
    1a6c:	d0 40       	sbci	r29, 0x00	; 0
    int i;
    /* Ideally should iterate i = 0, 1, 2, but can same time by only checking
       i = 0 case. */
    for (i = 0; i < 1; i++)
    {
        if (isnan(ap0[i]) || isnan(ap1[i]) || isnan(ap2[i]) || isnan(ap3[i]) ||
    1a6e:	ca 01       	movw	r24, r20
    1a70:	b9 01       	movw	r22, r18
    1a72:	bd d6       	rcall	.+3450   	; 0x27ee <__unordsf2>
    1a74:	81 11       	cpse	r24, r1
    1a76:	0e c1       	rjmp	.+540    	; 0x1c94 <lookupAngles+0x888>
            isnan(ap4[i]) || isnan(ap5[i]) || isnan(ap6[i]) || isnan(ap7[i]))
    1a78:	21 96       	adiw	r28, 0x01	; 1
    1a7a:	4c ad       	ldd	r20, Y+60	; 0x3c
    1a7c:	5d ad       	ldd	r21, Y+61	; 0x3d
    1a7e:	6e ad       	ldd	r22, Y+62	; 0x3e
    1a80:	7f ad       	ldd	r23, Y+63	; 0x3f
    1a82:	21 97       	sbiw	r28, 0x01	; 1
    1a84:	cf 55       	subi	r28, 0x5F	; 95
    1a86:	df 4f       	sbci	r29, 0xFF	; 255
    1a88:	48 83       	st	Y, r20
    1a8a:	59 83       	std	Y+1, r21	; 0x01
    1a8c:	6a 83       	std	Y+2, r22	; 0x02
    1a8e:	7b 83       	std	Y+3, r23	; 0x03
    1a90:	c1 5a       	subi	r28, 0xA1	; 161
    1a92:	d0 40       	sbci	r29, 0x00	; 0
    1a94:	9a 01       	movw	r18, r20
    1a96:	ab 01       	movw	r20, r22
    1a98:	ca 01       	movw	r24, r20
    1a9a:	b9 01       	movw	r22, r18
    1a9c:	a8 d6       	rcall	.+3408   	; 0x27ee <__unordsf2>
    1a9e:	81 11       	cpse	r24, r1
    1aa0:	f9 c0       	rjmp	.+498    	; 0x1c94 <lookupAngles+0x888>
    1aa2:	2d 96       	adiw	r28, 0x0d	; 13
    1aa4:	6c ad       	ldd	r22, Y+60	; 0x3c
    1aa6:	7d ad       	ldd	r23, Y+61	; 0x3d
    1aa8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1aaa:	9f ad       	ldd	r25, Y+63	; 0x3f
    1aac:	2d 97       	sbiw	r28, 0x0d	; 13
    1aae:	a5 96       	adiw	r28, 0x25	; 37
    1ab0:	6c af       	std	Y+60, r22	; 0x3c
    1ab2:	7d af       	std	Y+61, r23	; 0x3d
    1ab4:	8e af       	std	Y+62, r24	; 0x3e
    1ab6:	9f af       	std	Y+63, r25	; 0x3f
    1ab8:	a5 97       	sbiw	r28, 0x25	; 37
    1aba:	9b 01       	movw	r18, r22
    1abc:	ac 01       	movw	r20, r24
    1abe:	97 d6       	rcall	.+3374   	; 0x27ee <__unordsf2>
    1ac0:	81 11       	cpse	r24, r1
    1ac2:	e8 c0       	rjmp	.+464    	; 0x1c94 <lookupAngles+0x888>
    1ac4:	ad 96       	adiw	r28, 0x2d	; 45
    1ac6:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ac8:	3d ad       	ldd	r19, Y+61	; 0x3d
    1aca:	4e ad       	ldd	r20, Y+62	; 0x3e
    1acc:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ace:	ad 97       	sbiw	r28, 0x2d	; 45
    1ad0:	ca 01       	movw	r24, r20
    1ad2:	b9 01       	movw	r22, r18
    1ad4:	8c d6       	rcall	.+3352   	; 0x27ee <__unordsf2>
    1ad6:	81 11       	cpse	r24, r1
    1ad8:	dd c0       	rjmp	.+442    	; 0x1c94 <lookupAngles+0x888>
        {
            valid = 0;
            break;
        }
        if (abs(ap0[i]) < 0.01 || abs(ap1[i]) < 0.01 || abs(ap2[i]) < 0.01 ||
    1ada:	a9 96       	adiw	r28, 0x29	; 41
    1adc:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ade:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ae0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ae2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ae4:	a9 97       	sbiw	r28, 0x29	; 41
    1ae6:	39 d5       	rcall	.+2674   	; 0x255a <__fixsfsi>
    1ae8:	9b 01       	movw	r18, r22
    1aea:	77 23       	and	r23, r23
    1aec:	24 f4       	brge	.+8      	; 0x1af6 <lookupAngles+0x6ea>
    1aee:	22 27       	eor	r18, r18
    1af0:	33 27       	eor	r19, r19
    1af2:	26 1b       	sub	r18, r22
    1af4:	37 0b       	sbc	r19, r23
    1af6:	b9 01       	movw	r22, r18
    1af8:	33 0f       	add	r19, r19
    1afa:	88 0b       	sbc	r24, r24
    1afc:	99 0b       	sbc	r25, r25
    1afe:	60 d5       	rcall	.+2752   	; 0x25c0 <__floatsisf>
    1b00:	2a e0       	ldi	r18, 0x0A	; 10
    1b02:	37 ed       	ldi	r19, 0xD7	; 215
    1b04:	43 e2       	ldi	r20, 0x23	; 35
    1b06:	5c e3       	ldi	r21, 0x3C	; 60
    1b08:	bc d4       	rcall	.+2424   	; 0x2482 <__cmpsf2>
    1b0a:	88 23       	and	r24, r24
    1b0c:	0c f4       	brge	.+2      	; 0x1b10 <lookupAngles+0x704>
    1b0e:	c2 c0       	rjmp	.+388    	; 0x1c94 <lookupAngles+0x888>
    1b10:	c7 56       	subi	r28, 0x67	; 103
    1b12:	df 4f       	sbci	r29, 0xFF	; 255
    1b14:	68 81       	ld	r22, Y
    1b16:	79 81       	ldd	r23, Y+1	; 0x01
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1c:	c9 59       	subi	r28, 0x99	; 153
    1b1e:	d0 40       	sbci	r29, 0x00	; 0
    1b20:	1c d5       	rcall	.+2616   	; 0x255a <__fixsfsi>
    1b22:	9b 01       	movw	r18, r22
    1b24:	77 23       	and	r23, r23
    1b26:	24 f4       	brge	.+8      	; 0x1b30 <lookupAngles+0x724>
    1b28:	22 27       	eor	r18, r18
    1b2a:	33 27       	eor	r19, r19
    1b2c:	26 1b       	sub	r18, r22
    1b2e:	37 0b       	sbc	r19, r23
    1b30:	b9 01       	movw	r22, r18
    1b32:	33 0f       	add	r19, r19
    1b34:	88 0b       	sbc	r24, r24
    1b36:	99 0b       	sbc	r25, r25
    1b38:	43 d5       	rcall	.+2694   	; 0x25c0 <__floatsisf>
    1b3a:	2a e0       	ldi	r18, 0x0A	; 10
    1b3c:	37 ed       	ldi	r19, 0xD7	; 215
    1b3e:	43 e2       	ldi	r20, 0x23	; 35
    1b40:	5c e3       	ldi	r21, 0x3C	; 60
    1b42:	9f d4       	rcall	.+2366   	; 0x2482 <__cmpsf2>
    1b44:	88 23       	and	r24, r24
    1b46:	0c f4       	brge	.+2      	; 0x1b4a <lookupAngles+0x73e>
    1b48:	a5 c0       	rjmp	.+330    	; 0x1c94 <lookupAngles+0x888>
    1b4a:	e9 96       	adiw	r28, 0x39	; 57
    1b4c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b4e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b50:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b52:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b54:	e9 97       	sbiw	r28, 0x39	; 57
    1b56:	01 d5       	rcall	.+2562   	; 0x255a <__fixsfsi>
    1b58:	9b 01       	movw	r18, r22
    1b5a:	77 23       	and	r23, r23
    1b5c:	24 f4       	brge	.+8      	; 0x1b66 <lookupAngles+0x75a>
    1b5e:	22 27       	eor	r18, r18
    1b60:	33 27       	eor	r19, r19
    1b62:	26 1b       	sub	r18, r22
    1b64:	37 0b       	sbc	r19, r23
    1b66:	b9 01       	movw	r22, r18
    1b68:	33 0f       	add	r19, r19
    1b6a:	88 0b       	sbc	r24, r24
    1b6c:	99 0b       	sbc	r25, r25
    1b6e:	28 d5       	rcall	.+2640   	; 0x25c0 <__floatsisf>
    1b70:	2a e0       	ldi	r18, 0x0A	; 10
    1b72:	37 ed       	ldi	r19, 0xD7	; 215
    1b74:	43 e2       	ldi	r20, 0x23	; 35
    1b76:	5c e3       	ldi	r21, 0x3C	; 60
    1b78:	84 d4       	rcall	.+2312   	; 0x2482 <__cmpsf2>
    1b7a:	88 23       	and	r24, r24
    1b7c:	0c f4       	brge	.+2      	; 0x1b80 <lookupAngles+0x774>
    1b7e:	8a c0       	rjmp	.+276    	; 0x1c94 <lookupAngles+0x888>
            abs(ap3[i]) < 0.01 || abs(ap4[i]) < 0.01 || abs(ap5[i]) < 0.01 ||
    1b80:	c3 56       	subi	r28, 0x63	; 99
    1b82:	df 4f       	sbci	r29, 0xFF	; 255
    1b84:	68 81       	ld	r22, Y
    1b86:	79 81       	ldd	r23, Y+1	; 0x01
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8c:	cd 59       	subi	r28, 0x9D	; 157
    1b8e:	d0 40       	sbci	r29, 0x00	; 0
    1b90:	e4 d4       	rcall	.+2504   	; 0x255a <__fixsfsi>
    1b92:	9b 01       	movw	r18, r22
    1b94:	77 23       	and	r23, r23
    1b96:	24 f4       	brge	.+8      	; 0x1ba0 <lookupAngles+0x794>
    1b98:	22 27       	eor	r18, r18
    1b9a:	33 27       	eor	r19, r19
    1b9c:	26 1b       	sub	r18, r22
    1b9e:	37 0b       	sbc	r19, r23
    1ba0:	b9 01       	movw	r22, r18
    1ba2:	33 0f       	add	r19, r19
    1ba4:	88 0b       	sbc	r24, r24
    1ba6:	99 0b       	sbc	r25, r25
    1ba8:	0b d5       	rcall	.+2582   	; 0x25c0 <__floatsisf>
            isnan(ap4[i]) || isnan(ap5[i]) || isnan(ap6[i]) || isnan(ap7[i]))
        {
            valid = 0;
            break;
        }
        if (abs(ap0[i]) < 0.01 || abs(ap1[i]) < 0.01 || abs(ap2[i]) < 0.01 ||
    1baa:	2a e0       	ldi	r18, 0x0A	; 10
    1bac:	37 ed       	ldi	r19, 0xD7	; 215
    1bae:	43 e2       	ldi	r20, 0x23	; 35
    1bb0:	5c e3       	ldi	r21, 0x3C	; 60
    1bb2:	67 d4       	rcall	.+2254   	; 0x2482 <__cmpsf2>
    1bb4:	88 23       	and	r24, r24
    1bb6:	0c f4       	brge	.+2      	; 0x1bba <lookupAngles+0x7ae>
    1bb8:	6d c0       	rjmp	.+218    	; 0x1c94 <lookupAngles+0x888>
            abs(ap3[i]) < 0.01 || abs(ap4[i]) < 0.01 || abs(ap5[i]) < 0.01 ||
    1bba:	cb 56       	subi	r28, 0x6B	; 107
    1bbc:	df 4f       	sbci	r29, 0xFF	; 255
    1bbe:	68 81       	ld	r22, Y
    1bc0:	79 81       	ldd	r23, Y+1	; 0x01
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc6:	c5 59       	subi	r28, 0x95	; 149
    1bc8:	d0 40       	sbci	r29, 0x00	; 0
    1bca:	c7 d4       	rcall	.+2446   	; 0x255a <__fixsfsi>
    1bcc:	9b 01       	movw	r18, r22
    1bce:	77 23       	and	r23, r23
    1bd0:	24 f4       	brge	.+8      	; 0x1bda <lookupAngles+0x7ce>
    1bd2:	22 27       	eor	r18, r18
    1bd4:	33 27       	eor	r19, r19
    1bd6:	26 1b       	sub	r18, r22
    1bd8:	37 0b       	sbc	r19, r23
    1bda:	b9 01       	movw	r22, r18
    1bdc:	33 0f       	add	r19, r19
    1bde:	88 0b       	sbc	r24, r24
    1be0:	99 0b       	sbc	r25, r25
    1be2:	ee d4       	rcall	.+2524   	; 0x25c0 <__floatsisf>
    1be4:	2a e0       	ldi	r18, 0x0A	; 10
    1be6:	37 ed       	ldi	r19, 0xD7	; 215
    1be8:	43 e2       	ldi	r20, 0x23	; 35
    1bea:	5c e3       	ldi	r21, 0x3C	; 60
    1bec:	4a d4       	rcall	.+2196   	; 0x2482 <__cmpsf2>
    1bee:	88 23       	and	r24, r24
    1bf0:	0c f4       	brge	.+2      	; 0x1bf4 <lookupAngles+0x7e8>
    1bf2:	50 c0       	rjmp	.+160    	; 0x1c94 <lookupAngles+0x888>
    1bf4:	cf 55       	subi	r28, 0x5F	; 95
    1bf6:	df 4f       	sbci	r29, 0xFF	; 255
    1bf8:	68 81       	ld	r22, Y
    1bfa:	79 81       	ldd	r23, Y+1	; 0x01
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1c00:	c1 5a       	subi	r28, 0xA1	; 161
    1c02:	d0 40       	sbci	r29, 0x00	; 0
    1c04:	aa d4       	rcall	.+2388   	; 0x255a <__fixsfsi>
    1c06:	9b 01       	movw	r18, r22
    1c08:	77 23       	and	r23, r23
    1c0a:	24 f4       	brge	.+8      	; 0x1c14 <lookupAngles+0x808>
    1c0c:	22 27       	eor	r18, r18
    1c0e:	33 27       	eor	r19, r19
    1c10:	26 1b       	sub	r18, r22
    1c12:	37 0b       	sbc	r19, r23
    1c14:	b9 01       	movw	r22, r18
    1c16:	33 0f       	add	r19, r19
    1c18:	88 0b       	sbc	r24, r24
    1c1a:	99 0b       	sbc	r25, r25
    1c1c:	d1 d4       	rcall	.+2466   	; 0x25c0 <__floatsisf>
    1c1e:	2a e0       	ldi	r18, 0x0A	; 10
    1c20:	37 ed       	ldi	r19, 0xD7	; 215
    1c22:	43 e2       	ldi	r20, 0x23	; 35
    1c24:	5c e3       	ldi	r21, 0x3C	; 60
    1c26:	2d d4       	rcall	.+2138   	; 0x2482 <__cmpsf2>
    1c28:	88 23       	and	r24, r24
    1c2a:	a4 f1       	brlt	.+104    	; 0x1c94 <lookupAngles+0x888>
            abs(ap6[i]) < 0.01 || abs(ap7[i]) < 0.01)
    1c2c:	a5 96       	adiw	r28, 0x25	; 37
    1c2e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c30:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c32:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c34:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c36:	a5 97       	sbiw	r28, 0x25	; 37
    1c38:	90 d4       	rcall	.+2336   	; 0x255a <__fixsfsi>
    1c3a:	9b 01       	movw	r18, r22
    1c3c:	77 23       	and	r23, r23
    1c3e:	24 f4       	brge	.+8      	; 0x1c48 <lookupAngles+0x83c>
    1c40:	22 27       	eor	r18, r18
    1c42:	33 27       	eor	r19, r19
    1c44:	26 1b       	sub	r18, r22
    1c46:	37 0b       	sbc	r19, r23
    1c48:	b9 01       	movw	r22, r18
    1c4a:	33 0f       	add	r19, r19
    1c4c:	88 0b       	sbc	r24, r24
    1c4e:	99 0b       	sbc	r25, r25
    1c50:	b7 d4       	rcall	.+2414   	; 0x25c0 <__floatsisf>
        {
            valid = 0;
            break;
        }
        if (abs(ap0[i]) < 0.01 || abs(ap1[i]) < 0.01 || abs(ap2[i]) < 0.01 ||
            abs(ap3[i]) < 0.01 || abs(ap4[i]) < 0.01 || abs(ap5[i]) < 0.01 ||
    1c52:	2a e0       	ldi	r18, 0x0A	; 10
    1c54:	37 ed       	ldi	r19, 0xD7	; 215
    1c56:	43 e2       	ldi	r20, 0x23	; 35
    1c58:	5c e3       	ldi	r21, 0x3C	; 60
    1c5a:	13 d4       	rcall	.+2086   	; 0x2482 <__cmpsf2>
    1c5c:	88 23       	and	r24, r24
    1c5e:	d4 f0       	brlt	.+52     	; 0x1c94 <lookupAngles+0x888>
            abs(ap6[i]) < 0.01 || abs(ap7[i]) < 0.01)
    1c60:	ad 96       	adiw	r28, 0x2d	; 45
    1c62:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c64:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c66:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c68:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c6a:	ad 97       	sbiw	r28, 0x2d	; 45
    1c6c:	76 d4       	rcall	.+2284   	; 0x255a <__fixsfsi>
    1c6e:	9b 01       	movw	r18, r22
    1c70:	77 23       	and	r23, r23
    1c72:	24 f4       	brge	.+8      	; 0x1c7c <lookupAngles+0x870>
    1c74:	22 27       	eor	r18, r18
    1c76:	33 27       	eor	r19, r19
    1c78:	26 1b       	sub	r18, r22
    1c7a:	37 0b       	sbc	r19, r23
    1c7c:	b9 01       	movw	r22, r18
    1c7e:	33 0f       	add	r19, r19
    1c80:	88 0b       	sbc	r24, r24
    1c82:	99 0b       	sbc	r25, r25
    1c84:	9d d4       	rcall	.+2362   	; 0x25c0 <__floatsisf>
    1c86:	2a e0       	ldi	r18, 0x0A	; 10
    1c88:	37 ed       	ldi	r19, 0xD7	; 215
    1c8a:	43 e2       	ldi	r20, 0x23	; 35
    1c8c:	5c e3       	ldi	r21, 0x3C	; 60
    1c8e:	f9 d3       	rcall	.+2034   	; 0x2482 <__cmpsf2>
    1c90:	88 23       	and	r24, r24
    1c92:	94 f4       	brge	.+36     	; 0x1cb8 <lookupAngles+0x8ac>
            break;
        }
    }
    if (valid == 0)
    {
        angles[0] = NAN;
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	a0 ec       	ldi	r26, 0xC0	; 192
    1c9a:	bf e7       	ldi	r27, 0x7F	; 127
    1c9c:	f1 01       	movw	r30, r2
    1c9e:	80 83       	st	Z, r24
    1ca0:	91 83       	std	Z+1, r25	; 0x01
    1ca2:	a2 83       	std	Z+2, r26	; 0x02
    1ca4:	b3 83       	std	Z+3, r27	; 0x03
        angles[1] = NAN;
    1ca6:	84 83       	std	Z+4, r24	; 0x04
    1ca8:	95 83       	std	Z+5, r25	; 0x05
    1caa:	a6 83       	std	Z+6, r26	; 0x06
    1cac:	b7 83       	std	Z+7, r27	; 0x07
        angles[2] = NAN;
    1cae:	80 87       	std	Z+8, r24	; 0x08
    1cb0:	91 87       	std	Z+9, r25	; 0x09
    1cb2:	a2 87       	std	Z+10, r26	; 0x0a
    1cb4:	b3 87       	std	Z+11, r27	; 0x0b
        return;
    1cb6:	66 c3       	rjmp	.+1740   	; 0x2384 <__stack+0x185>
 * index 'index' from the lookup table.
 */
double indexToPoint(char axis, int index)
{
    if (axis == 'x')
        return X_TABLE_MIN + X_TABLE_RES * index;
    1cb8:	cf 56       	subi	r28, 0x6F	; 111
    1cba:	df 4f       	sbci	r29, 0xFF	; 255
    1cbc:	28 81       	ld	r18, Y
    1cbe:	39 81       	ldd	r19, Y+1	; 0x01
    1cc0:	c1 59       	subi	r28, 0x91	; 145
    1cc2:	d0 40       	sbci	r29, 0x00	; 0
    1cc4:	b9 01       	movw	r22, r18
    1cc6:	33 0f       	add	r19, r19
    1cc8:	88 0b       	sbc	r24, r24
    1cca:	99 0b       	sbc	r25, r25
    1ccc:	79 d4       	rcall	.+2290   	; 0x25c0 <__floatsisf>
    1cce:	9b 01       	movw	r18, r22
    1cd0:	ac 01       	movw	r20, r24
    1cd2:	73 d3       	rcall	.+1766   	; 0x23ba <__addsf3>
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 ee       	ldi	r20, 0xE0	; 224
    1cda:	50 e4       	ldi	r21, 0x40	; 64
    1cdc:	6d d3       	rcall	.+1754   	; 0x23b8 <__subsf3>
    1cde:	9b 01       	movw	r18, r22
    1ce0:	ac 01       	movw	r20, r24
    int yInd = pointToIndex('y', p.y);
    int zInd = pointToIndex('z', p.z);

    /* Third, get the proportion of the distance between adjacent lattice points
       on each of the three axes. */
    double xProp = (p.x - indexToPoint('x', xInd)) / X_TABLE_RES;
    1ce2:	c7 01       	movw	r24, r14
    1ce4:	b6 01       	movw	r22, r12
    1ce6:	68 d3       	rcall	.+1744   	; 0x23b8 <__subsf3>
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	5f e3       	ldi	r21, 0x3F	; 63
    1cf0:	1b d5       	rcall	.+2614   	; 0x2728 <__mulsf3>
    1cf2:	6b 01       	movw	r12, r22
    1cf4:	7c 01       	movw	r14, r24
double indexToPoint(char axis, int index)
{
    if (axis == 'x')
        return X_TABLE_MIN + X_TABLE_RES * index;
    else if (axis == 'y')
        return Y_TABLE_MIN + Y_TABLE_RES * index;
    1cf6:	eb 96       	adiw	r28, 0x3b	; 59
    1cf8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cfa:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cfc:	eb 97       	sbiw	r28, 0x3b	; 59
    1cfe:	ba 01       	movw	r22, r20
    1d00:	55 0f       	add	r21, r21
    1d02:	88 0b       	sbc	r24, r24
    1d04:	99 0b       	sbc	r25, r25
    1d06:	5c d4       	rcall	.+2232   	; 0x25c0 <__floatsisf>
    1d08:	9b 01       	movw	r18, r22
    1d0a:	ac 01       	movw	r20, r24
    1d0c:	56 d3       	rcall	.+1708   	; 0x23ba <__addsf3>
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 ee       	ldi	r20, 0xE0	; 224
    1d14:	50 e4       	ldi	r21, 0x40	; 64
    1d16:	50 d3       	rcall	.+1696   	; 0x23b8 <__subsf3>
    1d18:	9b 01       	movw	r18, r22
    1d1a:	ac 01       	movw	r20, r24
    int zInd = pointToIndex('z', p.z);

    /* Third, get the proportion of the distance between adjacent lattice points
       on each of the three axes. */
    double xProp = (p.x - indexToPoint('x', xInd)) / X_TABLE_RES;
    double yProp = (p.y - indexToPoint('y', yInd)) / Y_TABLE_RES;
    1d1c:	c3 01       	movw	r24, r6
    1d1e:	b2 01       	movw	r22, r4
    1d20:	4b d3       	rcall	.+1686   	; 0x23b8 <__subsf3>
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	5f e3       	ldi	r21, 0x3F	; 63
    1d2a:	fe d4       	rcall	.+2556   	; 0x2728 <__mulsf3>
    1d2c:	a5 96       	adiw	r28, 0x25	; 37
    1d2e:	6c af       	std	Y+60, r22	; 0x3c
    1d30:	7d af       	std	Y+61, r23	; 0x3d
    1d32:	8e af       	std	Y+62, r24	; 0x3e
    1d34:	9f af       	std	Y+63, r25	; 0x3f
    1d36:	a5 97       	sbiw	r28, 0x25	; 37
    if (axis == 'x')
        return X_TABLE_MIN + X_TABLE_RES * index;
    else if (axis == 'y')
        return Y_TABLE_MIN + Y_TABLE_RES * index;
    else if (axis == 'z')
        return Z_TABLE_MIN + Z_TABLE_RES * index;
    1d38:	af 96       	adiw	r28, 0x2f	; 47
    1d3a:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d3c:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d3e:	af 97       	sbiw	r28, 0x2f	; 47
    1d40:	bd 01       	movw	r22, r26
    1d42:	bb 0f       	add	r27, r27
    1d44:	88 0b       	sbc	r24, r24
    1d46:	99 0b       	sbc	r25, r25
    1d48:	3b d4       	rcall	.+2166   	; 0x25c0 <__floatsisf>
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e6       	ldi	r20, 0x60	; 96
    1d50:	51 e4       	ldi	r21, 0x41	; 65
    1d52:	32 d3       	rcall	.+1636   	; 0x23b8 <__subsf3>
    1d54:	9b 01       	movw	r18, r22
    1d56:	ac 01       	movw	r20, r24

    /* Third, get the proportion of the distance between adjacent lattice points
       on each of the three axes. */
    double xProp = (p.x - indexToPoint('x', xInd)) / X_TABLE_RES;
    double yProp = (p.y - indexToPoint('y', yInd)) / Y_TABLE_RES;
    double zProp = (p.z - indexToPoint('z', zInd)) / Z_TABLE_RES;
    1d58:	c5 01       	movw	r24, r10
    1d5a:	b4 01       	movw	r22, r8
    1d5c:	2d d3       	rcall	.+1626   	; 0x23b8 <__subsf3>
    1d5e:	ed 96       	adiw	r28, 0x3d	; 61
    1d60:	6c af       	std	Y+60, r22	; 0x3c
    1d62:	7d af       	std	Y+61, r23	; 0x3d
    1d64:	8e af       	std	Y+62, r24	; 0x3e
    1d66:	9f af       	std	Y+63, r25	; 0x3f
    1d68:	ed 97       	sbiw	r28, 0x3d	; 61
       interpolation the four points
       p10 - average of p0 and p4
       p11 - average of p1 and p5
       p12 - average of p2 and p6
       p13 - average of p3 and p7 */
    double ap10[3] = {(1 - xProp) * ap0[0] + xProp * ap4[0],
    1d6a:	a7 01       	movw	r20, r14
    1d6c:	96 01       	movw	r18, r12
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	70 e0       	ldi	r23, 0x00	; 0
    1d72:	80 e8       	ldi	r24, 0x80	; 128
    1d74:	9f e3       	ldi	r25, 0x3F	; 63
    1d76:	20 d3       	rcall	.+1600   	; 0x23b8 <__subsf3>
    1d78:	2b 01       	movw	r4, r22
    1d7a:	3c 01       	movw	r6, r24

    /* Sixth, collapse the y-axis about point 'p', and approximate by
       interpolation the two points
       p20 - average of p10 and p12
       p21 - average of p11 and p13 */
    double ap20[3] = {(1 - yProp) * ap10[0] + yProp * ap12[0],
    1d7c:	a5 96       	adiw	r28, 0x25	; 37
    1d7e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d80:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d82:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d84:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d86:	a5 97       	sbiw	r28, 0x25	; 37
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	70 e0       	ldi	r23, 0x00	; 0
    1d8c:	80 e8       	ldi	r24, 0x80	; 128
    1d8e:	9f e3       	ldi	r25, 0x3F	; 63
    1d90:	13 d3       	rcall	.+1574   	; 0x23b8 <__subsf3>
    1d92:	e1 96       	adiw	r28, 0x31	; 49
    1d94:	6c af       	std	Y+60, r22	; 0x3c
    1d96:	7d af       	std	Y+61, r23	; 0x3d
    1d98:	8e af       	std	Y+62, r24	; 0x3e
    1d9a:	9f af       	std	Y+63, r25	; 0x3f
    1d9c:	e1 97       	sbiw	r28, 0x31	; 49
    }

    /* Seventh, collapse the z-axis about point 'p', and approximate by
       interpolation the point 'p' (average of p20 and p21). Store the result in
       'angles'. */
    angles[0] = (1 - zProp) * ap20[0] + zProp * ap21[0];
    1d9e:	ed 96       	adiw	r28, 0x3d	; 61
    1da0:	2c ad       	ldd	r18, Y+60	; 0x3c
    1da2:	3d ad       	ldd	r19, Y+61	; 0x3d
    1da4:	4e ad       	ldd	r20, Y+62	; 0x3e
    1da6:	5f ad       	ldd	r21, Y+63	; 0x3f
    1da8:	ed 97       	sbiw	r28, 0x3d	; 61
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	70 e0       	ldi	r23, 0x00	; 0
    1dae:	80 e8       	ldi	r24, 0x80	; 128
    1db0:	9f e3       	ldi	r25, 0x3F	; 63
    1db2:	02 d3       	rcall	.+1540   	; 0x23b8 <__subsf3>
    1db4:	e9 96       	adiw	r28, 0x39	; 57
    1db6:	6c af       	std	Y+60, r22	; 0x3c
    1db8:	7d af       	std	Y+61, r23	; 0x3d
    1dba:	8e af       	std	Y+62, r24	; 0x3e
    1dbc:	9f af       	std	Y+63, r25	; 0x3f
    1dbe:	e9 97       	sbiw	r28, 0x39	; 57
       interpolation the four points
       p10 - average of p0 and p4
       p11 - average of p1 and p5
       p12 - average of p2 and p6
       p13 - average of p3 and p7 */
    double ap10[3] = {(1 - xProp) * ap0[0] + xProp * ap4[0],
    1dc0:	a3 01       	movw	r20, r6
    1dc2:	92 01       	movw	r18, r4
    1dc4:	a9 96       	adiw	r28, 0x29	; 41
    1dc6:	6c ad       	ldd	r22, Y+60	; 0x3c
    1dc8:	7d ad       	ldd	r23, Y+61	; 0x3d
    1dca:	8e ad       	ldd	r24, Y+62	; 0x3e
    1dcc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1dce:	a9 97       	sbiw	r28, 0x29	; 41
    1dd0:	ab d4       	rcall	.+2390   	; 0x2728 <__mulsf3>
    1dd2:	a9 96       	adiw	r28, 0x29	; 41
    1dd4:	6c af       	std	Y+60, r22	; 0x3c
    1dd6:	7d af       	std	Y+61, r23	; 0x3d
    1dd8:	8e af       	std	Y+62, r24	; 0x3e
    1dda:	9f af       	std	Y+63, r25	; 0x3f
    1ddc:	a9 97       	sbiw	r28, 0x29	; 41
    1dde:	c7 57       	subi	r28, 0x77	; 119
    1de0:	df 4f       	sbci	r29, 0xFF	; 255
    1de2:	28 81       	ld	r18, Y
    1de4:	39 81       	ldd	r19, Y+1	; 0x01
    1de6:	4a 81       	ldd	r20, Y+2	; 0x02
    1de8:	5b 81       	ldd	r21, Y+3	; 0x03
    1dea:	c9 58       	subi	r28, 0x89	; 137
    1dec:	d0 40       	sbci	r29, 0x00	; 0
    1dee:	c7 01       	movw	r24, r14
    1df0:	b6 01       	movw	r22, r12
    1df2:	9a d4       	rcall	.+2356   	; 0x2728 <__mulsf3>
    1df4:	9b 01       	movw	r18, r22
    1df6:	ac 01       	movw	r20, r24
    1df8:	a9 96       	adiw	r28, 0x29	; 41
    1dfa:	6c ad       	ldd	r22, Y+60	; 0x3c
    1dfc:	7d ad       	ldd	r23, Y+61	; 0x3d
    1dfe:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e00:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e02:	a9 97       	sbiw	r28, 0x29	; 41
    1e04:	da d2       	rcall	.+1460   	; 0x23ba <__addsf3>

    /* Sixth, collapse the y-axis about point 'p', and approximate by
       interpolation the two points
       p20 - average of p10 and p12
       p21 - average of p11 and p13 */
    double ap20[3] = {(1 - yProp) * ap10[0] + yProp * ap12[0],
    1e06:	e1 96       	adiw	r28, 0x31	; 49
    1e08:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e0a:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e0c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e0e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e10:	e1 97       	sbiw	r28, 0x31	; 49
    1e12:	8a d4       	rcall	.+2324   	; 0x2728 <__mulsf3>
    1e14:	a9 96       	adiw	r28, 0x29	; 41
    1e16:	6c af       	std	Y+60, r22	; 0x3c
    1e18:	7d af       	std	Y+61, r23	; 0x3d
    1e1a:	8e af       	std	Y+62, r24	; 0x3e
    1e1c:	9f af       	std	Y+63, r25	; 0x3f
    1e1e:	a9 97       	sbiw	r28, 0x29	; 41
                      (1 - xProp) * ap0[1] + xProp * ap4[1],
                      (1 - xProp) * ap0[2] + xProp * ap4[2]};
    double ap11[3] = {(1 - xProp) * ap1[0] + xProp * ap5[0],
                      (1 - xProp) * ap1[1] + xProp * ap5[1],
                      (1 - xProp) * ap1[2] + xProp * ap5[2]};
    double ap12[3] = {(1 - xProp) * ap2[0] + xProp * ap6[0],
    1e20:	a3 01       	movw	r20, r6
    1e22:	92 01       	movw	r18, r4
    1e24:	cf 57       	subi	r28, 0x7F	; 127
    1e26:	df 4f       	sbci	r29, 0xFF	; 255
    1e28:	68 81       	ld	r22, Y
    1e2a:	79 81       	ldd	r23, Y+1	; 0x01
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e30:	c1 58       	subi	r28, 0x81	; 129
    1e32:	d0 40       	sbci	r29, 0x00	; 0
    1e34:	79 d4       	rcall	.+2290   	; 0x2728 <__mulsf3>
    1e36:	cf 57       	subi	r28, 0x7F	; 127
    1e38:	df 4f       	sbci	r29, 0xFF	; 255
    1e3a:	68 83       	st	Y, r22
    1e3c:	79 83       	std	Y+1, r23	; 0x01
    1e3e:	8a 83       	std	Y+2, r24	; 0x02
    1e40:	9b 83       	std	Y+3, r25	; 0x03
    1e42:	c1 58       	subi	r28, 0x81	; 129
    1e44:	d0 40       	sbci	r29, 0x00	; 0
    1e46:	c3 57       	subi	r28, 0x73	; 115
    1e48:	df 4f       	sbci	r29, 0xFF	; 255
    1e4a:	28 81       	ld	r18, Y
    1e4c:	39 81       	ldd	r19, Y+1	; 0x01
    1e4e:	4a 81       	ldd	r20, Y+2	; 0x02
    1e50:	5b 81       	ldd	r21, Y+3	; 0x03
    1e52:	cd 58       	subi	r28, 0x8D	; 141
    1e54:	d0 40       	sbci	r29, 0x00	; 0
    1e56:	c7 01       	movw	r24, r14
    1e58:	b6 01       	movw	r22, r12
    1e5a:	66 d4       	rcall	.+2252   	; 0x2728 <__mulsf3>
    1e5c:	9b 01       	movw	r18, r22
    1e5e:	ac 01       	movw	r20, r24
    1e60:	cf 57       	subi	r28, 0x7F	; 127
    1e62:	df 4f       	sbci	r29, 0xFF	; 255
    1e64:	68 81       	ld	r22, Y
    1e66:	79 81       	ldd	r23, Y+1	; 0x01
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6c:	c1 58       	subi	r28, 0x81	; 129
    1e6e:	d0 40       	sbci	r29, 0x00	; 0
    1e70:	a4 d2       	rcall	.+1352   	; 0x23ba <__addsf3>
    1e72:	9b 01       	movw	r18, r22
    1e74:	ac 01       	movw	r20, r24

    /* Sixth, collapse the y-axis about point 'p', and approximate by
       interpolation the two points
       p20 - average of p10 and p12
       p21 - average of p11 and p13 */
    double ap20[3] = {(1 - yProp) * ap10[0] + yProp * ap12[0],
    1e76:	a5 96       	adiw	r28, 0x25	; 37
    1e78:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e7a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e7c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e80:	a5 97       	sbiw	r28, 0x25	; 37
    1e82:	52 d4       	rcall	.+2212   	; 0x2728 <__mulsf3>
    1e84:	9b 01       	movw	r18, r22
    1e86:	ac 01       	movw	r20, r24
    1e88:	a9 96       	adiw	r28, 0x29	; 41
    1e8a:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e8c:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e8e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e90:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e92:	a9 97       	sbiw	r28, 0x29	; 41
    1e94:	92 d2       	rcall	.+1316   	; 0x23ba <__addsf3>
    }

    /* Seventh, collapse the z-axis about point 'p', and approximate by
       interpolation the point 'p' (average of p20 and p21). Store the result in
       'angles'. */
    angles[0] = (1 - zProp) * ap20[0] + zProp * ap21[0];
    1e96:	e9 96       	adiw	r28, 0x39	; 57
    1e98:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e9a:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e9c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e9e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ea0:	e9 97       	sbiw	r28, 0x39	; 57
    1ea2:	42 d4       	rcall	.+2180   	; 0x2728 <__mulsf3>
    1ea4:	a9 96       	adiw	r28, 0x29	; 41
    1ea6:	6c af       	std	Y+60, r22	; 0x3c
    1ea8:	7d af       	std	Y+61, r23	; 0x3d
    1eaa:	8e af       	std	Y+62, r24	; 0x3e
    1eac:	9f af       	std	Y+63, r25	; 0x3f
    1eae:	a9 97       	sbiw	r28, 0x29	; 41
       p12 - average of p2 and p6
       p13 - average of p3 and p7 */
    double ap10[3] = {(1 - xProp) * ap0[0] + xProp * ap4[0],
                      (1 - xProp) * ap0[1] + xProp * ap4[1],
                      (1 - xProp) * ap0[2] + xProp * ap4[2]};
    double ap11[3] = {(1 - xProp) * ap1[0] + xProp * ap5[0],
    1eb0:	a3 01       	movw	r20, r6
    1eb2:	92 01       	movw	r18, r4
    1eb4:	c3 58       	subi	r28, 0x83	; 131
    1eb6:	df 4f       	sbci	r29, 0xFF	; 255
    1eb8:	68 81       	ld	r22, Y
    1eba:	79 81       	ldd	r23, Y+1	; 0x01
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec0:	cd 57       	subi	r28, 0x7D	; 125
    1ec2:	d0 40       	sbci	r29, 0x00	; 0
    1ec4:	31 d4       	rcall	.+2146   	; 0x2728 <__mulsf3>
    1ec6:	c3 58       	subi	r28, 0x83	; 131
    1ec8:	df 4f       	sbci	r29, 0xFF	; 255
    1eca:	68 83       	st	Y, r22
    1ecc:	79 83       	std	Y+1, r23	; 0x01
    1ece:	8a 83       	std	Y+2, r24	; 0x02
    1ed0:	9b 83       	std	Y+3, r25	; 0x03
    1ed2:	cd 57       	subi	r28, 0x7D	; 125
    1ed4:	d0 40       	sbci	r29, 0x00	; 0
    1ed6:	e5 96       	adiw	r28, 0x35	; 53
    1ed8:	2c ad       	ldd	r18, Y+60	; 0x3c
    1eda:	3d ad       	ldd	r19, Y+61	; 0x3d
    1edc:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ede:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ee0:	e5 97       	sbiw	r28, 0x35	; 53
    1ee2:	c7 01       	movw	r24, r14
    1ee4:	b6 01       	movw	r22, r12
    1ee6:	20 d4       	rcall	.+2112   	; 0x2728 <__mulsf3>
    1ee8:	9b 01       	movw	r18, r22
    1eea:	ac 01       	movw	r20, r24
    1eec:	c3 58       	subi	r28, 0x83	; 131
    1eee:	df 4f       	sbci	r29, 0xFF	; 255
    1ef0:	68 81       	ld	r22, Y
    1ef2:	79 81       	ldd	r23, Y+1	; 0x01
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef8:	cd 57       	subi	r28, 0x7D	; 125
    1efa:	d0 40       	sbci	r29, 0x00	; 0
    1efc:	5e d2       	rcall	.+1212   	; 0x23ba <__addsf3>
       p20 - average of p10 and p12
       p21 - average of p11 and p13 */
    double ap20[3] = {(1 - yProp) * ap10[0] + yProp * ap12[0],
                      (1 - yProp) * ap10[1] + yProp * ap12[1],
                      (1 - yProp) * ap10[2] + yProp * ap12[2]};
    double ap21[3] = {(1 - yProp) * ap11[0] + yProp * ap13[0],
    1efe:	e1 96       	adiw	r28, 0x31	; 49
    1f00:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f02:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f04:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f06:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f08:	e1 97       	sbiw	r28, 0x31	; 49
    1f0a:	0e d4       	rcall	.+2076   	; 0x2728 <__mulsf3>
    1f0c:	e5 96       	adiw	r28, 0x35	; 53
    1f0e:	6c af       	std	Y+60, r22	; 0x3c
    1f10:	7d af       	std	Y+61, r23	; 0x3d
    1f12:	8e af       	std	Y+62, r24	; 0x3e
    1f14:	9f af       	std	Y+63, r25	; 0x3f
    1f16:	e5 97       	sbiw	r28, 0x35	; 53
                      (1 - xProp) * ap1[1] + xProp * ap5[1],
                      (1 - xProp) * ap1[2] + xProp * ap5[2]};
    double ap12[3] = {(1 - xProp) * ap2[0] + xProp * ap6[0],
                      (1 - xProp) * ap2[1] + xProp * ap6[1],
                      (1 - xProp) * ap2[2] + xProp * ap6[2]};
    double ap13[3] = {(1 - xProp) * ap3[0] + xProp * ap7[0],
    1f18:	a3 01       	movw	r20, r6
    1f1a:	92 01       	movw	r18, r4
    1f1c:	cb 57       	subi	r28, 0x7B	; 123
    1f1e:	df 4f       	sbci	r29, 0xFF	; 255
    1f20:	68 81       	ld	r22, Y
    1f22:	79 81       	ldd	r23, Y+1	; 0x01
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	9b 81       	ldd	r25, Y+3	; 0x03
    1f28:	c5 58       	subi	r28, 0x85	; 133
    1f2a:	d0 40       	sbci	r29, 0x00	; 0
    1f2c:	fd d3       	rcall	.+2042   	; 0x2728 <__mulsf3>
    1f2e:	c3 58       	subi	r28, 0x83	; 131
    1f30:	df 4f       	sbci	r29, 0xFF	; 255
    1f32:	68 83       	st	Y, r22
    1f34:	79 83       	std	Y+1, r23	; 0x01
    1f36:	8a 83       	std	Y+2, r24	; 0x02
    1f38:	9b 83       	std	Y+3, r25	; 0x03
    1f3a:	cd 57       	subi	r28, 0x7D	; 125
    1f3c:	d0 40       	sbci	r29, 0x00	; 0
    1f3e:	ad 96       	adiw	r28, 0x2d	; 45
    1f40:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f42:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f44:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f46:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f48:	ad 97       	sbiw	r28, 0x2d	; 45
    1f4a:	c7 01       	movw	r24, r14
    1f4c:	b6 01       	movw	r22, r12
    1f4e:	ec d3       	rcall	.+2008   	; 0x2728 <__mulsf3>
    1f50:	9b 01       	movw	r18, r22
    1f52:	ac 01       	movw	r20, r24
    1f54:	c3 58       	subi	r28, 0x83	; 131
    1f56:	df 4f       	sbci	r29, 0xFF	; 255
    1f58:	68 81       	ld	r22, Y
    1f5a:	79 81       	ldd	r23, Y+1	; 0x01
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f60:	cd 57       	subi	r28, 0x7D	; 125
    1f62:	d0 40       	sbci	r29, 0x00	; 0
    1f64:	2a d2       	rcall	.+1108   	; 0x23ba <__addsf3>
    1f66:	9b 01       	movw	r18, r22
    1f68:	ac 01       	movw	r20, r24
       p20 - average of p10 and p12
       p21 - average of p11 and p13 */
    double ap20[3] = {(1 - yProp) * ap10[0] + yProp * ap12[0],
                      (1 - yProp) * ap10[1] + yProp * ap12[1],
                      (1 - yProp) * ap10[2] + yProp * ap12[2]};
    double ap21[3] = {(1 - yProp) * ap11[0] + yProp * ap13[0],
    1f6a:	a5 96       	adiw	r28, 0x25	; 37
    1f6c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f6e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f70:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f72:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f74:	a5 97       	sbiw	r28, 0x25	; 37
    1f76:	d8 d3       	rcall	.+1968   	; 0x2728 <__mulsf3>
    1f78:	9b 01       	movw	r18, r22
    1f7a:	ac 01       	movw	r20, r24
    1f7c:	e5 96       	adiw	r28, 0x35	; 53
    1f7e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f80:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f82:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f84:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f86:	e5 97       	sbiw	r28, 0x35	; 53
    1f88:	18 d2       	rcall	.+1072   	; 0x23ba <__addsf3>
    1f8a:	9b 01       	movw	r18, r22
    1f8c:	ac 01       	movw	r20, r24
    }

    /* Seventh, collapse the z-axis about point 'p', and approximate by
       interpolation the point 'p' (average of p20 and p21). Store the result in
       'angles'. */
    angles[0] = (1 - zProp) * ap20[0] + zProp * ap21[0];
    1f8e:	ed 96       	adiw	r28, 0x3d	; 61
    1f90:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f92:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f94:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f96:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f98:	ed 97       	sbiw	r28, 0x3d	; 61
    1f9a:	c6 d3       	rcall	.+1932   	; 0x2728 <__mulsf3>
    1f9c:	9b 01       	movw	r18, r22
    1f9e:	ac 01       	movw	r20, r24
    1fa0:	a9 96       	adiw	r28, 0x29	; 41
    1fa2:	6c ad       	ldd	r22, Y+60	; 0x3c
    1fa4:	7d ad       	ldd	r23, Y+61	; 0x3d
    1fa6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fa8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1faa:	a9 97       	sbiw	r28, 0x29	; 41
    1fac:	06 d2       	rcall	.+1036   	; 0x23ba <__addsf3>
    1fae:	f1 01       	movw	r30, r2
    1fb0:	60 83       	st	Z, r22
    1fb2:	71 83       	std	Z+1, r23	; 0x01
    1fb4:	82 83       	std	Z+2, r24	; 0x02
    1fb6:	93 83       	std	Z+3, r25	; 0x03
       p10 - average of p0 and p4
       p11 - average of p1 and p5
       p12 - average of p2 and p6
       p13 - average of p3 and p7 */
    double ap10[3] = {(1 - xProp) * ap0[0] + xProp * ap4[0],
                      (1 - xProp) * ap0[1] + xProp * ap4[1],
    1fb8:	a3 01       	movw	r20, r6
    1fba:	92 01       	movw	r18, r4
    1fbc:	cb 55       	subi	r28, 0x5B	; 91
    1fbe:	df 4f       	sbci	r29, 0xFF	; 255
    1fc0:	68 81       	ld	r22, Y
    1fc2:	79 81       	ldd	r23, Y+1	; 0x01
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc8:	c5 5a       	subi	r28, 0xA5	; 165
    1fca:	d0 40       	sbci	r29, 0x00	; 0
    1fcc:	ad d3       	rcall	.+1882   	; 0x2728 <__mulsf3>
    1fce:	a9 96       	adiw	r28, 0x29	; 41
    1fd0:	6c af       	std	Y+60, r22	; 0x3c
    1fd2:	7d af       	std	Y+61, r23	; 0x3d
    1fd4:	8e af       	std	Y+62, r24	; 0x3e
    1fd6:	9f af       	std	Y+63, r25	; 0x3f
    1fd8:	a9 97       	sbiw	r28, 0x29	; 41
    1fda:	cb 53       	subi	r28, 0x3B	; 59
    1fdc:	df 4f       	sbci	r29, 0xFF	; 255
    1fde:	28 81       	ld	r18, Y
    1fe0:	39 81       	ldd	r19, Y+1	; 0x01
    1fe2:	4a 81       	ldd	r20, Y+2	; 0x02
    1fe4:	5b 81       	ldd	r21, Y+3	; 0x03
    1fe6:	c5 5c       	subi	r28, 0xC5	; 197
    1fe8:	d0 40       	sbci	r29, 0x00	; 0
    1fea:	c7 01       	movw	r24, r14
    1fec:	b6 01       	movw	r22, r12
    1fee:	9c d3       	rcall	.+1848   	; 0x2728 <__mulsf3>
    1ff0:	9b 01       	movw	r18, r22
    1ff2:	ac 01       	movw	r20, r24
    1ff4:	a9 96       	adiw	r28, 0x29	; 41
    1ff6:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ff8:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ffa:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ffc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ffe:	a9 97       	sbiw	r28, 0x29	; 41
    2000:	dc d1       	rcall	.+952    	; 0x23ba <__addsf3>
    /* Sixth, collapse the y-axis about point 'p', and approximate by
       interpolation the two points
       p20 - average of p10 and p12
       p21 - average of p11 and p13 */
    double ap20[3] = {(1 - yProp) * ap10[0] + yProp * ap12[0],
                      (1 - yProp) * ap10[1] + yProp * ap12[1],
    2002:	e1 96       	adiw	r28, 0x31	; 49
    2004:	2c ad       	ldd	r18, Y+60	; 0x3c
    2006:	3d ad       	ldd	r19, Y+61	; 0x3d
    2008:	4e ad       	ldd	r20, Y+62	; 0x3e
    200a:	5f ad       	ldd	r21, Y+63	; 0x3f
    200c:	e1 97       	sbiw	r28, 0x31	; 49
    200e:	8c d3       	rcall	.+1816   	; 0x2728 <__mulsf3>
    2010:	a9 96       	adiw	r28, 0x29	; 41
    2012:	6c af       	std	Y+60, r22	; 0x3c
    2014:	7d af       	std	Y+61, r23	; 0x3d
    2016:	8e af       	std	Y+62, r24	; 0x3e
    2018:	9f af       	std	Y+63, r25	; 0x3f
    201a:	a9 97       	sbiw	r28, 0x29	; 41
                      (1 - xProp) * ap0[2] + xProp * ap4[2]};
    double ap11[3] = {(1 - xProp) * ap1[0] + xProp * ap5[0],
                      (1 - xProp) * ap1[1] + xProp * ap5[1],
                      (1 - xProp) * ap1[2] + xProp * ap5[2]};
    double ap12[3] = {(1 - xProp) * ap2[0] + xProp * ap6[0],
                      (1 - xProp) * ap2[1] + xProp * ap6[1],
    201c:	a3 01       	movw	r20, r6
    201e:	92 01       	movw	r18, r4
    2020:	cb 54       	subi	r28, 0x4B	; 75
    2022:	df 4f       	sbci	r29, 0xFF	; 255
    2024:	68 81       	ld	r22, Y
    2026:	79 81       	ldd	r23, Y+1	; 0x01
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	9b 81       	ldd	r25, Y+3	; 0x03
    202c:	c5 5b       	subi	r28, 0xB5	; 181
    202e:	d0 40       	sbci	r29, 0x00	; 0
    2030:	7b d3       	rcall	.+1782   	; 0x2728 <__mulsf3>
    2032:	ad 96       	adiw	r28, 0x2d	; 45
    2034:	6c af       	std	Y+60, r22	; 0x3c
    2036:	7d af       	std	Y+61, r23	; 0x3d
    2038:	8e af       	std	Y+62, r24	; 0x3e
    203a:	9f af       	std	Y+63, r25	; 0x3f
    203c:	ad 97       	sbiw	r28, 0x2d	; 45
    203e:	cb 52       	subi	r28, 0x2B	; 43
    2040:	df 4f       	sbci	r29, 0xFF	; 255
    2042:	28 81       	ld	r18, Y
    2044:	39 81       	ldd	r19, Y+1	; 0x01
    2046:	4a 81       	ldd	r20, Y+2	; 0x02
    2048:	5b 81       	ldd	r21, Y+3	; 0x03
    204a:	c5 5d       	subi	r28, 0xD5	; 213
    204c:	d0 40       	sbci	r29, 0x00	; 0
    204e:	c7 01       	movw	r24, r14
    2050:	b6 01       	movw	r22, r12
    2052:	6a d3       	rcall	.+1748   	; 0x2728 <__mulsf3>
    2054:	9b 01       	movw	r18, r22
    2056:	ac 01       	movw	r20, r24
    2058:	ad 96       	adiw	r28, 0x2d	; 45
    205a:	6c ad       	ldd	r22, Y+60	; 0x3c
    205c:	7d ad       	ldd	r23, Y+61	; 0x3d
    205e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2060:	9f ad       	ldd	r25, Y+63	; 0x3f
    2062:	ad 97       	sbiw	r28, 0x2d	; 45
    2064:	aa d1       	rcall	.+852    	; 0x23ba <__addsf3>
    2066:	9b 01       	movw	r18, r22
    2068:	ac 01       	movw	r20, r24
    /* Sixth, collapse the y-axis about point 'p', and approximate by
       interpolation the two points
       p20 - average of p10 and p12
       p21 - average of p11 and p13 */
    double ap20[3] = {(1 - yProp) * ap10[0] + yProp * ap12[0],
                      (1 - yProp) * ap10[1] + yProp * ap12[1],
    206a:	a5 96       	adiw	r28, 0x25	; 37
    206c:	6c ad       	ldd	r22, Y+60	; 0x3c
    206e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2070:	8e ad       	ldd	r24, Y+62	; 0x3e
    2072:	9f ad       	ldd	r25, Y+63	; 0x3f
    2074:	a5 97       	sbiw	r28, 0x25	; 37
    2076:	58 d3       	rcall	.+1712   	; 0x2728 <__mulsf3>
    2078:	9b 01       	movw	r18, r22
    207a:	ac 01       	movw	r20, r24
    207c:	a9 96       	adiw	r28, 0x29	; 41
    207e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2080:	7d ad       	ldd	r23, Y+61	; 0x3d
    2082:	8e ad       	ldd	r24, Y+62	; 0x3e
    2084:	9f ad       	ldd	r25, Y+63	; 0x3f
    2086:	a9 97       	sbiw	r28, 0x29	; 41
    2088:	98 d1       	rcall	.+816    	; 0x23ba <__addsf3>

    /* Seventh, collapse the z-axis about point 'p', and approximate by
       interpolation the point 'p' (average of p20 and p21). Store the result in
       'angles'. */
    angles[0] = (1 - zProp) * ap20[0] + zProp * ap21[0];
    angles[1] = (1 - zProp) * ap20[1] + zProp * ap21[1];
    208a:	e9 96       	adiw	r28, 0x39	; 57
    208c:	2c ad       	ldd	r18, Y+60	; 0x3c
    208e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2090:	4e ad       	ldd	r20, Y+62	; 0x3e
    2092:	5f ad       	ldd	r21, Y+63	; 0x3f
    2094:	e9 97       	sbiw	r28, 0x39	; 57
    2096:	48 d3       	rcall	.+1680   	; 0x2728 <__mulsf3>
    2098:	a9 96       	adiw	r28, 0x29	; 41
    209a:	6c af       	std	Y+60, r22	; 0x3c
    209c:	7d af       	std	Y+61, r23	; 0x3d
    209e:	8e af       	std	Y+62, r24	; 0x3e
    20a0:	9f af       	std	Y+63, r25	; 0x3f
    20a2:	a9 97       	sbiw	r28, 0x29	; 41
       p13 - average of p3 and p7 */
    double ap10[3] = {(1 - xProp) * ap0[0] + xProp * ap4[0],
                      (1 - xProp) * ap0[1] + xProp * ap4[1],
                      (1 - xProp) * ap0[2] + xProp * ap4[2]};
    double ap11[3] = {(1 - xProp) * ap1[0] + xProp * ap5[0],
                      (1 - xProp) * ap1[1] + xProp * ap5[1],
    20a4:	a3 01       	movw	r20, r6
    20a6:	92 01       	movw	r18, r4
    20a8:	c3 55       	subi	r28, 0x53	; 83
    20aa:	df 4f       	sbci	r29, 0xFF	; 255
    20ac:	68 81       	ld	r22, Y
    20ae:	79 81       	ldd	r23, Y+1	; 0x01
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	9b 81       	ldd	r25, Y+3	; 0x03
    20b4:	cd 5a       	subi	r28, 0xAD	; 173
    20b6:	d0 40       	sbci	r29, 0x00	; 0
    20b8:	37 d3       	rcall	.+1646   	; 0x2728 <__mulsf3>
    20ba:	ad 96       	adiw	r28, 0x2d	; 45
    20bc:	6c af       	std	Y+60, r22	; 0x3c
    20be:	7d af       	std	Y+61, r23	; 0x3d
    20c0:	8e af       	std	Y+62, r24	; 0x3e
    20c2:	9f af       	std	Y+63, r25	; 0x3f
    20c4:	ad 97       	sbiw	r28, 0x2d	; 45
    20c6:	c3 53       	subi	r28, 0x33	; 51
    20c8:	df 4f       	sbci	r29, 0xFF	; 255
    20ca:	28 81       	ld	r18, Y
    20cc:	39 81       	ldd	r19, Y+1	; 0x01
    20ce:	4a 81       	ldd	r20, Y+2	; 0x02
    20d0:	5b 81       	ldd	r21, Y+3	; 0x03
    20d2:	cd 5c       	subi	r28, 0xCD	; 205
    20d4:	d0 40       	sbci	r29, 0x00	; 0
    20d6:	c7 01       	movw	r24, r14
    20d8:	b6 01       	movw	r22, r12
    20da:	26 d3       	rcall	.+1612   	; 0x2728 <__mulsf3>
    20dc:	9b 01       	movw	r18, r22
    20de:	ac 01       	movw	r20, r24
    20e0:	ad 96       	adiw	r28, 0x2d	; 45
    20e2:	6c ad       	ldd	r22, Y+60	; 0x3c
    20e4:	7d ad       	ldd	r23, Y+61	; 0x3d
    20e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    20e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    20ea:	ad 97       	sbiw	r28, 0x2d	; 45
    20ec:	66 d1       	rcall	.+716    	; 0x23ba <__addsf3>
       p21 - average of p11 and p13 */
    double ap20[3] = {(1 - yProp) * ap10[0] + yProp * ap12[0],
                      (1 - yProp) * ap10[1] + yProp * ap12[1],
                      (1 - yProp) * ap10[2] + yProp * ap12[2]};
    double ap21[3] = {(1 - yProp) * ap11[0] + yProp * ap13[0],
                      (1 - yProp) * ap11[1] + yProp * ap13[1],
    20ee:	e1 96       	adiw	r28, 0x31	; 49
    20f0:	2c ad       	ldd	r18, Y+60	; 0x3c
    20f2:	3d ad       	ldd	r19, Y+61	; 0x3d
    20f4:	4e ad       	ldd	r20, Y+62	; 0x3e
    20f6:	5f ad       	ldd	r21, Y+63	; 0x3f
    20f8:	e1 97       	sbiw	r28, 0x31	; 49
    20fa:	16 d3       	rcall	.+1580   	; 0x2728 <__mulsf3>
    20fc:	ad 96       	adiw	r28, 0x2d	; 45
    20fe:	6c af       	std	Y+60, r22	; 0x3c
    2100:	7d af       	std	Y+61, r23	; 0x3d
    2102:	8e af       	std	Y+62, r24	; 0x3e
    2104:	9f af       	std	Y+63, r25	; 0x3f
    2106:	ad 97       	sbiw	r28, 0x2d	; 45
                      (1 - xProp) * ap1[2] + xProp * ap5[2]};
    double ap12[3] = {(1 - xProp) * ap2[0] + xProp * ap6[0],
                      (1 - xProp) * ap2[1] + xProp * ap6[1],
                      (1 - xProp) * ap2[2] + xProp * ap6[2]};
    double ap13[3] = {(1 - xProp) * ap3[0] + xProp * ap7[0],
                      (1 - xProp) * ap3[1] + xProp * ap7[1],
    2108:	a3 01       	movw	r20, r6
    210a:	92 01       	movw	r18, r4
    210c:	c3 54       	subi	r28, 0x43	; 67
    210e:	df 4f       	sbci	r29, 0xFF	; 255
    2110:	68 81       	ld	r22, Y
    2112:	79 81       	ldd	r23, Y+1	; 0x01
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	9b 81       	ldd	r25, Y+3	; 0x03
    2118:	cd 5b       	subi	r28, 0xBD	; 189
    211a:	d0 40       	sbci	r29, 0x00	; 0
    211c:	05 d3       	rcall	.+1546   	; 0x2728 <__mulsf3>
    211e:	e5 96       	adiw	r28, 0x35	; 53
    2120:	6c af       	std	Y+60, r22	; 0x3c
    2122:	7d af       	std	Y+61, r23	; 0x3d
    2124:	8e af       	std	Y+62, r24	; 0x3e
    2126:	9f af       	std	Y+63, r25	; 0x3f
    2128:	e5 97       	sbiw	r28, 0x35	; 53
    212a:	c3 52       	subi	r28, 0x23	; 35
    212c:	df 4f       	sbci	r29, 0xFF	; 255
    212e:	28 81       	ld	r18, Y
    2130:	39 81       	ldd	r19, Y+1	; 0x01
    2132:	4a 81       	ldd	r20, Y+2	; 0x02
    2134:	5b 81       	ldd	r21, Y+3	; 0x03
    2136:	cd 5d       	subi	r28, 0xDD	; 221
    2138:	d0 40       	sbci	r29, 0x00	; 0
    213a:	c7 01       	movw	r24, r14
    213c:	b6 01       	movw	r22, r12
    213e:	f4 d2       	rcall	.+1512   	; 0x2728 <__mulsf3>
    2140:	9b 01       	movw	r18, r22
    2142:	ac 01       	movw	r20, r24
    2144:	e5 96       	adiw	r28, 0x35	; 53
    2146:	6c ad       	ldd	r22, Y+60	; 0x3c
    2148:	7d ad       	ldd	r23, Y+61	; 0x3d
    214a:	8e ad       	ldd	r24, Y+62	; 0x3e
    214c:	9f ad       	ldd	r25, Y+63	; 0x3f
    214e:	e5 97       	sbiw	r28, 0x35	; 53
    2150:	34 d1       	rcall	.+616    	; 0x23ba <__addsf3>
    2152:	9b 01       	movw	r18, r22
    2154:	ac 01       	movw	r20, r24
       p21 - average of p11 and p13 */
    double ap20[3] = {(1 - yProp) * ap10[0] + yProp * ap12[0],
                      (1 - yProp) * ap10[1] + yProp * ap12[1],
                      (1 - yProp) * ap10[2] + yProp * ap12[2]};
    double ap21[3] = {(1 - yProp) * ap11[0] + yProp * ap13[0],
                      (1 - yProp) * ap11[1] + yProp * ap13[1],
    2156:	a5 96       	adiw	r28, 0x25	; 37
    2158:	6c ad       	ldd	r22, Y+60	; 0x3c
    215a:	7d ad       	ldd	r23, Y+61	; 0x3d
    215c:	8e ad       	ldd	r24, Y+62	; 0x3e
    215e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2160:	a5 97       	sbiw	r28, 0x25	; 37
    2162:	e2 d2       	rcall	.+1476   	; 0x2728 <__mulsf3>
    2164:	9b 01       	movw	r18, r22
    2166:	ac 01       	movw	r20, r24
    2168:	ad 96       	adiw	r28, 0x2d	; 45
    216a:	6c ad       	ldd	r22, Y+60	; 0x3c
    216c:	7d ad       	ldd	r23, Y+61	; 0x3d
    216e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2170:	9f ad       	ldd	r25, Y+63	; 0x3f
    2172:	ad 97       	sbiw	r28, 0x2d	; 45
    2174:	22 d1       	rcall	.+580    	; 0x23ba <__addsf3>
    2176:	9b 01       	movw	r18, r22
    2178:	ac 01       	movw	r20, r24

    /* Seventh, collapse the z-axis about point 'p', and approximate by
       interpolation the point 'p' (average of p20 and p21). Store the result in
       'angles'. */
    angles[0] = (1 - zProp) * ap20[0] + zProp * ap21[0];
    angles[1] = (1 - zProp) * ap20[1] + zProp * ap21[1];
    217a:	ed 96       	adiw	r28, 0x3d	; 61
    217c:	6c ad       	ldd	r22, Y+60	; 0x3c
    217e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2180:	8e ad       	ldd	r24, Y+62	; 0x3e
    2182:	9f ad       	ldd	r25, Y+63	; 0x3f
    2184:	ed 97       	sbiw	r28, 0x3d	; 61
    2186:	d0 d2       	rcall	.+1440   	; 0x2728 <__mulsf3>
    2188:	9b 01       	movw	r18, r22
    218a:	ac 01       	movw	r20, r24
    218c:	a9 96       	adiw	r28, 0x29	; 41
    218e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2190:	7d ad       	ldd	r23, Y+61	; 0x3d
    2192:	8e ad       	ldd	r24, Y+62	; 0x3e
    2194:	9f ad       	ldd	r25, Y+63	; 0x3f
    2196:	a9 97       	sbiw	r28, 0x29	; 41
    2198:	10 d1       	rcall	.+544    	; 0x23ba <__addsf3>
    219a:	d1 01       	movw	r26, r2
    219c:	14 96       	adiw	r26, 0x04	; 4
    219e:	6d 93       	st	X+, r22
    21a0:	7d 93       	st	X+, r23
    21a2:	8d 93       	st	X+, r24
    21a4:	9c 93       	st	X, r25
    21a6:	17 97       	sbiw	r26, 0x07	; 7
       p11 - average of p1 and p5
       p12 - average of p2 and p6
       p13 - average of p3 and p7 */
    double ap10[3] = {(1 - xProp) * ap0[0] + xProp * ap4[0],
                      (1 - xProp) * ap0[1] + xProp * ap4[1],
                      (1 - xProp) * ap0[2] + xProp * ap4[2]};
    21a8:	a3 01       	movw	r20, r6
    21aa:	92 01       	movw	r18, r4
    21ac:	c7 55       	subi	r28, 0x57	; 87
    21ae:	df 4f       	sbci	r29, 0xFF	; 255
    21b0:	68 81       	ld	r22, Y
    21b2:	79 81       	ldd	r23, Y+1	; 0x01
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	9b 81       	ldd	r25, Y+3	; 0x03
    21b8:	c9 5a       	subi	r28, 0xA9	; 169
    21ba:	d0 40       	sbci	r29, 0x00	; 0
    21bc:	b5 d2       	rcall	.+1386   	; 0x2728 <__mulsf3>
    21be:	a9 96       	adiw	r28, 0x29	; 41
    21c0:	6c af       	std	Y+60, r22	; 0x3c
    21c2:	7d af       	std	Y+61, r23	; 0x3d
    21c4:	8e af       	std	Y+62, r24	; 0x3e
    21c6:	9f af       	std	Y+63, r25	; 0x3f
    21c8:	a9 97       	sbiw	r28, 0x29	; 41
    21ca:	c7 53       	subi	r28, 0x37	; 55
    21cc:	df 4f       	sbci	r29, 0xFF	; 255
    21ce:	28 81       	ld	r18, Y
    21d0:	39 81       	ldd	r19, Y+1	; 0x01
    21d2:	4a 81       	ldd	r20, Y+2	; 0x02
    21d4:	5b 81       	ldd	r21, Y+3	; 0x03
    21d6:	c9 5c       	subi	r28, 0xC9	; 201
    21d8:	d0 40       	sbci	r29, 0x00	; 0
    21da:	c7 01       	movw	r24, r14
    21dc:	b6 01       	movw	r22, r12
    21de:	a4 d2       	rcall	.+1352   	; 0x2728 <__mulsf3>
    21e0:	9b 01       	movw	r18, r22
    21e2:	ac 01       	movw	r20, r24
    21e4:	a9 96       	adiw	r28, 0x29	; 41
    21e6:	6c ad       	ldd	r22, Y+60	; 0x3c
    21e8:	7d ad       	ldd	r23, Y+61	; 0x3d
    21ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    21ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    21ee:	a9 97       	sbiw	r28, 0x29	; 41
    21f0:	e4 d0       	rcall	.+456    	; 0x23ba <__addsf3>
       interpolation the two points
       p20 - average of p10 and p12
       p21 - average of p11 and p13 */
    double ap20[3] = {(1 - yProp) * ap10[0] + yProp * ap12[0],
                      (1 - yProp) * ap10[1] + yProp * ap12[1],
                      (1 - yProp) * ap10[2] + yProp * ap12[2]};
    21f2:	e1 96       	adiw	r28, 0x31	; 49
    21f4:	2c ad       	ldd	r18, Y+60	; 0x3c
    21f6:	3d ad       	ldd	r19, Y+61	; 0x3d
    21f8:	4e ad       	ldd	r20, Y+62	; 0x3e
    21fa:	5f ad       	ldd	r21, Y+63	; 0x3f
    21fc:	e1 97       	sbiw	r28, 0x31	; 49
    21fe:	94 d2       	rcall	.+1320   	; 0x2728 <__mulsf3>
    2200:	a9 96       	adiw	r28, 0x29	; 41
    2202:	6c af       	std	Y+60, r22	; 0x3c
    2204:	7d af       	std	Y+61, r23	; 0x3d
    2206:	8e af       	std	Y+62, r24	; 0x3e
    2208:	9f af       	std	Y+63, r25	; 0x3f
    220a:	a9 97       	sbiw	r28, 0x29	; 41
    double ap11[3] = {(1 - xProp) * ap1[0] + xProp * ap5[0],
                      (1 - xProp) * ap1[1] + xProp * ap5[1],
                      (1 - xProp) * ap1[2] + xProp * ap5[2]};
    double ap12[3] = {(1 - xProp) * ap2[0] + xProp * ap6[0],
                      (1 - xProp) * ap2[1] + xProp * ap6[1],
                      (1 - xProp) * ap2[2] + xProp * ap6[2]};
    220c:	a3 01       	movw	r20, r6
    220e:	92 01       	movw	r18, r4
    2210:	c7 54       	subi	r28, 0x47	; 71
    2212:	df 4f       	sbci	r29, 0xFF	; 255
    2214:	68 81       	ld	r22, Y
    2216:	79 81       	ldd	r23, Y+1	; 0x01
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	9b 81       	ldd	r25, Y+3	; 0x03
    221c:	c9 5b       	subi	r28, 0xB9	; 185
    221e:	d0 40       	sbci	r29, 0x00	; 0
    2220:	83 d2       	rcall	.+1286   	; 0x2728 <__mulsf3>
    2222:	ad 96       	adiw	r28, 0x2d	; 45
    2224:	6c af       	std	Y+60, r22	; 0x3c
    2226:	7d af       	std	Y+61, r23	; 0x3d
    2228:	8e af       	std	Y+62, r24	; 0x3e
    222a:	9f af       	std	Y+63, r25	; 0x3f
    222c:	ad 97       	sbiw	r28, 0x2d	; 45
    222e:	c7 52       	subi	r28, 0x27	; 39
    2230:	df 4f       	sbci	r29, 0xFF	; 255
    2232:	28 81       	ld	r18, Y
    2234:	39 81       	ldd	r19, Y+1	; 0x01
    2236:	4a 81       	ldd	r20, Y+2	; 0x02
    2238:	5b 81       	ldd	r21, Y+3	; 0x03
    223a:	c9 5d       	subi	r28, 0xD9	; 217
    223c:	d0 40       	sbci	r29, 0x00	; 0
    223e:	c7 01       	movw	r24, r14
    2240:	b6 01       	movw	r22, r12
    2242:	72 d2       	rcall	.+1252   	; 0x2728 <__mulsf3>
    2244:	9b 01       	movw	r18, r22
    2246:	ac 01       	movw	r20, r24
    2248:	ad 96       	adiw	r28, 0x2d	; 45
    224a:	6c ad       	ldd	r22, Y+60	; 0x3c
    224c:	7d ad       	ldd	r23, Y+61	; 0x3d
    224e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2250:	9f ad       	ldd	r25, Y+63	; 0x3f
    2252:	ad 97       	sbiw	r28, 0x2d	; 45
    2254:	b2 d0       	rcall	.+356    	; 0x23ba <__addsf3>
    2256:	9b 01       	movw	r18, r22
    2258:	ac 01       	movw	r20, r24
       interpolation the two points
       p20 - average of p10 and p12
       p21 - average of p11 and p13 */
    double ap20[3] = {(1 - yProp) * ap10[0] + yProp * ap12[0],
                      (1 - yProp) * ap10[1] + yProp * ap12[1],
                      (1 - yProp) * ap10[2] + yProp * ap12[2]};
    225a:	a5 96       	adiw	r28, 0x25	; 37
    225c:	6c ad       	ldd	r22, Y+60	; 0x3c
    225e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2260:	8e ad       	ldd	r24, Y+62	; 0x3e
    2262:	9f ad       	ldd	r25, Y+63	; 0x3f
    2264:	a5 97       	sbiw	r28, 0x25	; 37
    2266:	60 d2       	rcall	.+1216   	; 0x2728 <__mulsf3>
    2268:	9b 01       	movw	r18, r22
    226a:	ac 01       	movw	r20, r24
    226c:	a9 96       	adiw	r28, 0x29	; 41
    226e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2270:	7d ad       	ldd	r23, Y+61	; 0x3d
    2272:	8e ad       	ldd	r24, Y+62	; 0x3e
    2274:	9f ad       	ldd	r25, Y+63	; 0x3f
    2276:	a9 97       	sbiw	r28, 0x29	; 41
    2278:	a0 d0       	rcall	.+320    	; 0x23ba <__addsf3>
    /* Seventh, collapse the z-axis about point 'p', and approximate by
       interpolation the point 'p' (average of p20 and p21). Store the result in
       'angles'. */
    angles[0] = (1 - zProp) * ap20[0] + zProp * ap21[0];
    angles[1] = (1 - zProp) * ap20[1] + zProp * ap21[1];
    angles[2] = (1 - zProp) * ap20[2] + zProp * ap21[2];
    227a:	e9 96       	adiw	r28, 0x39	; 57
    227c:	2c ad       	ldd	r18, Y+60	; 0x3c
    227e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2280:	4e ad       	ldd	r20, Y+62	; 0x3e
    2282:	5f ad       	ldd	r21, Y+63	; 0x3f
    2284:	e9 97       	sbiw	r28, 0x39	; 57
    2286:	50 d2       	rcall	.+1184   	; 0x2728 <__mulsf3>
    2288:	a9 96       	adiw	r28, 0x29	; 41
    228a:	6c af       	std	Y+60, r22	; 0x3c
    228c:	7d af       	std	Y+61, r23	; 0x3d
    228e:	8e af       	std	Y+62, r24	; 0x3e
    2290:	9f af       	std	Y+63, r25	; 0x3f
    2292:	a9 97       	sbiw	r28, 0x29	; 41
    double ap10[3] = {(1 - xProp) * ap0[0] + xProp * ap4[0],
                      (1 - xProp) * ap0[1] + xProp * ap4[1],
                      (1 - xProp) * ap0[2] + xProp * ap4[2]};
    double ap11[3] = {(1 - xProp) * ap1[0] + xProp * ap5[0],
                      (1 - xProp) * ap1[1] + xProp * ap5[1],
                      (1 - xProp) * ap1[2] + xProp * ap5[2]};
    2294:	a3 01       	movw	r20, r6
    2296:	92 01       	movw	r18, r4
    2298:	cf 54       	subi	r28, 0x4F	; 79
    229a:	df 4f       	sbci	r29, 0xFF	; 255
    229c:	68 81       	ld	r22, Y
    229e:	79 81       	ldd	r23, Y+1	; 0x01
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	9b 81       	ldd	r25, Y+3	; 0x03
    22a4:	c1 5b       	subi	r28, 0xB1	; 177
    22a6:	d0 40       	sbci	r29, 0x00	; 0
    22a8:	3f d2       	rcall	.+1150   	; 0x2728 <__mulsf3>
    22aa:	ad 96       	adiw	r28, 0x2d	; 45
    22ac:	6c af       	std	Y+60, r22	; 0x3c
    22ae:	7d af       	std	Y+61, r23	; 0x3d
    22b0:	8e af       	std	Y+62, r24	; 0x3e
    22b2:	9f af       	std	Y+63, r25	; 0x3f
    22b4:	ad 97       	sbiw	r28, 0x2d	; 45
    22b6:	cf 52       	subi	r28, 0x2F	; 47
    22b8:	df 4f       	sbci	r29, 0xFF	; 255
    22ba:	28 81       	ld	r18, Y
    22bc:	39 81       	ldd	r19, Y+1	; 0x01
    22be:	4a 81       	ldd	r20, Y+2	; 0x02
    22c0:	5b 81       	ldd	r21, Y+3	; 0x03
    22c2:	c1 5d       	subi	r28, 0xD1	; 209
    22c4:	d0 40       	sbci	r29, 0x00	; 0
    22c6:	c7 01       	movw	r24, r14
    22c8:	b6 01       	movw	r22, r12
    22ca:	2e d2       	rcall	.+1116   	; 0x2728 <__mulsf3>
    22cc:	9b 01       	movw	r18, r22
    22ce:	ac 01       	movw	r20, r24
    22d0:	ad 96       	adiw	r28, 0x2d	; 45
    22d2:	6c ad       	ldd	r22, Y+60	; 0x3c
    22d4:	7d ad       	ldd	r23, Y+61	; 0x3d
    22d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    22d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    22da:	ad 97       	sbiw	r28, 0x2d	; 45
    22dc:	6e d0       	rcall	.+220    	; 0x23ba <__addsf3>
    double ap20[3] = {(1 - yProp) * ap10[0] + yProp * ap12[0],
                      (1 - yProp) * ap10[1] + yProp * ap12[1],
                      (1 - yProp) * ap10[2] + yProp * ap12[2]};
    double ap21[3] = {(1 - yProp) * ap11[0] + yProp * ap13[0],
                      (1 - yProp) * ap11[1] + yProp * ap13[1],
                      (1 - yProp) * ap11[2] + yProp * ap13[2]};
    22de:	e1 96       	adiw	r28, 0x31	; 49
    22e0:	2c ad       	ldd	r18, Y+60	; 0x3c
    22e2:	3d ad       	ldd	r19, Y+61	; 0x3d
    22e4:	4e ad       	ldd	r20, Y+62	; 0x3e
    22e6:	5f ad       	ldd	r21, Y+63	; 0x3f
    22e8:	e1 97       	sbiw	r28, 0x31	; 49
    22ea:	1e d2       	rcall	.+1084   	; 0x2728 <__mulsf3>
    22ec:	e1 96       	adiw	r28, 0x31	; 49
    22ee:	6c af       	std	Y+60, r22	; 0x3c
    22f0:	7d af       	std	Y+61, r23	; 0x3d
    22f2:	8e af       	std	Y+62, r24	; 0x3e
    22f4:	9f af       	std	Y+63, r25	; 0x3f
    22f6:	e1 97       	sbiw	r28, 0x31	; 49
    double ap12[3] = {(1 - xProp) * ap2[0] + xProp * ap6[0],
                      (1 - xProp) * ap2[1] + xProp * ap6[1],
                      (1 - xProp) * ap2[2] + xProp * ap6[2]};
    double ap13[3] = {(1 - xProp) * ap3[0] + xProp * ap7[0],
                      (1 - xProp) * ap3[1] + xProp * ap7[1],
                      (1 - xProp) * ap3[2] + xProp * ap7[2]};
    22f8:	a3 01       	movw	r20, r6
    22fa:	92 01       	movw	r18, r4
    22fc:	cf 53       	subi	r28, 0x3F	; 63
    22fe:	df 4f       	sbci	r29, 0xFF	; 255
    2300:	68 81       	ld	r22, Y
    2302:	79 81       	ldd	r23, Y+1	; 0x01
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	9b 81       	ldd	r25, Y+3	; 0x03
    2308:	c1 5c       	subi	r28, 0xC1	; 193
    230a:	d0 40       	sbci	r29, 0x00	; 0
    230c:	0d d2       	rcall	.+1050   	; 0x2728 <__mulsf3>
    230e:	2b 01       	movw	r4, r22
    2310:	3c 01       	movw	r6, r24
    2312:	cf 51       	subi	r28, 0x1F	; 31
    2314:	df 4f       	sbci	r29, 0xFF	; 255
    2316:	28 81       	ld	r18, Y
    2318:	39 81       	ldd	r19, Y+1	; 0x01
    231a:	4a 81       	ldd	r20, Y+2	; 0x02
    231c:	5b 81       	ldd	r21, Y+3	; 0x03
    231e:	c1 5e       	subi	r28, 0xE1	; 225
    2320:	d0 40       	sbci	r29, 0x00	; 0
    2322:	c7 01       	movw	r24, r14
    2324:	b6 01       	movw	r22, r12
    2326:	00 d2       	rcall	.+1024   	; 0x2728 <__mulsf3>
    2328:	9b 01       	movw	r18, r22
    232a:	ac 01       	movw	r20, r24
    232c:	c3 01       	movw	r24, r6
    232e:	b2 01       	movw	r22, r4
    2330:	44 d0       	rcall	.+136    	; 0x23ba <__addsf3>
    2332:	9b 01       	movw	r18, r22
    2334:	ac 01       	movw	r20, r24
    double ap20[3] = {(1 - yProp) * ap10[0] + yProp * ap12[0],
                      (1 - yProp) * ap10[1] + yProp * ap12[1],
                      (1 - yProp) * ap10[2] + yProp * ap12[2]};
    double ap21[3] = {(1 - yProp) * ap11[0] + yProp * ap13[0],
                      (1 - yProp) * ap11[1] + yProp * ap13[1],
                      (1 - yProp) * ap11[2] + yProp * ap13[2]};
    2336:	a5 96       	adiw	r28, 0x25	; 37
    2338:	6c ad       	ldd	r22, Y+60	; 0x3c
    233a:	7d ad       	ldd	r23, Y+61	; 0x3d
    233c:	8e ad       	ldd	r24, Y+62	; 0x3e
    233e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2340:	a5 97       	sbiw	r28, 0x25	; 37
    2342:	f2 d1       	rcall	.+996    	; 0x2728 <__mulsf3>
    2344:	9b 01       	movw	r18, r22
    2346:	ac 01       	movw	r20, r24
    2348:	e1 96       	adiw	r28, 0x31	; 49
    234a:	6c ad       	ldd	r22, Y+60	; 0x3c
    234c:	7d ad       	ldd	r23, Y+61	; 0x3d
    234e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2350:	9f ad       	ldd	r25, Y+63	; 0x3f
    2352:	e1 97       	sbiw	r28, 0x31	; 49
    2354:	32 d0       	rcall	.+100    	; 0x23ba <__addsf3>
    2356:	9b 01       	movw	r18, r22
    2358:	ac 01       	movw	r20, r24
    /* Seventh, collapse the z-axis about point 'p', and approximate by
       interpolation the point 'p' (average of p20 and p21). Store the result in
       'angles'. */
    angles[0] = (1 - zProp) * ap20[0] + zProp * ap21[0];
    angles[1] = (1 - zProp) * ap20[1] + zProp * ap21[1];
    angles[2] = (1 - zProp) * ap20[2] + zProp * ap21[2];
    235a:	ed 96       	adiw	r28, 0x3d	; 61
    235c:	6c ad       	ldd	r22, Y+60	; 0x3c
    235e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2360:	8e ad       	ldd	r24, Y+62	; 0x3e
    2362:	9f ad       	ldd	r25, Y+63	; 0x3f
    2364:	ed 97       	sbiw	r28, 0x3d	; 61
    2366:	e0 d1       	rcall	.+960    	; 0x2728 <__mulsf3>
    2368:	9b 01       	movw	r18, r22
    236a:	ac 01       	movw	r20, r24
    236c:	a9 96       	adiw	r28, 0x29	; 41
    236e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2370:	7d ad       	ldd	r23, Y+61	; 0x3d
    2372:	8e ad       	ldd	r24, Y+62	; 0x3e
    2374:	9f ad       	ldd	r25, Y+63	; 0x3f
    2376:	a9 97       	sbiw	r28, 0x29	; 41
    2378:	20 d0       	rcall	.+64     	; 0x23ba <__addsf3>
    237a:	f1 01       	movw	r30, r2
    237c:	60 87       	std	Z+8, r22	; 0x08
    237e:	71 87       	std	Z+9, r23	; 0x09
    2380:	82 87       	std	Z+10, r24	; 0x0a
    2382:	93 87       	std	Z+11, r25	; 0x0b
    {
        printf("\n");
        printAngles("OUT", angles);
        printf("\n");
    }
}
    2384:	cc 51       	subi	r28, 0x1C	; 28
    2386:	df 4f       	sbci	r29, 0xFF	; 255
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	1f 91       	pop	r17
    2398:	0f 91       	pop	r16
    239a:	ff 90       	pop	r15
    239c:	ef 90       	pop	r14
    239e:	df 90       	pop	r13
    23a0:	cf 90       	pop	r12
    23a2:	bf 90       	pop	r11
    23a4:	af 90       	pop	r10
    23a6:	9f 90       	pop	r9
    23a8:	8f 90       	pop	r8
    23aa:	7f 90       	pop	r7
    23ac:	6f 90       	pop	r6
    23ae:	5f 90       	pop	r5
    23b0:	4f 90       	pop	r4
    23b2:	3f 90       	pop	r3
    23b4:	2f 90       	pop	r2
    23b6:	08 95       	ret

000023b8 <__subsf3>:
    23b8:	50 58       	subi	r21, 0x80	; 128

000023ba <__addsf3>:
    23ba:	bb 27       	eor	r27, r27
    23bc:	aa 27       	eor	r26, r26
    23be:	0e d0       	rcall	.+28     	; 0x23dc <__addsf3x>
    23c0:	75 c1       	rjmp	.+746    	; 0x26ac <__fp_round>
    23c2:	66 d1       	rcall	.+716    	; 0x2690 <__fp_pscA>
    23c4:	30 f0       	brcs	.+12     	; 0x23d2 <__addsf3+0x18>
    23c6:	6b d1       	rcall	.+726    	; 0x269e <__fp_pscB>
    23c8:	20 f0       	brcs	.+8      	; 0x23d2 <__addsf3+0x18>
    23ca:	31 f4       	brne	.+12     	; 0x23d8 <__addsf3+0x1e>
    23cc:	9f 3f       	cpi	r25, 0xFF	; 255
    23ce:	11 f4       	brne	.+4      	; 0x23d4 <__addsf3+0x1a>
    23d0:	1e f4       	brtc	.+6      	; 0x23d8 <__addsf3+0x1e>
    23d2:	5b c1       	rjmp	.+694    	; 0x268a <__fp_nan>
    23d4:	0e f4       	brtc	.+2      	; 0x23d8 <__addsf3+0x1e>
    23d6:	e0 95       	com	r30
    23d8:	e7 fb       	bst	r30, 7
    23da:	51 c1       	rjmp	.+674    	; 0x267e <__fp_inf>

000023dc <__addsf3x>:
    23dc:	e9 2f       	mov	r30, r25
    23de:	77 d1       	rcall	.+750    	; 0x26ce <__fp_split3>
    23e0:	80 f3       	brcs	.-32     	; 0x23c2 <__addsf3+0x8>
    23e2:	ba 17       	cp	r27, r26
    23e4:	62 07       	cpc	r22, r18
    23e6:	73 07       	cpc	r23, r19
    23e8:	84 07       	cpc	r24, r20
    23ea:	95 07       	cpc	r25, r21
    23ec:	18 f0       	brcs	.+6      	; 0x23f4 <__addsf3x+0x18>
    23ee:	71 f4       	brne	.+28     	; 0x240c <__addsf3x+0x30>
    23f0:	9e f5       	brtc	.+102    	; 0x2458 <__addsf3x+0x7c>
    23f2:	8f c1       	rjmp	.+798    	; 0x2712 <__fp_zero>
    23f4:	0e f4       	brtc	.+2      	; 0x23f8 <__addsf3x+0x1c>
    23f6:	e0 95       	com	r30
    23f8:	0b 2e       	mov	r0, r27
    23fa:	ba 2f       	mov	r27, r26
    23fc:	a0 2d       	mov	r26, r0
    23fe:	0b 01       	movw	r0, r22
    2400:	b9 01       	movw	r22, r18
    2402:	90 01       	movw	r18, r0
    2404:	0c 01       	movw	r0, r24
    2406:	ca 01       	movw	r24, r20
    2408:	a0 01       	movw	r20, r0
    240a:	11 24       	eor	r1, r1
    240c:	ff 27       	eor	r31, r31
    240e:	59 1b       	sub	r21, r25
    2410:	99 f0       	breq	.+38     	; 0x2438 <__addsf3x+0x5c>
    2412:	59 3f       	cpi	r21, 0xF9	; 249
    2414:	50 f4       	brcc	.+20     	; 0x242a <__addsf3x+0x4e>
    2416:	50 3e       	cpi	r21, 0xE0	; 224
    2418:	68 f1       	brcs	.+90     	; 0x2474 <__addsf3x+0x98>
    241a:	1a 16       	cp	r1, r26
    241c:	f0 40       	sbci	r31, 0x00	; 0
    241e:	a2 2f       	mov	r26, r18
    2420:	23 2f       	mov	r18, r19
    2422:	34 2f       	mov	r19, r20
    2424:	44 27       	eor	r20, r20
    2426:	58 5f       	subi	r21, 0xF8	; 248
    2428:	f3 cf       	rjmp	.-26     	; 0x2410 <__addsf3x+0x34>
    242a:	46 95       	lsr	r20
    242c:	37 95       	ror	r19
    242e:	27 95       	ror	r18
    2430:	a7 95       	ror	r26
    2432:	f0 40       	sbci	r31, 0x00	; 0
    2434:	53 95       	inc	r21
    2436:	c9 f7       	brne	.-14     	; 0x242a <__addsf3x+0x4e>
    2438:	7e f4       	brtc	.+30     	; 0x2458 <__addsf3x+0x7c>
    243a:	1f 16       	cp	r1, r31
    243c:	ba 0b       	sbc	r27, r26
    243e:	62 0b       	sbc	r22, r18
    2440:	73 0b       	sbc	r23, r19
    2442:	84 0b       	sbc	r24, r20
    2444:	ba f0       	brmi	.+46     	; 0x2474 <__addsf3x+0x98>
    2446:	91 50       	subi	r25, 0x01	; 1
    2448:	a1 f0       	breq	.+40     	; 0x2472 <__addsf3x+0x96>
    244a:	ff 0f       	add	r31, r31
    244c:	bb 1f       	adc	r27, r27
    244e:	66 1f       	adc	r22, r22
    2450:	77 1f       	adc	r23, r23
    2452:	88 1f       	adc	r24, r24
    2454:	c2 f7       	brpl	.-16     	; 0x2446 <__addsf3x+0x6a>
    2456:	0e c0       	rjmp	.+28     	; 0x2474 <__addsf3x+0x98>
    2458:	ba 0f       	add	r27, r26
    245a:	62 1f       	adc	r22, r18
    245c:	73 1f       	adc	r23, r19
    245e:	84 1f       	adc	r24, r20
    2460:	48 f4       	brcc	.+18     	; 0x2474 <__addsf3x+0x98>
    2462:	87 95       	ror	r24
    2464:	77 95       	ror	r23
    2466:	67 95       	ror	r22
    2468:	b7 95       	ror	r27
    246a:	f7 95       	ror	r31
    246c:	9e 3f       	cpi	r25, 0xFE	; 254
    246e:	08 f0       	brcs	.+2      	; 0x2472 <__addsf3x+0x96>
    2470:	b3 cf       	rjmp	.-154    	; 0x23d8 <__addsf3+0x1e>
    2472:	93 95       	inc	r25
    2474:	88 0f       	add	r24, r24
    2476:	08 f0       	brcs	.+2      	; 0x247a <__addsf3x+0x9e>
    2478:	99 27       	eor	r25, r25
    247a:	ee 0f       	add	r30, r30
    247c:	97 95       	ror	r25
    247e:	87 95       	ror	r24
    2480:	08 95       	ret

00002482 <__cmpsf2>:
    2482:	d9 d0       	rcall	.+434    	; 0x2636 <__fp_cmp>
    2484:	08 f4       	brcc	.+2      	; 0x2488 <__cmpsf2+0x6>
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	08 95       	ret

0000248a <__divsf3>:
    248a:	0c d0       	rcall	.+24     	; 0x24a4 <__divsf3x>
    248c:	0f c1       	rjmp	.+542    	; 0x26ac <__fp_round>
    248e:	07 d1       	rcall	.+526    	; 0x269e <__fp_pscB>
    2490:	40 f0       	brcs	.+16     	; 0x24a2 <__divsf3+0x18>
    2492:	fe d0       	rcall	.+508    	; 0x2690 <__fp_pscA>
    2494:	30 f0       	brcs	.+12     	; 0x24a2 <__divsf3+0x18>
    2496:	21 f4       	brne	.+8      	; 0x24a0 <__divsf3+0x16>
    2498:	5f 3f       	cpi	r21, 0xFF	; 255
    249a:	19 f0       	breq	.+6      	; 0x24a2 <__divsf3+0x18>
    249c:	f0 c0       	rjmp	.+480    	; 0x267e <__fp_inf>
    249e:	51 11       	cpse	r21, r1
    24a0:	39 c1       	rjmp	.+626    	; 0x2714 <__fp_szero>
    24a2:	f3 c0       	rjmp	.+486    	; 0x268a <__fp_nan>

000024a4 <__divsf3x>:
    24a4:	14 d1       	rcall	.+552    	; 0x26ce <__fp_split3>
    24a6:	98 f3       	brcs	.-26     	; 0x248e <__divsf3+0x4>

000024a8 <__divsf3_pse>:
    24a8:	99 23       	and	r25, r25
    24aa:	c9 f3       	breq	.-14     	; 0x249e <__divsf3+0x14>
    24ac:	55 23       	and	r21, r21
    24ae:	b1 f3       	breq	.-20     	; 0x249c <__divsf3+0x12>
    24b0:	95 1b       	sub	r25, r21
    24b2:	55 0b       	sbc	r21, r21
    24b4:	bb 27       	eor	r27, r27
    24b6:	aa 27       	eor	r26, r26
    24b8:	62 17       	cp	r22, r18
    24ba:	73 07       	cpc	r23, r19
    24bc:	84 07       	cpc	r24, r20
    24be:	38 f0       	brcs	.+14     	; 0x24ce <__divsf3_pse+0x26>
    24c0:	9f 5f       	subi	r25, 0xFF	; 255
    24c2:	5f 4f       	sbci	r21, 0xFF	; 255
    24c4:	22 0f       	add	r18, r18
    24c6:	33 1f       	adc	r19, r19
    24c8:	44 1f       	adc	r20, r20
    24ca:	aa 1f       	adc	r26, r26
    24cc:	a9 f3       	breq	.-22     	; 0x24b8 <__divsf3_pse+0x10>
    24ce:	33 d0       	rcall	.+102    	; 0x2536 <__divsf3_pse+0x8e>
    24d0:	0e 2e       	mov	r0, r30
    24d2:	3a f0       	brmi	.+14     	; 0x24e2 <__divsf3_pse+0x3a>
    24d4:	e0 e8       	ldi	r30, 0x80	; 128
    24d6:	30 d0       	rcall	.+96     	; 0x2538 <__divsf3_pse+0x90>
    24d8:	91 50       	subi	r25, 0x01	; 1
    24da:	50 40       	sbci	r21, 0x00	; 0
    24dc:	e6 95       	lsr	r30
    24de:	00 1c       	adc	r0, r0
    24e0:	ca f7       	brpl	.-14     	; 0x24d4 <__divsf3_pse+0x2c>
    24e2:	29 d0       	rcall	.+82     	; 0x2536 <__divsf3_pse+0x8e>
    24e4:	fe 2f       	mov	r31, r30
    24e6:	27 d0       	rcall	.+78     	; 0x2536 <__divsf3_pse+0x8e>
    24e8:	66 0f       	add	r22, r22
    24ea:	77 1f       	adc	r23, r23
    24ec:	88 1f       	adc	r24, r24
    24ee:	bb 1f       	adc	r27, r27
    24f0:	26 17       	cp	r18, r22
    24f2:	37 07       	cpc	r19, r23
    24f4:	48 07       	cpc	r20, r24
    24f6:	ab 07       	cpc	r26, r27
    24f8:	b0 e8       	ldi	r27, 0x80	; 128
    24fa:	09 f0       	breq	.+2      	; 0x24fe <__divsf3_pse+0x56>
    24fc:	bb 0b       	sbc	r27, r27
    24fe:	80 2d       	mov	r24, r0
    2500:	bf 01       	movw	r22, r30
    2502:	ff 27       	eor	r31, r31
    2504:	93 58       	subi	r25, 0x83	; 131
    2506:	5f 4f       	sbci	r21, 0xFF	; 255
    2508:	2a f0       	brmi	.+10     	; 0x2514 <__divsf3_pse+0x6c>
    250a:	9e 3f       	cpi	r25, 0xFE	; 254
    250c:	51 05       	cpc	r21, r1
    250e:	68 f0       	brcs	.+26     	; 0x252a <__divsf3_pse+0x82>
    2510:	b6 c0       	rjmp	.+364    	; 0x267e <__fp_inf>
    2512:	00 c1       	rjmp	.+512    	; 0x2714 <__fp_szero>
    2514:	5f 3f       	cpi	r21, 0xFF	; 255
    2516:	ec f3       	brlt	.-6      	; 0x2512 <__divsf3_pse+0x6a>
    2518:	98 3e       	cpi	r25, 0xE8	; 232
    251a:	dc f3       	brlt	.-10     	; 0x2512 <__divsf3_pse+0x6a>
    251c:	86 95       	lsr	r24
    251e:	77 95       	ror	r23
    2520:	67 95       	ror	r22
    2522:	b7 95       	ror	r27
    2524:	f7 95       	ror	r31
    2526:	9f 5f       	subi	r25, 0xFF	; 255
    2528:	c9 f7       	brne	.-14     	; 0x251c <__divsf3_pse+0x74>
    252a:	88 0f       	add	r24, r24
    252c:	91 1d       	adc	r25, r1
    252e:	96 95       	lsr	r25
    2530:	87 95       	ror	r24
    2532:	97 f9       	bld	r25, 7
    2534:	08 95       	ret
    2536:	e1 e0       	ldi	r30, 0x01	; 1
    2538:	66 0f       	add	r22, r22
    253a:	77 1f       	adc	r23, r23
    253c:	88 1f       	adc	r24, r24
    253e:	bb 1f       	adc	r27, r27
    2540:	62 17       	cp	r22, r18
    2542:	73 07       	cpc	r23, r19
    2544:	84 07       	cpc	r24, r20
    2546:	ba 07       	cpc	r27, r26
    2548:	20 f0       	brcs	.+8      	; 0x2552 <__divsf3_pse+0xaa>
    254a:	62 1b       	sub	r22, r18
    254c:	73 0b       	sbc	r23, r19
    254e:	84 0b       	sbc	r24, r20
    2550:	ba 0b       	sbc	r27, r26
    2552:	ee 1f       	adc	r30, r30
    2554:	88 f7       	brcc	.-30     	; 0x2538 <__divsf3_pse+0x90>
    2556:	e0 95       	com	r30
    2558:	08 95       	ret

0000255a <__fixsfsi>:
    255a:	04 d0       	rcall	.+8      	; 0x2564 <__fixunssfsi>
    255c:	68 94       	set
    255e:	b1 11       	cpse	r27, r1
    2560:	d9 c0       	rjmp	.+434    	; 0x2714 <__fp_szero>
    2562:	08 95       	ret

00002564 <__fixunssfsi>:
    2564:	bc d0       	rcall	.+376    	; 0x26de <__fp_splitA>
    2566:	88 f0       	brcs	.+34     	; 0x258a <__fixunssfsi+0x26>
    2568:	9f 57       	subi	r25, 0x7F	; 127
    256a:	90 f0       	brcs	.+36     	; 0x2590 <__fixunssfsi+0x2c>
    256c:	b9 2f       	mov	r27, r25
    256e:	99 27       	eor	r25, r25
    2570:	b7 51       	subi	r27, 0x17	; 23
    2572:	a0 f0       	brcs	.+40     	; 0x259c <__fixunssfsi+0x38>
    2574:	d1 f0       	breq	.+52     	; 0x25aa <__fixunssfsi+0x46>
    2576:	66 0f       	add	r22, r22
    2578:	77 1f       	adc	r23, r23
    257a:	88 1f       	adc	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	1a f0       	brmi	.+6      	; 0x2586 <__fixunssfsi+0x22>
    2580:	ba 95       	dec	r27
    2582:	c9 f7       	brne	.-14     	; 0x2576 <__fixunssfsi+0x12>
    2584:	12 c0       	rjmp	.+36     	; 0x25aa <__fixunssfsi+0x46>
    2586:	b1 30       	cpi	r27, 0x01	; 1
    2588:	81 f0       	breq	.+32     	; 0x25aa <__fixunssfsi+0x46>
    258a:	c3 d0       	rcall	.+390    	; 0x2712 <__fp_zero>
    258c:	b1 e0       	ldi	r27, 0x01	; 1
    258e:	08 95       	ret
    2590:	c0 c0       	rjmp	.+384    	; 0x2712 <__fp_zero>
    2592:	67 2f       	mov	r22, r23
    2594:	78 2f       	mov	r23, r24
    2596:	88 27       	eor	r24, r24
    2598:	b8 5f       	subi	r27, 0xF8	; 248
    259a:	39 f0       	breq	.+14     	; 0x25aa <__fixunssfsi+0x46>
    259c:	b9 3f       	cpi	r27, 0xF9	; 249
    259e:	cc f3       	brlt	.-14     	; 0x2592 <__fixunssfsi+0x2e>
    25a0:	86 95       	lsr	r24
    25a2:	77 95       	ror	r23
    25a4:	67 95       	ror	r22
    25a6:	b3 95       	inc	r27
    25a8:	d9 f7       	brne	.-10     	; 0x25a0 <__fixunssfsi+0x3c>
    25aa:	3e f4       	brtc	.+14     	; 0x25ba <__fixunssfsi+0x56>
    25ac:	90 95       	com	r25
    25ae:	80 95       	com	r24
    25b0:	70 95       	com	r23
    25b2:	61 95       	neg	r22
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	8f 4f       	sbci	r24, 0xFF	; 255
    25b8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ba:	08 95       	ret

000025bc <__floatunsisf>:
    25bc:	e8 94       	clt
    25be:	09 c0       	rjmp	.+18     	; 0x25d2 <__floatsisf+0x12>

000025c0 <__floatsisf>:
    25c0:	97 fb       	bst	r25, 7
    25c2:	3e f4       	brtc	.+14     	; 0x25d2 <__floatsisf+0x12>
    25c4:	90 95       	com	r25
    25c6:	80 95       	com	r24
    25c8:	70 95       	com	r23
    25ca:	61 95       	neg	r22
    25cc:	7f 4f       	sbci	r23, 0xFF	; 255
    25ce:	8f 4f       	sbci	r24, 0xFF	; 255
    25d0:	9f 4f       	sbci	r25, 0xFF	; 255
    25d2:	99 23       	and	r25, r25
    25d4:	a9 f0       	breq	.+42     	; 0x2600 <__floatsisf+0x40>
    25d6:	f9 2f       	mov	r31, r25
    25d8:	96 e9       	ldi	r25, 0x96	; 150
    25da:	bb 27       	eor	r27, r27
    25dc:	93 95       	inc	r25
    25de:	f6 95       	lsr	r31
    25e0:	87 95       	ror	r24
    25e2:	77 95       	ror	r23
    25e4:	67 95       	ror	r22
    25e6:	b7 95       	ror	r27
    25e8:	f1 11       	cpse	r31, r1
    25ea:	f8 cf       	rjmp	.-16     	; 0x25dc <__floatsisf+0x1c>
    25ec:	fa f4       	brpl	.+62     	; 0x262c <__floatsisf+0x6c>
    25ee:	bb 0f       	add	r27, r27
    25f0:	11 f4       	brne	.+4      	; 0x25f6 <__floatsisf+0x36>
    25f2:	60 ff       	sbrs	r22, 0
    25f4:	1b c0       	rjmp	.+54     	; 0x262c <__floatsisf+0x6c>
    25f6:	6f 5f       	subi	r22, 0xFF	; 255
    25f8:	7f 4f       	sbci	r23, 0xFF	; 255
    25fa:	8f 4f       	sbci	r24, 0xFF	; 255
    25fc:	9f 4f       	sbci	r25, 0xFF	; 255
    25fe:	16 c0       	rjmp	.+44     	; 0x262c <__floatsisf+0x6c>
    2600:	88 23       	and	r24, r24
    2602:	11 f0       	breq	.+4      	; 0x2608 <__floatsisf+0x48>
    2604:	96 e9       	ldi	r25, 0x96	; 150
    2606:	11 c0       	rjmp	.+34     	; 0x262a <__floatsisf+0x6a>
    2608:	77 23       	and	r23, r23
    260a:	21 f0       	breq	.+8      	; 0x2614 <__floatsisf+0x54>
    260c:	9e e8       	ldi	r25, 0x8E	; 142
    260e:	87 2f       	mov	r24, r23
    2610:	76 2f       	mov	r23, r22
    2612:	05 c0       	rjmp	.+10     	; 0x261e <__floatsisf+0x5e>
    2614:	66 23       	and	r22, r22
    2616:	71 f0       	breq	.+28     	; 0x2634 <__floatsisf+0x74>
    2618:	96 e8       	ldi	r25, 0x86	; 134
    261a:	86 2f       	mov	r24, r22
    261c:	70 e0       	ldi	r23, 0x00	; 0
    261e:	60 e0       	ldi	r22, 0x00	; 0
    2620:	2a f0       	brmi	.+10     	; 0x262c <__floatsisf+0x6c>
    2622:	9a 95       	dec	r25
    2624:	66 0f       	add	r22, r22
    2626:	77 1f       	adc	r23, r23
    2628:	88 1f       	adc	r24, r24
    262a:	da f7       	brpl	.-10     	; 0x2622 <__floatsisf+0x62>
    262c:	88 0f       	add	r24, r24
    262e:	96 95       	lsr	r25
    2630:	87 95       	ror	r24
    2632:	97 f9       	bld	r25, 7
    2634:	08 95       	ret

00002636 <__fp_cmp>:
    2636:	99 0f       	add	r25, r25
    2638:	00 08       	sbc	r0, r0
    263a:	55 0f       	add	r21, r21
    263c:	aa 0b       	sbc	r26, r26
    263e:	e0 e8       	ldi	r30, 0x80	; 128
    2640:	fe ef       	ldi	r31, 0xFE	; 254
    2642:	16 16       	cp	r1, r22
    2644:	17 06       	cpc	r1, r23
    2646:	e8 07       	cpc	r30, r24
    2648:	f9 07       	cpc	r31, r25
    264a:	c0 f0       	brcs	.+48     	; 0x267c <__fp_cmp+0x46>
    264c:	12 16       	cp	r1, r18
    264e:	13 06       	cpc	r1, r19
    2650:	e4 07       	cpc	r30, r20
    2652:	f5 07       	cpc	r31, r21
    2654:	98 f0       	brcs	.+38     	; 0x267c <__fp_cmp+0x46>
    2656:	62 1b       	sub	r22, r18
    2658:	73 0b       	sbc	r23, r19
    265a:	84 0b       	sbc	r24, r20
    265c:	95 0b       	sbc	r25, r21
    265e:	39 f4       	brne	.+14     	; 0x266e <__fp_cmp+0x38>
    2660:	0a 26       	eor	r0, r26
    2662:	61 f0       	breq	.+24     	; 0x267c <__fp_cmp+0x46>
    2664:	23 2b       	or	r18, r19
    2666:	24 2b       	or	r18, r20
    2668:	25 2b       	or	r18, r21
    266a:	21 f4       	brne	.+8      	; 0x2674 <__fp_cmp+0x3e>
    266c:	08 95       	ret
    266e:	0a 26       	eor	r0, r26
    2670:	09 f4       	brne	.+2      	; 0x2674 <__fp_cmp+0x3e>
    2672:	a1 40       	sbci	r26, 0x01	; 1
    2674:	a6 95       	lsr	r26
    2676:	8f ef       	ldi	r24, 0xFF	; 255
    2678:	81 1d       	adc	r24, r1
    267a:	81 1d       	adc	r24, r1
    267c:	08 95       	ret

0000267e <__fp_inf>:
    267e:	97 f9       	bld	r25, 7
    2680:	9f 67       	ori	r25, 0x7F	; 127
    2682:	80 e8       	ldi	r24, 0x80	; 128
    2684:	70 e0       	ldi	r23, 0x00	; 0
    2686:	60 e0       	ldi	r22, 0x00	; 0
    2688:	08 95       	ret

0000268a <__fp_nan>:
    268a:	9f ef       	ldi	r25, 0xFF	; 255
    268c:	80 ec       	ldi	r24, 0xC0	; 192
    268e:	08 95       	ret

00002690 <__fp_pscA>:
    2690:	00 24       	eor	r0, r0
    2692:	0a 94       	dec	r0
    2694:	16 16       	cp	r1, r22
    2696:	17 06       	cpc	r1, r23
    2698:	18 06       	cpc	r1, r24
    269a:	09 06       	cpc	r0, r25
    269c:	08 95       	ret

0000269e <__fp_pscB>:
    269e:	00 24       	eor	r0, r0
    26a0:	0a 94       	dec	r0
    26a2:	12 16       	cp	r1, r18
    26a4:	13 06       	cpc	r1, r19
    26a6:	14 06       	cpc	r1, r20
    26a8:	05 06       	cpc	r0, r21
    26aa:	08 95       	ret

000026ac <__fp_round>:
    26ac:	09 2e       	mov	r0, r25
    26ae:	03 94       	inc	r0
    26b0:	00 0c       	add	r0, r0
    26b2:	11 f4       	brne	.+4      	; 0x26b8 <__fp_round+0xc>
    26b4:	88 23       	and	r24, r24
    26b6:	52 f0       	brmi	.+20     	; 0x26cc <__fp_round+0x20>
    26b8:	bb 0f       	add	r27, r27
    26ba:	40 f4       	brcc	.+16     	; 0x26cc <__fp_round+0x20>
    26bc:	bf 2b       	or	r27, r31
    26be:	11 f4       	brne	.+4      	; 0x26c4 <__fp_round+0x18>
    26c0:	60 ff       	sbrs	r22, 0
    26c2:	04 c0       	rjmp	.+8      	; 0x26cc <__fp_round+0x20>
    26c4:	6f 5f       	subi	r22, 0xFF	; 255
    26c6:	7f 4f       	sbci	r23, 0xFF	; 255
    26c8:	8f 4f       	sbci	r24, 0xFF	; 255
    26ca:	9f 4f       	sbci	r25, 0xFF	; 255
    26cc:	08 95       	ret

000026ce <__fp_split3>:
    26ce:	57 fd       	sbrc	r21, 7
    26d0:	90 58       	subi	r25, 0x80	; 128
    26d2:	44 0f       	add	r20, r20
    26d4:	55 1f       	adc	r21, r21
    26d6:	59 f0       	breq	.+22     	; 0x26ee <__fp_splitA+0x10>
    26d8:	5f 3f       	cpi	r21, 0xFF	; 255
    26da:	71 f0       	breq	.+28     	; 0x26f8 <__fp_splitA+0x1a>
    26dc:	47 95       	ror	r20

000026de <__fp_splitA>:
    26de:	88 0f       	add	r24, r24
    26e0:	97 fb       	bst	r25, 7
    26e2:	99 1f       	adc	r25, r25
    26e4:	61 f0       	breq	.+24     	; 0x26fe <__fp_splitA+0x20>
    26e6:	9f 3f       	cpi	r25, 0xFF	; 255
    26e8:	79 f0       	breq	.+30     	; 0x2708 <__fp_splitA+0x2a>
    26ea:	87 95       	ror	r24
    26ec:	08 95       	ret
    26ee:	12 16       	cp	r1, r18
    26f0:	13 06       	cpc	r1, r19
    26f2:	14 06       	cpc	r1, r20
    26f4:	55 1f       	adc	r21, r21
    26f6:	f2 cf       	rjmp	.-28     	; 0x26dc <__fp_split3+0xe>
    26f8:	46 95       	lsr	r20
    26fa:	f1 df       	rcall	.-30     	; 0x26de <__fp_splitA>
    26fc:	08 c0       	rjmp	.+16     	; 0x270e <__fp_splitA+0x30>
    26fe:	16 16       	cp	r1, r22
    2700:	17 06       	cpc	r1, r23
    2702:	18 06       	cpc	r1, r24
    2704:	99 1f       	adc	r25, r25
    2706:	f1 cf       	rjmp	.-30     	; 0x26ea <__fp_splitA+0xc>
    2708:	86 95       	lsr	r24
    270a:	71 05       	cpc	r23, r1
    270c:	61 05       	cpc	r22, r1
    270e:	08 94       	sec
    2710:	08 95       	ret

00002712 <__fp_zero>:
    2712:	e8 94       	clt

00002714 <__fp_szero>:
    2714:	bb 27       	eor	r27, r27
    2716:	66 27       	eor	r22, r22
    2718:	77 27       	eor	r23, r23
    271a:	cb 01       	movw	r24, r22
    271c:	97 f9       	bld	r25, 7
    271e:	08 95       	ret

00002720 <__gesf2>:
    2720:	8a df       	rcall	.-236    	; 0x2636 <__fp_cmp>
    2722:	08 f4       	brcc	.+2      	; 0x2726 <__gesf2+0x6>
    2724:	8f ef       	ldi	r24, 0xFF	; 255
    2726:	08 95       	ret

00002728 <__mulsf3>:
    2728:	0b d0       	rcall	.+22     	; 0x2740 <__mulsf3x>
    272a:	c0 cf       	rjmp	.-128    	; 0x26ac <__fp_round>
    272c:	b1 df       	rcall	.-158    	; 0x2690 <__fp_pscA>
    272e:	28 f0       	brcs	.+10     	; 0x273a <__mulsf3+0x12>
    2730:	b6 df       	rcall	.-148    	; 0x269e <__fp_pscB>
    2732:	18 f0       	brcs	.+6      	; 0x273a <__mulsf3+0x12>
    2734:	95 23       	and	r25, r21
    2736:	09 f0       	breq	.+2      	; 0x273a <__mulsf3+0x12>
    2738:	a2 cf       	rjmp	.-188    	; 0x267e <__fp_inf>
    273a:	a7 cf       	rjmp	.-178    	; 0x268a <__fp_nan>
    273c:	11 24       	eor	r1, r1
    273e:	ea cf       	rjmp	.-44     	; 0x2714 <__fp_szero>

00002740 <__mulsf3x>:
    2740:	c6 df       	rcall	.-116    	; 0x26ce <__fp_split3>
    2742:	a0 f3       	brcs	.-24     	; 0x272c <__mulsf3+0x4>

00002744 <__mulsf3_pse>:
    2744:	95 9f       	mul	r25, r21
    2746:	d1 f3       	breq	.-12     	; 0x273c <__mulsf3+0x14>
    2748:	95 0f       	add	r25, r21
    274a:	50 e0       	ldi	r21, 0x00	; 0
    274c:	55 1f       	adc	r21, r21
    274e:	62 9f       	mul	r22, r18
    2750:	f0 01       	movw	r30, r0
    2752:	72 9f       	mul	r23, r18
    2754:	bb 27       	eor	r27, r27
    2756:	f0 0d       	add	r31, r0
    2758:	b1 1d       	adc	r27, r1
    275a:	63 9f       	mul	r22, r19
    275c:	aa 27       	eor	r26, r26
    275e:	f0 0d       	add	r31, r0
    2760:	b1 1d       	adc	r27, r1
    2762:	aa 1f       	adc	r26, r26
    2764:	64 9f       	mul	r22, r20
    2766:	66 27       	eor	r22, r22
    2768:	b0 0d       	add	r27, r0
    276a:	a1 1d       	adc	r26, r1
    276c:	66 1f       	adc	r22, r22
    276e:	82 9f       	mul	r24, r18
    2770:	22 27       	eor	r18, r18
    2772:	b0 0d       	add	r27, r0
    2774:	a1 1d       	adc	r26, r1
    2776:	62 1f       	adc	r22, r18
    2778:	73 9f       	mul	r23, r19
    277a:	b0 0d       	add	r27, r0
    277c:	a1 1d       	adc	r26, r1
    277e:	62 1f       	adc	r22, r18
    2780:	83 9f       	mul	r24, r19
    2782:	a0 0d       	add	r26, r0
    2784:	61 1d       	adc	r22, r1
    2786:	22 1f       	adc	r18, r18
    2788:	74 9f       	mul	r23, r20
    278a:	33 27       	eor	r19, r19
    278c:	a0 0d       	add	r26, r0
    278e:	61 1d       	adc	r22, r1
    2790:	23 1f       	adc	r18, r19
    2792:	84 9f       	mul	r24, r20
    2794:	60 0d       	add	r22, r0
    2796:	21 1d       	adc	r18, r1
    2798:	82 2f       	mov	r24, r18
    279a:	76 2f       	mov	r23, r22
    279c:	6a 2f       	mov	r22, r26
    279e:	11 24       	eor	r1, r1
    27a0:	9f 57       	subi	r25, 0x7F	; 127
    27a2:	50 40       	sbci	r21, 0x00	; 0
    27a4:	8a f0       	brmi	.+34     	; 0x27c8 <__mulsf3_pse+0x84>
    27a6:	e1 f0       	breq	.+56     	; 0x27e0 <__mulsf3_pse+0x9c>
    27a8:	88 23       	and	r24, r24
    27aa:	4a f0       	brmi	.+18     	; 0x27be <__mulsf3_pse+0x7a>
    27ac:	ee 0f       	add	r30, r30
    27ae:	ff 1f       	adc	r31, r31
    27b0:	bb 1f       	adc	r27, r27
    27b2:	66 1f       	adc	r22, r22
    27b4:	77 1f       	adc	r23, r23
    27b6:	88 1f       	adc	r24, r24
    27b8:	91 50       	subi	r25, 0x01	; 1
    27ba:	50 40       	sbci	r21, 0x00	; 0
    27bc:	a9 f7       	brne	.-22     	; 0x27a8 <__mulsf3_pse+0x64>
    27be:	9e 3f       	cpi	r25, 0xFE	; 254
    27c0:	51 05       	cpc	r21, r1
    27c2:	70 f0       	brcs	.+28     	; 0x27e0 <__mulsf3_pse+0x9c>
    27c4:	5c cf       	rjmp	.-328    	; 0x267e <__fp_inf>
    27c6:	a6 cf       	rjmp	.-180    	; 0x2714 <__fp_szero>
    27c8:	5f 3f       	cpi	r21, 0xFF	; 255
    27ca:	ec f3       	brlt	.-6      	; 0x27c6 <__mulsf3_pse+0x82>
    27cc:	98 3e       	cpi	r25, 0xE8	; 232
    27ce:	dc f3       	brlt	.-10     	; 0x27c6 <__mulsf3_pse+0x82>
    27d0:	86 95       	lsr	r24
    27d2:	77 95       	ror	r23
    27d4:	67 95       	ror	r22
    27d6:	b7 95       	ror	r27
    27d8:	f7 95       	ror	r31
    27da:	e7 95       	ror	r30
    27dc:	9f 5f       	subi	r25, 0xFF	; 255
    27de:	c1 f7       	brne	.-16     	; 0x27d0 <__mulsf3_pse+0x8c>
    27e0:	fe 2b       	or	r31, r30
    27e2:	88 0f       	add	r24, r24
    27e4:	91 1d       	adc	r25, r1
    27e6:	96 95       	lsr	r25
    27e8:	87 95       	ror	r24
    27ea:	97 f9       	bld	r25, 7
    27ec:	08 95       	ret

000027ee <__unordsf2>:
    27ee:	23 df       	rcall	.-442    	; 0x2636 <__fp_cmp>
    27f0:	88 0b       	sbc	r24, r24
    27f2:	99 0b       	sbc	r25, r25
    27f4:	08 95       	ret

000027f6 <fdevopen>:
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	31 f4       	brne	.+12     	; 0x280e <fdevopen+0x18>
    2802:	61 15       	cp	r22, r1
    2804:	71 05       	cpc	r23, r1
    2806:	19 f4       	brne	.+6      	; 0x280e <fdevopen+0x18>
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	39 c0       	rjmp	.+114    	; 0x2880 <fdevopen+0x8a>
    280e:	8b 01       	movw	r16, r22
    2810:	ec 01       	movw	r28, r24
    2812:	6e e0       	ldi	r22, 0x0E	; 14
    2814:	70 e0       	ldi	r23, 0x00	; 0
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	a5 d0       	rcall	.+330    	; 0x2966 <calloc>
    281c:	fc 01       	movw	r30, r24
    281e:	89 2b       	or	r24, r25
    2820:	99 f3       	breq	.-26     	; 0x2808 <fdevopen+0x12>
    2822:	80 e8       	ldi	r24, 0x80	; 128
    2824:	83 83       	std	Z+3, r24	; 0x03
    2826:	01 15       	cp	r16, r1
    2828:	11 05       	cpc	r17, r1
    282a:	71 f0       	breq	.+28     	; 0x2848 <fdevopen+0x52>
    282c:	13 87       	std	Z+11, r17	; 0x0b
    282e:	02 87       	std	Z+10, r16	; 0x0a
    2830:	81 e8       	ldi	r24, 0x81	; 129
    2832:	83 83       	std	Z+3, r24	; 0x03
    2834:	80 91 b0 1c 	lds	r24, 0x1CB0
    2838:	90 91 b1 1c 	lds	r25, 0x1CB1
    283c:	89 2b       	or	r24, r25
    283e:	21 f4       	brne	.+8      	; 0x2848 <fdevopen+0x52>
    2840:	f0 93 b1 1c 	sts	0x1CB1, r31
    2844:	e0 93 b0 1c 	sts	0x1CB0, r30
    2848:	20 97       	sbiw	r28, 0x00	; 0
    284a:	c9 f0       	breq	.+50     	; 0x287e <fdevopen+0x88>
    284c:	d1 87       	std	Z+9, r29	; 0x09
    284e:	c0 87       	std	Z+8, r28	; 0x08
    2850:	83 81       	ldd	r24, Z+3	; 0x03
    2852:	82 60       	ori	r24, 0x02	; 2
    2854:	83 83       	std	Z+3, r24	; 0x03
    2856:	80 91 b2 1c 	lds	r24, 0x1CB2
    285a:	90 91 b3 1c 	lds	r25, 0x1CB3
    285e:	89 2b       	or	r24, r25
    2860:	71 f4       	brne	.+28     	; 0x287e <fdevopen+0x88>
    2862:	f0 93 b3 1c 	sts	0x1CB3, r31
    2866:	e0 93 b2 1c 	sts	0x1CB2, r30
    286a:	80 91 b4 1c 	lds	r24, 0x1CB4
    286e:	90 91 b5 1c 	lds	r25, 0x1CB5
    2872:	89 2b       	or	r24, r25
    2874:	21 f4       	brne	.+8      	; 0x287e <fdevopen+0x88>
    2876:	f0 93 b5 1c 	sts	0x1CB5, r31
    287a:	e0 93 b4 1c 	sts	0x1CB4, r30
    287e:	cf 01       	movw	r24, r30
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	1f 91       	pop	r17
    2886:	0f 91       	pop	r16
    2888:	08 95       	ret

0000288a <fgetc>:
    288a:	cf 93       	push	r28
    288c:	df 93       	push	r29
    288e:	ec 01       	movw	r28, r24
    2890:	2b 81       	ldd	r18, Y+3	; 0x03
    2892:	20 ff       	sbrs	r18, 0
    2894:	33 c0       	rjmp	.+102    	; 0x28fc <fgetc+0x72>
    2896:	26 ff       	sbrs	r18, 6
    2898:	0a c0       	rjmp	.+20     	; 0x28ae <fgetc+0x24>
    289a:	2f 7b       	andi	r18, 0xBF	; 191
    289c:	2b 83       	std	Y+3, r18	; 0x03
    289e:	8e 81       	ldd	r24, Y+6	; 0x06
    28a0:	9f 81       	ldd	r25, Y+7	; 0x07
    28a2:	01 96       	adiw	r24, 0x01	; 1
    28a4:	9f 83       	std	Y+7, r25	; 0x07
    28a6:	8e 83       	std	Y+6, r24	; 0x06
    28a8:	8a 81       	ldd	r24, Y+2	; 0x02
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	29 c0       	rjmp	.+82     	; 0x2900 <fgetc+0x76>
    28ae:	22 ff       	sbrs	r18, 2
    28b0:	0f c0       	rjmp	.+30     	; 0x28d0 <fgetc+0x46>
    28b2:	e8 81       	ld	r30, Y
    28b4:	f9 81       	ldd	r31, Y+1	; 0x01
    28b6:	80 81       	ld	r24, Z
    28b8:	08 2e       	mov	r0, r24
    28ba:	00 0c       	add	r0, r0
    28bc:	99 0b       	sbc	r25, r25
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	19 f4       	brne	.+6      	; 0x28c8 <fgetc+0x3e>
    28c2:	20 62       	ori	r18, 0x20	; 32
    28c4:	2b 83       	std	Y+3, r18	; 0x03
    28c6:	1a c0       	rjmp	.+52     	; 0x28fc <fgetc+0x72>
    28c8:	31 96       	adiw	r30, 0x01	; 1
    28ca:	f9 83       	std	Y+1, r31	; 0x01
    28cc:	e8 83       	st	Y, r30
    28ce:	0e c0       	rjmp	.+28     	; 0x28ec <fgetc+0x62>
    28d0:	ea 85       	ldd	r30, Y+10	; 0x0a
    28d2:	fb 85       	ldd	r31, Y+11	; 0x0b
    28d4:	19 95       	eicall
    28d6:	97 ff       	sbrs	r25, 7
    28d8:	09 c0       	rjmp	.+18     	; 0x28ec <fgetc+0x62>
    28da:	2b 81       	ldd	r18, Y+3	; 0x03
    28dc:	01 96       	adiw	r24, 0x01	; 1
    28de:	11 f0       	breq	.+4      	; 0x28e4 <fgetc+0x5a>
    28e0:	80 e2       	ldi	r24, 0x20	; 32
    28e2:	01 c0       	rjmp	.+2      	; 0x28e6 <fgetc+0x5c>
    28e4:	80 e1       	ldi	r24, 0x10	; 16
    28e6:	82 2b       	or	r24, r18
    28e8:	8b 83       	std	Y+3, r24	; 0x03
    28ea:	08 c0       	rjmp	.+16     	; 0x28fc <fgetc+0x72>
    28ec:	2e 81       	ldd	r18, Y+6	; 0x06
    28ee:	3f 81       	ldd	r19, Y+7	; 0x07
    28f0:	2f 5f       	subi	r18, 0xFF	; 255
    28f2:	3f 4f       	sbci	r19, 0xFF	; 255
    28f4:	3f 83       	std	Y+7, r19	; 0x07
    28f6:	2e 83       	std	Y+6, r18	; 0x06
    28f8:	99 27       	eor	r25, r25
    28fa:	02 c0       	rjmp	.+4      	; 0x2900 <fgetc+0x76>
    28fc:	8f ef       	ldi	r24, 0xFF	; 255
    28fe:	9f ef       	ldi	r25, 0xFF	; 255
    2900:	df 91       	pop	r29
    2902:	cf 91       	pop	r28
    2904:	08 95       	ret

00002906 <puts>:
    2906:	0f 93       	push	r16
    2908:	1f 93       	push	r17
    290a:	cf 93       	push	r28
    290c:	df 93       	push	r29
    290e:	e0 91 b2 1c 	lds	r30, 0x1CB2
    2912:	f0 91 b3 1c 	lds	r31, 0x1CB3
    2916:	23 81       	ldd	r18, Z+3	; 0x03
    2918:	21 ff       	sbrs	r18, 1
    291a:	1b c0       	rjmp	.+54     	; 0x2952 <puts+0x4c>
    291c:	8c 01       	movw	r16, r24
    291e:	d0 e0       	ldi	r29, 0x00	; 0
    2920:	c0 e0       	ldi	r28, 0x00	; 0
    2922:	f8 01       	movw	r30, r16
    2924:	81 91       	ld	r24, Z+
    2926:	8f 01       	movw	r16, r30
    2928:	60 91 b2 1c 	lds	r22, 0x1CB2
    292c:	70 91 b3 1c 	lds	r23, 0x1CB3
    2930:	db 01       	movw	r26, r22
    2932:	18 96       	adiw	r26, 0x08	; 8
    2934:	ed 91       	ld	r30, X+
    2936:	fc 91       	ld	r31, X
    2938:	19 97       	sbiw	r26, 0x09	; 9
    293a:	88 23       	and	r24, r24
    293c:	31 f0       	breq	.+12     	; 0x294a <puts+0x44>
    293e:	19 95       	eicall
    2940:	89 2b       	or	r24, r25
    2942:	79 f3       	breq	.-34     	; 0x2922 <puts+0x1c>
    2944:	df ef       	ldi	r29, 0xFF	; 255
    2946:	cf ef       	ldi	r28, 0xFF	; 255
    2948:	ec cf       	rjmp	.-40     	; 0x2922 <puts+0x1c>
    294a:	8a e0       	ldi	r24, 0x0A	; 10
    294c:	19 95       	eicall
    294e:	89 2b       	or	r24, r25
    2950:	19 f0       	breq	.+6      	; 0x2958 <puts+0x52>
    2952:	8f ef       	ldi	r24, 0xFF	; 255
    2954:	9f ef       	ldi	r25, 0xFF	; 255
    2956:	02 c0       	rjmp	.+4      	; 0x295c <puts+0x56>
    2958:	8d 2f       	mov	r24, r29
    295a:	9c 2f       	mov	r25, r28
    295c:	df 91       	pop	r29
    295e:	cf 91       	pop	r28
    2960:	1f 91       	pop	r17
    2962:	0f 91       	pop	r16
    2964:	08 95       	ret

00002966 <calloc>:
    2966:	0f 93       	push	r16
    2968:	1f 93       	push	r17
    296a:	cf 93       	push	r28
    296c:	df 93       	push	r29
    296e:	86 9f       	mul	r24, r22
    2970:	80 01       	movw	r16, r0
    2972:	87 9f       	mul	r24, r23
    2974:	10 0d       	add	r17, r0
    2976:	96 9f       	mul	r25, r22
    2978:	10 0d       	add	r17, r0
    297a:	11 24       	eor	r1, r1
    297c:	c8 01       	movw	r24, r16
    297e:	0d d0       	rcall	.+26     	; 0x299a <malloc>
    2980:	ec 01       	movw	r28, r24
    2982:	00 97       	sbiw	r24, 0x00	; 0
    2984:	21 f0       	breq	.+8      	; 0x298e <calloc+0x28>
    2986:	a8 01       	movw	r20, r16
    2988:	60 e0       	ldi	r22, 0x00	; 0
    298a:	70 e0       	ldi	r23, 0x00	; 0
    298c:	33 d1       	rcall	.+614    	; 0x2bf4 <memset>
    298e:	ce 01       	movw	r24, r28
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	1f 91       	pop	r17
    2996:	0f 91       	pop	r16
    2998:	08 95       	ret

0000299a <malloc>:
    299a:	cf 93       	push	r28
    299c:	df 93       	push	r29
    299e:	82 30       	cpi	r24, 0x02	; 2
    29a0:	91 05       	cpc	r25, r1
    29a2:	10 f4       	brcc	.+4      	; 0x29a8 <malloc+0xe>
    29a4:	82 e0       	ldi	r24, 0x02	; 2
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	e0 91 b8 1c 	lds	r30, 0x1CB8
    29ac:	f0 91 b9 1c 	lds	r31, 0x1CB9
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	c0 e0       	ldi	r28, 0x00	; 0
    29b6:	d0 e0       	ldi	r29, 0x00	; 0
    29b8:	30 97       	sbiw	r30, 0x00	; 0
    29ba:	11 f1       	breq	.+68     	; 0x2a00 <malloc+0x66>
    29bc:	40 81       	ld	r20, Z
    29be:	51 81       	ldd	r21, Z+1	; 0x01
    29c0:	48 17       	cp	r20, r24
    29c2:	59 07       	cpc	r21, r25
    29c4:	c0 f0       	brcs	.+48     	; 0x29f6 <malloc+0x5c>
    29c6:	48 17       	cp	r20, r24
    29c8:	59 07       	cpc	r21, r25
    29ca:	61 f4       	brne	.+24     	; 0x29e4 <malloc+0x4a>
    29cc:	82 81       	ldd	r24, Z+2	; 0x02
    29ce:	93 81       	ldd	r25, Z+3	; 0x03
    29d0:	20 97       	sbiw	r28, 0x00	; 0
    29d2:	19 f0       	breq	.+6      	; 0x29da <malloc+0x40>
    29d4:	9b 83       	std	Y+3, r25	; 0x03
    29d6:	8a 83       	std	Y+2, r24	; 0x02
    29d8:	2b c0       	rjmp	.+86     	; 0x2a30 <malloc+0x96>
    29da:	90 93 b9 1c 	sts	0x1CB9, r25
    29de:	80 93 b8 1c 	sts	0x1CB8, r24
    29e2:	26 c0       	rjmp	.+76     	; 0x2a30 <malloc+0x96>
    29e4:	21 15       	cp	r18, r1
    29e6:	31 05       	cpc	r19, r1
    29e8:	19 f0       	breq	.+6      	; 0x29f0 <malloc+0x56>
    29ea:	42 17       	cp	r20, r18
    29ec:	53 07       	cpc	r21, r19
    29ee:	18 f4       	brcc	.+6      	; 0x29f6 <malloc+0x5c>
    29f0:	9a 01       	movw	r18, r20
    29f2:	be 01       	movw	r22, r28
    29f4:	df 01       	movw	r26, r30
    29f6:	ef 01       	movw	r28, r30
    29f8:	02 80       	ldd	r0, Z+2	; 0x02
    29fa:	f3 81       	ldd	r31, Z+3	; 0x03
    29fc:	e0 2d       	mov	r30, r0
    29fe:	dc cf       	rjmp	.-72     	; 0x29b8 <malloc+0x1e>
    2a00:	21 15       	cp	r18, r1
    2a02:	31 05       	cpc	r19, r1
    2a04:	09 f1       	breq	.+66     	; 0x2a48 <malloc+0xae>
    2a06:	28 1b       	sub	r18, r24
    2a08:	39 0b       	sbc	r19, r25
    2a0a:	24 30       	cpi	r18, 0x04	; 4
    2a0c:	31 05       	cpc	r19, r1
    2a0e:	90 f4       	brcc	.+36     	; 0x2a34 <malloc+0x9a>
    2a10:	12 96       	adiw	r26, 0x02	; 2
    2a12:	8d 91       	ld	r24, X+
    2a14:	9c 91       	ld	r25, X
    2a16:	13 97       	sbiw	r26, 0x03	; 3
    2a18:	61 15       	cp	r22, r1
    2a1a:	71 05       	cpc	r23, r1
    2a1c:	21 f0       	breq	.+8      	; 0x2a26 <malloc+0x8c>
    2a1e:	fb 01       	movw	r30, r22
    2a20:	93 83       	std	Z+3, r25	; 0x03
    2a22:	82 83       	std	Z+2, r24	; 0x02
    2a24:	04 c0       	rjmp	.+8      	; 0x2a2e <malloc+0x94>
    2a26:	90 93 b9 1c 	sts	0x1CB9, r25
    2a2a:	80 93 b8 1c 	sts	0x1CB8, r24
    2a2e:	fd 01       	movw	r30, r26
    2a30:	32 96       	adiw	r30, 0x02	; 2
    2a32:	44 c0       	rjmp	.+136    	; 0x2abc <malloc+0x122>
    2a34:	fd 01       	movw	r30, r26
    2a36:	e2 0f       	add	r30, r18
    2a38:	f3 1f       	adc	r31, r19
    2a3a:	81 93       	st	Z+, r24
    2a3c:	91 93       	st	Z+, r25
    2a3e:	22 50       	subi	r18, 0x02	; 2
    2a40:	31 09       	sbc	r19, r1
    2a42:	2d 93       	st	X+, r18
    2a44:	3c 93       	st	X, r19
    2a46:	3a c0       	rjmp	.+116    	; 0x2abc <malloc+0x122>
    2a48:	20 91 b6 1c 	lds	r18, 0x1CB6
    2a4c:	30 91 b7 1c 	lds	r19, 0x1CB7
    2a50:	23 2b       	or	r18, r19
    2a52:	41 f4       	brne	.+16     	; 0x2a64 <malloc+0xca>
    2a54:	20 91 04 02 	lds	r18, 0x0204
    2a58:	30 91 05 02 	lds	r19, 0x0205
    2a5c:	30 93 b7 1c 	sts	0x1CB7, r19
    2a60:	20 93 b6 1c 	sts	0x1CB6, r18
    2a64:	20 91 02 02 	lds	r18, 0x0202
    2a68:	30 91 03 02 	lds	r19, 0x0203
    2a6c:	21 15       	cp	r18, r1
    2a6e:	31 05       	cpc	r19, r1
    2a70:	41 f4       	brne	.+16     	; 0x2a82 <malloc+0xe8>
    2a72:	2d b7       	in	r18, 0x3d	; 61
    2a74:	3e b7       	in	r19, 0x3e	; 62
    2a76:	40 91 06 02 	lds	r20, 0x0206
    2a7a:	50 91 07 02 	lds	r21, 0x0207
    2a7e:	24 1b       	sub	r18, r20
    2a80:	35 0b       	sbc	r19, r21
    2a82:	e0 91 b6 1c 	lds	r30, 0x1CB6
    2a86:	f0 91 b7 1c 	lds	r31, 0x1CB7
    2a8a:	e2 17       	cp	r30, r18
    2a8c:	f3 07       	cpc	r31, r19
    2a8e:	a0 f4       	brcc	.+40     	; 0x2ab8 <malloc+0x11e>
    2a90:	2e 1b       	sub	r18, r30
    2a92:	3f 0b       	sbc	r19, r31
    2a94:	28 17       	cp	r18, r24
    2a96:	39 07       	cpc	r19, r25
    2a98:	78 f0       	brcs	.+30     	; 0x2ab8 <malloc+0x11e>
    2a9a:	ac 01       	movw	r20, r24
    2a9c:	4e 5f       	subi	r20, 0xFE	; 254
    2a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa0:	24 17       	cp	r18, r20
    2aa2:	35 07       	cpc	r19, r21
    2aa4:	48 f0       	brcs	.+18     	; 0x2ab8 <malloc+0x11e>
    2aa6:	4e 0f       	add	r20, r30
    2aa8:	5f 1f       	adc	r21, r31
    2aaa:	50 93 b7 1c 	sts	0x1CB7, r21
    2aae:	40 93 b6 1c 	sts	0x1CB6, r20
    2ab2:	81 93       	st	Z+, r24
    2ab4:	91 93       	st	Z+, r25
    2ab6:	02 c0       	rjmp	.+4      	; 0x2abc <malloc+0x122>
    2ab8:	e0 e0       	ldi	r30, 0x00	; 0
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	cf 01       	movw	r24, r30
    2abe:	df 91       	pop	r29
    2ac0:	cf 91       	pop	r28
    2ac2:	08 95       	ret

00002ac4 <free>:
    2ac4:	0f 93       	push	r16
    2ac6:	1f 93       	push	r17
    2ac8:	cf 93       	push	r28
    2aca:	df 93       	push	r29
    2acc:	00 97       	sbiw	r24, 0x00	; 0
    2ace:	09 f4       	brne	.+2      	; 0x2ad2 <free+0xe>
    2ad0:	8c c0       	rjmp	.+280    	; 0x2bea <free+0x126>
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	32 97       	sbiw	r30, 0x02	; 2
    2ad6:	13 82       	std	Z+3, r1	; 0x03
    2ad8:	12 82       	std	Z+2, r1	; 0x02
    2ada:	00 91 b8 1c 	lds	r16, 0x1CB8
    2ade:	10 91 b9 1c 	lds	r17, 0x1CB9
    2ae2:	01 15       	cp	r16, r1
    2ae4:	11 05       	cpc	r17, r1
    2ae6:	81 f4       	brne	.+32     	; 0x2b08 <free+0x44>
    2ae8:	20 81       	ld	r18, Z
    2aea:	31 81       	ldd	r19, Z+1	; 0x01
    2aec:	82 0f       	add	r24, r18
    2aee:	93 1f       	adc	r25, r19
    2af0:	20 91 b6 1c 	lds	r18, 0x1CB6
    2af4:	30 91 b7 1c 	lds	r19, 0x1CB7
    2af8:	28 17       	cp	r18, r24
    2afa:	39 07       	cpc	r19, r25
    2afc:	79 f5       	brne	.+94     	; 0x2b5c <free+0x98>
    2afe:	f0 93 b7 1c 	sts	0x1CB7, r31
    2b02:	e0 93 b6 1c 	sts	0x1CB6, r30
    2b06:	71 c0       	rjmp	.+226    	; 0x2bea <free+0x126>
    2b08:	d8 01       	movw	r26, r16
    2b0a:	40 e0       	ldi	r20, 0x00	; 0
    2b0c:	50 e0       	ldi	r21, 0x00	; 0
    2b0e:	ae 17       	cp	r26, r30
    2b10:	bf 07       	cpc	r27, r31
    2b12:	50 f4       	brcc	.+20     	; 0x2b28 <free+0x64>
    2b14:	12 96       	adiw	r26, 0x02	; 2
    2b16:	2d 91       	ld	r18, X+
    2b18:	3c 91       	ld	r19, X
    2b1a:	13 97       	sbiw	r26, 0x03	; 3
    2b1c:	ad 01       	movw	r20, r26
    2b1e:	21 15       	cp	r18, r1
    2b20:	31 05       	cpc	r19, r1
    2b22:	09 f1       	breq	.+66     	; 0x2b66 <free+0xa2>
    2b24:	d9 01       	movw	r26, r18
    2b26:	f3 cf       	rjmp	.-26     	; 0x2b0e <free+0x4a>
    2b28:	9d 01       	movw	r18, r26
    2b2a:	da 01       	movw	r26, r20
    2b2c:	33 83       	std	Z+3, r19	; 0x03
    2b2e:	22 83       	std	Z+2, r18	; 0x02
    2b30:	60 81       	ld	r22, Z
    2b32:	71 81       	ldd	r23, Z+1	; 0x01
    2b34:	86 0f       	add	r24, r22
    2b36:	97 1f       	adc	r25, r23
    2b38:	82 17       	cp	r24, r18
    2b3a:	93 07       	cpc	r25, r19
    2b3c:	69 f4       	brne	.+26     	; 0x2b58 <free+0x94>
    2b3e:	ec 01       	movw	r28, r24
    2b40:	28 81       	ld	r18, Y
    2b42:	39 81       	ldd	r19, Y+1	; 0x01
    2b44:	26 0f       	add	r18, r22
    2b46:	37 1f       	adc	r19, r23
    2b48:	2e 5f       	subi	r18, 0xFE	; 254
    2b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4c:	31 83       	std	Z+1, r19	; 0x01
    2b4e:	20 83       	st	Z, r18
    2b50:	8a 81       	ldd	r24, Y+2	; 0x02
    2b52:	9b 81       	ldd	r25, Y+3	; 0x03
    2b54:	93 83       	std	Z+3, r25	; 0x03
    2b56:	82 83       	std	Z+2, r24	; 0x02
    2b58:	45 2b       	or	r20, r21
    2b5a:	29 f4       	brne	.+10     	; 0x2b66 <free+0xa2>
    2b5c:	f0 93 b9 1c 	sts	0x1CB9, r31
    2b60:	e0 93 b8 1c 	sts	0x1CB8, r30
    2b64:	42 c0       	rjmp	.+132    	; 0x2bea <free+0x126>
    2b66:	13 96       	adiw	r26, 0x03	; 3
    2b68:	fc 93       	st	X, r31
    2b6a:	ee 93       	st	-X, r30
    2b6c:	12 97       	sbiw	r26, 0x02	; 2
    2b6e:	ed 01       	movw	r28, r26
    2b70:	49 91       	ld	r20, Y+
    2b72:	59 91       	ld	r21, Y+
    2b74:	9e 01       	movw	r18, r28
    2b76:	24 0f       	add	r18, r20
    2b78:	35 1f       	adc	r19, r21
    2b7a:	e2 17       	cp	r30, r18
    2b7c:	f3 07       	cpc	r31, r19
    2b7e:	71 f4       	brne	.+28     	; 0x2b9c <free+0xd8>
    2b80:	80 81       	ld	r24, Z
    2b82:	91 81       	ldd	r25, Z+1	; 0x01
    2b84:	84 0f       	add	r24, r20
    2b86:	95 1f       	adc	r25, r21
    2b88:	02 96       	adiw	r24, 0x02	; 2
    2b8a:	11 96       	adiw	r26, 0x01	; 1
    2b8c:	9c 93       	st	X, r25
    2b8e:	8e 93       	st	-X, r24
    2b90:	82 81       	ldd	r24, Z+2	; 0x02
    2b92:	93 81       	ldd	r25, Z+3	; 0x03
    2b94:	13 96       	adiw	r26, 0x03	; 3
    2b96:	9c 93       	st	X, r25
    2b98:	8e 93       	st	-X, r24
    2b9a:	12 97       	sbiw	r26, 0x02	; 2
    2b9c:	e0 e0       	ldi	r30, 0x00	; 0
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	d8 01       	movw	r26, r16
    2ba2:	12 96       	adiw	r26, 0x02	; 2
    2ba4:	8d 91       	ld	r24, X+
    2ba6:	9c 91       	ld	r25, X
    2ba8:	13 97       	sbiw	r26, 0x03	; 3
    2baa:	00 97       	sbiw	r24, 0x00	; 0
    2bac:	19 f0       	breq	.+6      	; 0x2bb4 <free+0xf0>
    2bae:	f8 01       	movw	r30, r16
    2bb0:	8c 01       	movw	r16, r24
    2bb2:	f6 cf       	rjmp	.-20     	; 0x2ba0 <free+0xdc>
    2bb4:	8d 91       	ld	r24, X+
    2bb6:	9c 91       	ld	r25, X
    2bb8:	98 01       	movw	r18, r16
    2bba:	2e 5f       	subi	r18, 0xFE	; 254
    2bbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bbe:	82 0f       	add	r24, r18
    2bc0:	93 1f       	adc	r25, r19
    2bc2:	20 91 b6 1c 	lds	r18, 0x1CB6
    2bc6:	30 91 b7 1c 	lds	r19, 0x1CB7
    2bca:	28 17       	cp	r18, r24
    2bcc:	39 07       	cpc	r19, r25
    2bce:	69 f4       	brne	.+26     	; 0x2bea <free+0x126>
    2bd0:	30 97       	sbiw	r30, 0x00	; 0
    2bd2:	29 f4       	brne	.+10     	; 0x2bde <free+0x11a>
    2bd4:	10 92 b9 1c 	sts	0x1CB9, r1
    2bd8:	10 92 b8 1c 	sts	0x1CB8, r1
    2bdc:	02 c0       	rjmp	.+4      	; 0x2be2 <free+0x11e>
    2bde:	13 82       	std	Z+3, r1	; 0x03
    2be0:	12 82       	std	Z+2, r1	; 0x02
    2be2:	10 93 b7 1c 	sts	0x1CB7, r17
    2be6:	00 93 b6 1c 	sts	0x1CB6, r16
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	1f 91       	pop	r17
    2bf0:	0f 91       	pop	r16
    2bf2:	08 95       	ret

00002bf4 <memset>:
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <memset+0x6>
    2bf8:	6d 93       	st	X+, r22
    2bfa:	41 50       	subi	r20, 0x01	; 1
    2bfc:	50 40       	sbci	r21, 0x00	; 0
    2bfe:	e0 f7       	brcc	.-8      	; 0x2bf8 <memset+0x4>
    2c00:	08 95       	ret

00002c02 <_exit>:
    2c02:	f8 94       	cli

00002c04 <__stop_program>:
    2c04:	ff cf       	rjmp	.-2      	; 0x2c04 <__stop_program>
